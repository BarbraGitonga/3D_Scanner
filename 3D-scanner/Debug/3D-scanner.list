
3D-scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d9d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  0801dba0  0801dba0  0001eba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e4a0  0801e4a0  00020338  2**0
                  CONTENTS
  4 .ARM          00000008  0801e4a0  0801e4a0  0001f4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e4a8  0801e4a8  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801e4a8  0801e4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0801e4b0  0801e4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0801e4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f8  0801e6b0  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000298  0801e750  00020298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000146c  20000338  0801e7f0  00020338  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200017a4  0801e7f0  000207a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 14 .debug_info   00041acd  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008543  00000000  00000000  00061e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003118  00000000  00000000  0006a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025f8  00000000  00000000  0006d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039d64  00000000  00000000  0006fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046aa5  00000000  00000000  000a97ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128ec4  00000000  00000000  000f0291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00219155  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e5d8  00000000  00000000  00219198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00227770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801db88 	.word	0x0801db88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	0801db88 	.word	0x0801db88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_ZN11MPU6050Data7setFromER12MPU6050_data>:
	float accX, accY, accZ;
	float gyroX, gyroY, gyroZ;
	float magX;


	void setFrom(MPU6050_data& mpu_data) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
		accX  = mpu_data.acc_mps2[1];
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	601a      	str	r2, [r3, #0]
		accY  = mpu_data.acc_mps2[0];
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]
		accZ  = mpu_data.acc_mps2[2];
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
		gyroX = mpu_data.gyro_rad[1];
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60da      	str	r2, [r3, #12]
		gyroY = mpu_data.gyro_rad[0];
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
		gyroZ = mpu_data.gyro_rad[2];
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	615a      	str	r2, [r3, #20]
	}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_I2C_MemRxCpltCallback>:
    DMA_MAG_READING
} dma_state_t;

volatile dma_state_t dmaState = DMA_IDLE;

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d116      	bne.n	8001000 <HAL_I2C_MemRxCpltCallback+0x40>
        switch (dmaState) {
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d002      	beq.n	8000fe2 <HAL_I2C_MemRxCpltCallback+0x22>
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d004      	beq.n	8000fea <HAL_I2C_MemRxCpltCallback+0x2a>
 8000fe0:	e00a      	b.n	8000ff8 <HAL_I2C_MemRxCpltCallback+0x38>
        case DMA_IMU_READING:
            dmaState = DMA_MAG_READY_TO_READ; // Request MAG read in main loop
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]

            break;
 8000fe8:	e00a      	b.n	8001000 <HAL_I2C_MemRxCpltCallback+0x40>

        case DMA_MAG_READING:
            data_ready = 1; // Both IMU & MAG done
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_I2C_MemRxCpltCallback+0x54>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
            dmaState = DMA_IDLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

            break;
 8000ff6:	e003      	b.n	8001000 <HAL_I2C_MemRxCpltCallback+0x40>

        default:
            dmaState = DMA_IDLE;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_I2C_MemRxCpltCallback+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]

            break;
 8000ffe:	bf00      	nop
        }
    }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40005400 	.word	0x40005400
 8001010:	20000d94 	.word	0x20000d94
 8001014:	20000d3c 	.word	0x20000d3c

08001018 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:
// Data holder for VL53L0X
statInfo_t_VL53L0X distanceStr;
uint16_t distance; 

// VL53L0X sensor initialization
bool VL53L0X_Init(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	@ 0x40
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  // Check if VL53L0X is ready on I2C
  const size_t bufSize = 50;
 8001022:	2332      	movs	r3, #50	@ 0x32
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
  char usbBuf[bufSize];

  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(hi2c, VLXI2CADDRESS, 2,  100);
 8001026:	2364      	movs	r3, #100	@ 0x64
 8001028:	2202      	movs	r2, #2
 800102a:	2152      	movs	r1, #82	@ 0x52
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f007 fe87 	bl	8008d40 <HAL_I2C_IsDeviceReady>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status != HAL_OK) {
 8001038:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x3a>
    snprintf(usbBuf, bufSize, "VL53L0X NOT found\r\n");
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x78>)
 8001046:	2132      	movs	r1, #50	@ 0x32
 8001048:	4618      	mov	r0, r3
 800104a:	f01a fd11 	bl	801ba70 <sniprintf>
    return false;
 800104e:	2300      	movs	r3, #0
 8001050:	e01a      	b.n	8001088 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x70>
  }

  // Initialize VL53L0X sensor
  initVL53L0X(1, hi2c);
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	2001      	movs	r0, #1
 8001056:	f017 ff43 	bl	8018ee0 <initVL53L0X>

  setSignalRateLimit(200);
 800105a:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001094 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x7c>
 800105e:	f018 f99f 	bl	80193a0 <setSignalRateLimit>
  setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8001062:	2112      	movs	r1, #18
 8001064:	2000      	movs	r0, #0
 8001066:	f018 facb 	bl	8019600 <setVcselPulsePeriod>
  setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 800106a:	210e      	movs	r1, #14
 800106c:	2001      	movs	r0, #1
 800106e:	f018 fac7 	bl	8019600 <setVcselPulsePeriod>
  setMeasurementTimingBudget(300 * 1000UL);
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x80>)
 8001074:	f018 f9ca 	bl	801940c <setMeasurementTimingBudget>

  snprintf(usbBuf, bufSize, "VL53L0X Initialized\r\n");
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x84>)
 800107e:	2132      	movs	r1, #50	@ 0x32
 8001080:	4618      	mov	r0, r3
 8001082:	f01a fcf5 	bl	801ba70 <sniprintf>
  return true;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3740      	adds	r7, #64	@ 0x40
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0801dba0 	.word	0x0801dba0
 8001094:	43480000 	.word	0x43480000
 8001098:	000493e0 	.word	0x000493e0
 800109c:	0801dbb4 	.word	0x0801dbb4

080010a0 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>:




void I2C_Scanner(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	@ 0x48
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef result;
    uint8_t devicesFound = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t usbBufLen;
    char usbBuf[50];


    for (uint8_t i = 1; i < 128; i++) {
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80010b6:	e02e      	b.n	8001116 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x76>
        result = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 5);
 80010b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010bc:	b29b      	uxth	r3, r3
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	b299      	uxth	r1, r3
 80010c2:	2305      	movs	r3, #5
 80010c4:	2202      	movs	r2, #2
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f007 fe3a 	bl	8008d40 <HAL_I2C_IsDeviceReady>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (result == HAL_OK) {
 80010d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x6c>
            usbBufLen = snprintf(usbBuf, sizeof(usbBuf),
 80010da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80010de:	f107 000c 	add.w	r0, r7, #12
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0xd0>)
 80010e4:	2132      	movs	r1, #50	@ 0x32
 80010e6:	f01a fcc3 	bl	801ba70 <sniprintf>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                                 "I2C device found at address 0x%02X\r\n", i);
            HAL_UART_Transmit(huart, (uint8_t *)usbBuf, usbBufLen, 100);
 80010f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	2364      	movs	r3, #100	@ 0x64
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f00e ff45 	bl	800ff8c <HAL_UART_Transmit>
            devicesFound++;
 8001102:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001106:	3301      	adds	r3, #1
 8001108:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t i = 1; i < 128; i++) {
 800110c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001116:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 800111a:	2b00      	cmp	r3, #0
 800111c:	dacc      	bge.n	80010b8 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0x18>
        }
    }

    if (devicesFound == 0) {
 800111e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0xa0>
        const char *noDevMsg = "No I2C devices found\r\n";
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0xd4>)
 8001128:	643b      	str	r3, [r7, #64]	@ 0x40
        HAL_UART_Transmit(huart, (uint8_t *)noDevMsg, strlen(noDevMsg), 100);
 800112a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800112c:	f7ff f8c0 	bl	80002b0 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	2364      	movs	r3, #100	@ 0x64
 8001136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f00e ff27 	bl	800ff8c <HAL_UART_Transmit>
    } else {
        usbBufLen = snprintf(usbBuf, sizeof(usbBuf),
                             "Found %d I2C device(s)\r\n", devicesFound);
        HAL_UART_Transmit(huart, (uint8_t *)usbBuf, usbBufLen, 100);
    }
}
 800113e:	e013      	b.n	8001168 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0xc8>
        usbBufLen = snprintf(usbBuf, sizeof(usbBuf),
 8001140:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef+0xd8>)
 800114a:	2132      	movs	r1, #50	@ 0x32
 800114c:	f01a fc90 	bl	801ba70 <sniprintf>
 8001150:	4603      	mov	r3, r0
 8001152:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        HAL_UART_Transmit(huart, (uint8_t *)usbBuf, usbBufLen, 100);
 8001156:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800115a:	b29a      	uxth	r2, r3
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	2364      	movs	r3, #100	@ 0x64
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f00e ff12 	bl	800ff8c <HAL_UART_Transmit>
}
 8001168:	bf00      	nop
 800116a:	3748      	adds	r7, #72	@ 0x48
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0801dbcc 	.word	0x0801dbcc
 8001174:	0801dbf4 	.word	0x0801dbf4
 8001178:	0801dc0c 	.word	0x0801dc0c

0800117c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b09e      	sub	sp, #120	@ 0x78
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_I2C_ErrorCallback+0x58>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d11d      	bne.n	80011cc <HAL_I2C_ErrorCallback+0x50>
        // Debug: Send error info via UART
        char errorBuf[100];
        uint8_t len = snprintf(errorBuf, sizeof(errorBuf),
                              "I2C DMA Error: 0x%08X, State: %d\r\n",
                              (unsigned int)hi2c->ErrorCode, (int)dmaState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        uint8_t len = snprintf(errorBuf, sizeof(errorBuf),
 8001194:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_I2C_ErrorCallback+0x5c>)
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f107 0008 	add.w	r0, r7, #8
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_I2C_ErrorCallback+0x60>)
 80011a2:	2164      	movs	r1, #100	@ 0x64
 80011a4:	f01a fc64 	bl	801ba70 <sniprintf>
 80011a8:	4603      	mov	r3, r0
                              (unsigned int)hi2c->ErrorCode, (int)dmaState);
 80011aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        HAL_UART_Transmit(&huart1, (uint8_t *)errorBuf, len, 100);
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 0108 	add.w	r1, r7, #8
 80011b8:	2364      	movs	r3, #100	@ 0x64
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <HAL_I2C_ErrorCallback+0x64>)
 80011bc:	f00e fee6 	bl	800ff8c <HAL_UART_Transmit>

        // Reset DMA state
        dmaState = DMA_IDLE;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_I2C_ErrorCallback+0x5c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
        data_ready = 0;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_I2C_ErrorCallback+0x68>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    }
}
 80011cc:	bf00      	nop
 80011ce:	3770      	adds	r7, #112	@ 0x70
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000053c 	.word	0x2000053c
 80011d8:	20000d94 	.word	0x20000d94
 80011dc:	0801dc28 	.word	0x0801dc28
 80011e0:	20000bbc 	.word	0x20000bbc
 80011e4:	20000d3c 	.word	0x20000d3c

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b0d6      	sub	sp, #344	@ 0x158
 80011ee:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f003 f8d5 	bl	800439e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 fa56 	bl	80016a4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011f8:	f000 fad4 	bl	80017a4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f001 fb6a 	bl	80028d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001200:	f001 faec 	bl	80027dc <_ZL11MX_DMA_Initv>
  MX_DCMI_Init();
 8001204:	f000 fb88 	bl	8001918 <_ZL12MX_DCMI_Initv>
  MX_DMA2D_Init();
 8001208:	f000 fbc0 	bl	800198c <_ZL13MX_DMA2D_Initv>
  MX_ETH_Init();
 800120c:	f000 fbfa 	bl	8001a04 <_ZL11MX_ETH_Initv>
  MX_FMC_Init();
 8001210:	f001 fb0a 	bl	8002828 <_ZL11MX_FMC_Initv>
  MX_I2C1_Init();
 8001214:	f000 fc48 	bl	8001aa8 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8001218:	f000 fc94 	bl	8001b44 <_ZL12MX_I2C3_Initv>
  MX_LTDC_Init();
 800121c:	f000 fce0 	bl	8001be0 <_ZL12MX_LTDC_Initv>
  MX_QUADSPI_Init();
 8001220:	f000 fd6a 	bl	8001cf8 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 8001224:	f000 fd9a 	bl	8001d5c <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8001228:	f000 fe5a 	bl	8001ee0 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 800122c:	f000 ff0a 	bl	8002044 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 8001230:	f000 ff2a 	bl	8002088 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 8001234:	f000 ff5e 	bl	80020f4 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8001238:	f000 ff9e 	bl	8002178 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800123c:	f001 f804 	bl	8002248 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001240:	f001 f892 	bl	8002368 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8001244:	f001 f920 	bl	8002488 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8001248:	f001 f9ae 	bl	80025a8 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 800124c:	f001 fa0e 	bl	800266c <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8001250:	f001 fa5c 	bl	800270c <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8001254:	f001 fa8e 	bl	8002774 <_ZL19MX_USART6_UART_Initv>
  MX_FATFS_Init();
 8001258:	f015 fad6 	bl	8016808 <MX_FATFS_Init>
  MX_ADC3_Init();
 800125c:	f000 fad8 	bl	8001810 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 8001260:	f000 fb32 	bl	80018c8 <_ZL11MX_CRC_Initv>
  MX_USB_HOST_Init();
 8001264:	f017 fa90 	bl	8018788 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 8001268:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800126c:	f003 f8c4 	bl	80043f8 <HAL_Delay>

  I2C_Scanner(&hi2c1, &huart1);
 8001270:	4948      	ldr	r1, [pc, #288]	@ (8001394 <main+0x1ac>)
 8001272:	4849      	ldr	r0, [pc, #292]	@ (8001398 <main+0x1b0>)
 8001274:	f7ff ff14 	bl	80010a0 <_Z11I2C_ScannerP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>

  VL53L0X_Init(&hi2c1, &huart1);
 8001278:	4946      	ldr	r1, [pc, #280]	@ (8001394 <main+0x1ac>)
 800127a:	4847      	ldr	r0, [pc, #284]	@ (8001398 <main+0x1b0>)
 800127c:	f7ff fecc 	bl	8001018 <_Z12VL53L0X_InitP19__I2C_HandleTypeDefP20__UART_HandleTypeDef>

  //   Initializing MPU6050
  HAL_StatusTypeDef init = mpu_sensor.initialize(&mpu_data, &hi2c1);
 8001280:	4a45      	ldr	r2, [pc, #276]	@ (8001398 <main+0x1b0>)
 8001282:	4946      	ldr	r1, [pc, #280]	@ (800139c <main+0x1b4>)
 8001284:	4846      	ldr	r0, [pc, #280]	@ (80013a0 <main+0x1b8>)
 8001286:	f015 ff2d 	bl	80170e4 <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133

  if(init == HAL_OK){
 8001290:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <main+0xbe>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"MPU6050 Initialized\n", 20, HAL_MAX_DELAY);
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	2214      	movs	r2, #20
 800129e:	4941      	ldr	r1, [pc, #260]	@ (80013a4 <main+0x1bc>)
 80012a0:	483c      	ldr	r0, [pc, #240]	@ (8001394 <main+0x1ac>)
 80012a2:	f00e fe73 	bl	800ff8c <HAL_UART_Transmit>
  }

  // Initializing magnetometer
  HMC5883L Mag;
 80012a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012aa:	4618      	mov	r0, r3
 80012ac:	f015 fc5e 	bl	8016b6c <_ZN8HMC5883LC1Ev>
  float declination = 0.33333333; // in degrees
 80012b0:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <main+0x1c0>)
 80012b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  Mag.init(&hi2c1, &mag, declination);
 80012b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ba:	ed97 0a4b 	vldr	s0, [r7, #300]	@ 0x12c
 80012be:	4a3b      	ldr	r2, [pc, #236]	@ (80013ac <main+0x1c4>)
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <main+0x1b0>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f015 fc5d 	bl	8016b82 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf>


  float roll = 0;
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  float pitch = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  float yaw = 0;
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  float soft_cal[3][3] = {
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <main+0x1c8>)
 80012e2:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	6023      	str	r3, [r4, #0]
  		{1.002, 0.043, -0.007},
  		{0.043, 0.954, -0.127},
  		{-0.007, -0.127, 1.065}
    };

  float hard_cal[3] = {7.08, 2.28, 2.87};
 80012f4:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <main+0x1cc>)
 80012f6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80012fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  float Pinit = 0.01f;
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <main+0x1d0>)
 8001302:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  float phi_bias = -0.03f;
 8001306:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <main+0x1d4>)
 8001308:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  float theta_bias = -0.02f;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <main+0x1d8>)
 800130e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  float Q[2] = {0.0052360f, 0.0034907f};
 8001312:	4a2c      	ldr	r2, [pc, #176]	@ (80013c4 <main+0x1dc>)
 8001314:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131c:	e883 0003 	stmia.w	r3, {r0, r1}
  float R[3] = {0.0099270f, 0.0099270f, 0.011788f};
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <main+0x1e0>)
 8001322:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001326:	ca07      	ldmia	r2, {r0, r1, r2}
 8001328:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  ExtKalmanFilter EKF(Pinit, Q, R, phi_bias, theta_bias);
 800132c:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8001330:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8001334:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001338:	ed97 1a45 	vldr	s2, [r7, #276]	@ 0x114
 800133c:	edd7 0a46 	vldr	s1, [r7, #280]	@ 0x118
 8001340:	ed97 0a47 	vldr	s0, [r7, #284]	@ 0x11c
 8001344:	4618      	mov	r0, r3
 8001346:	f011 fa63 	bl	8012810 <_ZN15ExtKalmanFilterC1EfPfS0_ff>

  // filter data holders
  float gyrPrev[3] = {0.0f, 0.0f, 0.0f};
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  float accPrev[3] = {0.0f, 0.0f, 0.0f};
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	653b      	str	r3, [r7, #80]	@ 0x50
  while (1)
  {
	 char usbBuf[64];


	 if (data_ready) {
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <main+0x1e4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80a2 	beq.w	80014bc <main+0x2d4>

	     mpu_sensor.process_data(&mpu_data);
 8001378:	4908      	ldr	r1, [pc, #32]	@ (800139c <main+0x1b4>)
 800137a:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <main+0x1b8>)
 800137c:	f015 ffc4 	bl	8017308 <_ZN7MPU605012process_dataEP12MPU6050_data>
	     Mag.data_processing(&mag);
 8001380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001384:	4909      	ldr	r1, [pc, #36]	@ (80013ac <main+0x1c4>)
 8001386:	4618      	mov	r0, r3
 8001388:	f015 fca2 	bl	8016cd0 <_ZN8HMC5883L15data_processingEP8HMC_data>

	    // Low pass filter
		  for(int i = 0; i < 3; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001392:	e088      	b.n	80014a6 <main+0x2be>
 8001394:	20000bbc 	.word	0x20000bbc
 8001398:	2000053c 	.word	0x2000053c
 800139c:	20000d00 	.word	0x20000d00
 80013a0:	20000d6c 	.word	0x20000d6c
 80013a4:	0801dc4c 	.word	0x0801dc4c
 80013a8:	3eaaaaab 	.word	0x3eaaaaab
 80013ac:	20000d70 	.word	0x20000d70
 80013b0:	0801dc9c 	.word	0x0801dc9c
 80013b4:	0801dcc0 	.word	0x0801dcc0
 80013b8:	3c23d70a 	.word	0x3c23d70a
 80013bc:	bcf5c28f 	.word	0xbcf5c28f
 80013c0:	bca3d70a 	.word	0xbca3d70a
 80013c4:	0801dccc 	.word	0x0801dccc
 80013c8:	0801dcd4 	.word	0x0801dcd4
 80013cc:	20000d3c 	.word	0x20000d3c
 80013d0:	3c23d70a 	.word	0x3c23d70a
			mpu_data.gyro_rad[i] = (LPF_GYR_ALPHA * gyrPrev[i] + ( 1.0f - LPF_GYR_ALPHA) * mpu_data.gyro_rad[i]);
 80013d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80013de:	443b      	add	r3, r7
 80013e0:	3be4      	subs	r3, #228	@ 0xe4
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80013d0 <main+0x1e8>
 80013ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ee:	4a9b      	ldr	r2, [pc, #620]	@ (800165c <main+0x474>)
 80013f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013f4:	3304      	adds	r3, #4
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001660 <main+0x478>
 8001402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	4a94      	ldr	r2, [pc, #592]	@ (800165c <main+0x474>)
 800140c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001410:	3304      	adds	r3, #4
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	edc3 7a00 	vstr	s15, [r3]
			mpu_data.acc_mps2[i] = (LPF_ACC_ALPHA * accPrev[i] + ( 1.0f - LPF_ACC_ALPHA) * mpu_data.acc_mps2[i]);
 800141a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001424:	443b      	add	r3, r7
 8001426:	3bf0      	subs	r3, #240	@ 0xf0
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001664 <main+0x47c>
 8001430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001434:	4a89      	ldr	r2, [pc, #548]	@ (800165c <main+0x474>)
 8001436:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3304      	adds	r3, #4
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001668 <main+0x480>
 8001448:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	4a82      	ldr	r2, [pc, #520]	@ (800165c <main+0x474>)
 8001452:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	edc3 7a00 	vstr	s15, [r3]
			gyrPrev[i] = mpu_data.gyro_rad[i];
 8001460:	4a7e      	ldr	r2, [pc, #504]	@ (800165c <main+0x474>)
 8001462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001466:	3304      	adds	r3, #4
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001478:	443b      	add	r3, r7
 800147a:	3be4      	subs	r3, #228	@ 0xe4
 800147c:	601a      	str	r2, [r3, #0]
			accPrev[i] = mpu_data.acc_mps2[i];
 800147e:	4a77      	ldr	r2, [pc, #476]	@ (800165c <main+0x474>)
 8001480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3304      	adds	r3, #4
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001496:	443b      	add	r3, r7
 8001498:	3bf0      	subs	r3, #240	@ 0xf0
 800149a:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i < 3; i++) {
 800149c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80014a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	dd92      	ble.n	80013d4 <main+0x1ec>
		  }

		  data.setFrom(mpu_data);
 80014ae:	496b      	ldr	r1, [pc, #428]	@ (800165c <main+0x474>)
 80014b0:	486e      	ldr	r0, [pc, #440]	@ (800166c <main+0x484>)
 80014b2:	f7ff fd61 	bl	8000f78 <_ZN11MPU6050Data7setFromER12MPU6050_data>

		  data_ready = 0;
 80014b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001670 <main+0x488>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	  }



	 if ((HAL_GetTick() - timerPredict) >= KALMAN_PREDICT_PERIOD_MS) {
 80014bc:	f002 ff90 	bl	80043e0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <main+0x48c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	bf8c      	ite	hi
 80014cc:	2301      	movhi	r3, #1
 80014ce:	2300      	movls	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <main+0x308>
	 		EKF.predict(data, 0.001f * KALMAN_PREDICT_PERIOD_MS);
 80014d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014da:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8001678 <main+0x490>
 80014de:	4963      	ldr	r1, [pc, #396]	@ (800166c <main+0x484>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f011 f9ef 	bl	80128c4 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf>

	 		timerPredict += KALMAN_PREDICT_PERIOD_MS;
 80014e6:	4b63      	ldr	r3, [pc, #396]	@ (8001674 <main+0x48c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	330a      	adds	r3, #10
 80014ec:	4a61      	ldr	r2, [pc, #388]	@ (8001674 <main+0x48c>)
 80014ee:	6013      	str	r3, [r2, #0]
	 }

	 if ((HAL_GetTick() - timerUpdate) >= KALMAN_UPDATE_PERIOD_MS) {
 80014f0:	f002 ff76 	bl	80043e0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b61      	ldr	r3, [pc, #388]	@ (800167c <main+0x494>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b18      	cmp	r3, #24
 80014fe:	bf8c      	ite	hi
 8001500:	2301      	movhi	r3, #1
 8001502:	2300      	movls	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <main+0x338>
	 		EKF.update(data);
 800150a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800150e:	4957      	ldr	r1, [pc, #348]	@ (800166c <main+0x484>)
 8001510:	4618      	mov	r0, r3
 8001512:	f012 f80d 	bl	8013530 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data>

	 		timerUpdate += KALMAN_UPDATE_PERIOD_MS;
 8001516:	4b59      	ldr	r3, [pc, #356]	@ (800167c <main+0x494>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3319      	adds	r3, #25
 800151c:	4a57      	ldr	r2, [pc, #348]	@ (800167c <main+0x494>)
 800151e:	6013      	str	r3, [r2, #0]
	 }


	 if ((HAL_GetTick() - timerLog) >= SAMPLE_TIME_LOG_MS) {
 8001520:	f002 ff5e 	bl	80043e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	4b56      	ldr	r3, [pc, #344]	@ (8001680 <main+0x498>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2bf9      	cmp	r3, #249	@ 0xf9
 800152e:	bf8c      	ite	hi
 8001530:	2301      	movhi	r3, #1
 8001532:	2300      	movls	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d058      	beq.n	80015ec <main+0x404>
		AngleEstimate angle = EKF.getAngle();
 800153a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800153e:	4618      	mov	r0, r3
 8001540:	f015 f932 	bl	80167a8 <_ZNK15ExtKalmanFilter8getAngleEv>
 8001544:	eeb0 7a40 	vmov.f32	s14, s0
 8001548:	eef0 7a60 	vmov.f32	s15, s1
 800154c:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8001550:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		roll = angle.roll;
 8001554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		pitch = angle.pitch;
 800155a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800155c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		yaw = Mag.get_heading(&mag, roll, pitch, soft_cal, hard_cal);
 8001560:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001564:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8001568:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800156c:	edd7 0a49 	vldr	s1, [r7, #292]	@ 0x124
 8001570:	ed97 0a4a 	vldr	s0, [r7, #296]	@ 0x128
 8001574:	4943      	ldr	r1, [pc, #268]	@ (8001684 <main+0x49c>)
 8001576:	f015 fc9b 	bl	8016eb0 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf>
 800157a:	ed87 0a48 	vstr	s0, [r7, #288]	@ 0x120
	    distance = readRangeSingleMillimeters(&distanceStr);
 800157e:	4842      	ldr	r0, [pc, #264]	@ (8001688 <main+0x4a0>)
 8001580:	f018 fa24 	bl	80199cc <readRangeSingleMillimeters>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <main+0x4a4>)
 800158a:	801a      	strh	r2, [r3, #0]


		uint8_t usbBufLen = snprintf(usbBuf, 100,
 800158c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001590:	f7fe fffa 	bl	8000588 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800159c:	f7fe fff4 	bl	8000588 <__aeabi_f2d>
 80015a0:	4680      	mov	r8, r0
 80015a2:	4689      	mov	r9, r1
 80015a4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80015a8:	f7fe ffee 	bl	8000588 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4936      	ldr	r1, [pc, #216]	@ (800168c <main+0x4a4>)
 80015b2:	8809      	ldrh	r1, [r1, #0]
 80015b4:	4638      	mov	r0, r7
 80015b6:	9106      	str	r1, [sp, #24]
 80015b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015c0:	e9cd 4500 	strd	r4, r5, [sp]
 80015c4:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <main+0x4a8>)
 80015c6:	2164      	movs	r1, #100	@ 0x64
 80015c8:	f01a fa52 	bl	801ba70 <sniprintf>
 80015cc:	4603      	mov	r3, r0
					         "roll: %.2f, pitch: %.2f, yaw: %0.2f, distance: %4d \r\n",
					        roll, pitch, yaw, distance);
 80015ce:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113

	    HAL_UART_Transmit(&huart6, (uint8_t *)usbBuf, usbBufLen, 100);
 80015d2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4639      	mov	r1, r7
 80015da:	2364      	movs	r3, #100	@ 0x64
 80015dc:	482d      	ldr	r0, [pc, #180]	@ (8001694 <main+0x4ac>)
 80015de:	f00e fcd5 	bl	800ff8c <HAL_UART_Transmit>

	     timerLog += SAMPLE_TIME_LOG_MS;
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <main+0x498>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	33fa      	adds	r3, #250	@ 0xfa
 80015e8:	4a25      	ldr	r2, [pc, #148]	@ (8001680 <main+0x498>)
 80015ea:	6013      	str	r3, [r2, #0]
	 }


	  if ((HAL_GetTick() - timerLED) >= SAMPLE_TIME_LED_MS) {
 80015ec:	f002 fef8 	bl	80043e0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <main+0x4b0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b63      	cmp	r3, #99	@ 0x63
 80015fa:	bf8c      	ite	hi
 80015fc:	2301      	movhi	r3, #1
 80015fe:	2300      	movls	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f43f aeb3 	beq.w	800136e <main+0x186>
		  if (dmaState == DMA_IDLE) {
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <main+0x4b4>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <main+0x442>
				  dmaState = DMA_IMU_READING;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <main+0x4b4>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
				  mpu_sensor.read_IMU_DMA(&mpu_data);
 8001622:	490e      	ldr	r1, [pc, #56]	@ (800165c <main+0x474>)
 8001624:	481e      	ldr	r0, [pc, #120]	@ (80016a0 <main+0x4b8>)
 8001626:	f015 fe53 	bl	80172d0 <_ZN7MPU605012read_IMU_DMAEP12MPU6050_data>

			  }
        
		  if (dmaState == DMA_MAG_READY_TO_READ) {
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <main+0x4b4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <main+0x468>
		  		  dmaState = DMA_MAG_READING;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <main+0x4b4>)
 8001640:	2203      	movs	r2, #3
 8001642:	701a      	strb	r2, [r3, #0]
		  		  Mag.readDMA(&mag);
 8001644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <main+0x49c>)
 800164a:	4618      	mov	r0, r3
 800164c:	f015 fb20 	bl	8016c90 <_ZN8HMC5883L7readDMAEP8HMC_data>

		  }

		  timerLED += SAMPLE_TIME_LED_MS;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <main+0x4b0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3364      	adds	r3, #100	@ 0x64
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <main+0x4b0>)
 8001658:	6013      	str	r3, [r2, #0]

	  }

  }
 800165a:	e688      	b.n	800136e <main+0x186>
 800165c:	20000d00 	.word	0x20000d00
 8001660:	3f7d70a4 	.word	0x3f7d70a4
 8001664:	3dcccccd 	.word	0x3dcccccd
 8001668:	3f666666 	.word	0x3f666666
 800166c:	20000d50 	.word	0x20000d50
 8001670:	20000d3c 	.word	0x20000d3c
 8001674:	20000d48 	.word	0x20000d48
 8001678:	3c23d70b 	.word	0x3c23d70b
 800167c:	20000d4c 	.word	0x20000d4c
 8001680:	20000d40 	.word	0x20000d40
 8001684:	20000d70 	.word	0x20000d70
 8001688:	20000d98 	.word	0x20000d98
 800168c:	20000da2 	.word	0x20000da2
 8001690:	0801dc64 	.word	0x0801dc64
 8001694:	20000c44 	.word	0x20000c44
 8001698:	20000d44 	.word	0x20000d44
 800169c:	20000d94 	.word	0x20000d94
 80016a0:	20000d6c 	.word	0x20000d6c

080016a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	@ 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	2230      	movs	r2, #48	@ 0x30
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f01a fa53 	bl	801bb5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016c8:	f009 fe0a 	bl	800b2e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <_Z18SystemClock_Configv+0xf8>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <_Z18SystemClock_Configv+0xf8>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <_Z18SystemClock_Configv+0xf8>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <_Z18SystemClock_Configv+0xfc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2d      	ldr	r2, [pc, #180]	@ (80017a0 <_Z18SystemClock_Configv+0xfc>)
 80016ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <_Z18SystemClock_Configv+0xfc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016fc:	2309      	movs	r3, #9
 80016fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001706:	2301      	movs	r3, #1
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	2302      	movs	r3, #2
 800170c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001714:	2319      	movs	r3, #25
 8001716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001718:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800171c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171e:	2302      	movs	r3, #2
 8001720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001722:	2309      	movs	r3, #9
 8001724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4618      	mov	r0, r3
 800172c:	f009 fefa 	bl	800b524 <HAL_RCC_OscConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001740:	f001 fab0 	bl	8002ca4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001744:	f009 fddc 	bl	800b300 <HAL_PWREx_EnableOverDrive>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf14      	ite	ne
 800174e:	2301      	movne	r3, #1
 8001750:	2300      	moveq	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001758:	f001 faa4 	bl	8002ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2106      	movs	r1, #6
 800177a:	4618      	mov	r0, r3
 800177c:	f00a f976 	bl	800ba6c <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf14      	ite	ne
 8001786:	2301      	movne	r3, #1
 8001788:	2300      	moveq	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8001790:	f001 fa88 	bl	8002ca4 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	@ 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a2      	sub	sp, #136	@ 0x88
 80017a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2284      	movs	r2, #132	@ 0x84
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f01a f9d4 	bl	801bb5e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_Z24PeriphCommonClock_Configv+0x68>)
 80017b8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017ba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017c8:	2303      	movs	r3, #3
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80017d6:	2300      	movs	r3, #0
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80017de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00a fb56 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001800:	f001 fa50 	bl	8002ca4 <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3788      	adds	r7, #136	@ 0x88
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	00b00008 	.word	0x00b00008

08001810 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001824:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <_ZL12MX_ADC3_Initv+0xb0>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800182a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800182e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001830:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001850:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <_ZL12MX_ADC3_Initv+0xb4>)
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800186c:	2201      	movs	r2, #1
 800186e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001870:	4812      	ldr	r0, [pc, #72]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 8001872:	f002 fde5 	bl	8004440 <HAL_ADC_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 8001886:	f001 fa0d 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800188a:	2304      	movs	r3, #4
 800188c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800188e:	2301      	movs	r3, #1
 8001890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	4619      	mov	r1, r3
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <_ZL12MX_ADC3_Initv+0xac>)
 800189c:	f002 fe14 	bl	80044c8 <HAL_ADC_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80018b0:	f001 f9f8 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000390 	.word	0x20000390
 80018c0:	40012200 	.word	0x40012200
 80018c4:	0f000001 	.word	0x0f000001

080018c8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018cc:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018ce:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <_ZL11MX_CRC_Initv+0x4c>)
 80018d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018da:	2200      	movs	r2, #0
 80018dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <_ZL11MX_CRC_Initv+0x48>)
 80018f2:	f003 f91b 	bl	8004b2c <HAL_CRC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001906:	f001 f9cd 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200003d8 	.word	0x200003d8
 8001914:	40023000 	.word	0x40023000

08001918 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 800191e:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <_ZL12MX_DCMI_Initv+0x70>)
 8001920:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <_ZL12MX_DCMI_Initv+0x6c>)
 8001966:	f003 f9d3 	bl	8004d10 <HAL_DCMI_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 800197a:	f001 f993 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200003fc 	.word	0x200003fc
 8001988:	50050000 	.word	0x50050000

0800198c <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZL13MX_DMA2D_Initv+0x74>)
 8001994:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001996:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019bc:	2200      	movs	r2, #0
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019c0:	480e      	ldr	r0, [pc, #56]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019c2:	f003 fdd3 	bl	800556c <HAL_DMA2D_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <_ZL13MX_DMA2D_Initv+0x4e>
  {
    Error_Handler();
 80019d6:	f001 f965 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019da:	2101      	movs	r1, #1
 80019dc:	4807      	ldr	r0, [pc, #28]	@ (80019fc <_ZL13MX_DMA2D_Initv+0x70>)
 80019de:	f003 ff1f 	bl	8005820 <HAL_DMA2D_ConfigLayer>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <_ZL13MX_DMA2D_Initv+0x6a>
  {
    Error_Handler();
 80019f2:	f001 f957 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000044c 	.word	0x2000044c
 8001a00:	4002b000 	.word	0x4002b000

08001a04 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a0a:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <_ZL11MX_ETH_Initv+0x90>)
 8001a0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a14:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a1c:	22e1      	movs	r2, #225	@ 0xe1
 8001a1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a34:	4a18      	ldr	r2, [pc, #96]	@ (8001a98 <_ZL11MX_ETH_Initv+0x94>)
 8001a36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a3e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a42:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <_ZL11MX_ETH_Initv+0x98>)
 8001a44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a48:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <_ZL11MX_ETH_Initv+0x9c>)
 8001a4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a4e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001a52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a54:	480e      	ldr	r0, [pc, #56]	@ (8001a90 <_ZL11MX_ETH_Initv+0x8c>)
 8001a56:	f003 ff75 	bl	8005944 <HAL_ETH_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8001a6a:	f001 f91b 	bl	8002ca4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a6e:	2238      	movs	r2, #56	@ 0x38
 8001a70:	2100      	movs	r1, #0
 8001a72:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <_ZL11MX_ETH_Initv+0xa0>)
 8001a74:	f01a f873 	bl	801bb5e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <_ZL11MX_ETH_Initv+0xa0>)
 8001a7a:	2221      	movs	r2, #33	@ 0x21
 8001a7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <_ZL11MX_ETH_Initv+0xa0>)
 8001a80:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001a84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <_ZL11MX_ETH_Initv+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000048c 	.word	0x2000048c
 8001a94:	40028000 	.word	0x40028000
 8001a98:	20000da4 	.word	0x20000da4
 8001a9c:	20000298 	.word	0x20000298
 8001aa0:	200001f8 	.word	0x200001f8
 8001aa4:	20000358 	.word	0x20000358

08001aa8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	@ (8001b3c <_ZL12MX_I2C1_Initv+0x94>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <_ZL12MX_I2C1_Initv+0x98>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae2:	4815      	ldr	r0, [pc, #84]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001ae4:	f006 fd7c 	bl	80085e0 <HAL_I2C_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001af8:	f001 f8d4 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afc:	2100      	movs	r1, #0
 8001afe:	480e      	ldr	r0, [pc, #56]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001b00:	f008 ffec 	bl	800aadc <HAL_I2CEx_ConfigAnalogFilter>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001b14:	f001 f8c6 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4807      	ldr	r0, [pc, #28]	@ (8001b38 <_ZL12MX_I2C1_Initv+0x90>)
 8001b1c:	f009 f829 	bl	800ab72 <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001b30:	f001 f8b8 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000053c 	.word	0x2000053c
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	00c0eaff 	.word	0x00c0eaff

08001b44 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b48:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b4a:	4a23      	ldr	r2, [pc, #140]	@ (8001bd8 <_ZL12MX_I2C3_Initv+0x94>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b50:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <_ZL12MX_I2C3_Initv+0x98>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b7e:	4815      	ldr	r0, [pc, #84]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b80:	f006 fd2e 	bl	80085e0 <HAL_I2C_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001b94:	f001 f886 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480e      	ldr	r0, [pc, #56]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001b9c:	f008 ff9e 	bl	800aadc <HAL_I2CEx_ConfigAnalogFilter>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001bb0:	f001 f878 	bl	8002ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <_ZL12MX_I2C3_Initv+0x90>)
 8001bb8:	f008 ffdb 	bl	800ab72 <HAL_I2CEx_ConfigDigitalFilter>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001bcc:	f001 f86a 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000590 	.word	0x20000590
 8001bd8:	40005c00 	.word	0x40005c00
 8001bdc:	00c0eaff 	.word	0x00c0eaff

08001be0 <_ZL12MX_LTDC_Initv>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	@ 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2234      	movs	r2, #52	@ 0x34
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f019 ffb6 	bl	801bb5e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001bf4:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf4 <_ZL12MX_LTDC_Initv+0x114>)
 8001bf6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c0a:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001c10:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c12:	2228      	movs	r2, #40	@ 0x28
 8001c14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001c16:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c18:	2209      	movs	r2, #9
 8001c1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c1e:	2235      	movs	r2, #53	@ 0x35
 8001c20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c24:	220b      	movs	r2, #11
 8001c26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c2a:	f240 2215 	movw	r2, #533	@ 0x215
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c32:	f240 121b 	movw	r2, #283	@ 0x11b
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c3a:	f240 2235 	movw	r2, #565	@ 0x235
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c42:	f240 121d 	movw	r2, #285	@ 0x11d
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c48:	4b29      	ldr	r3, [pc, #164]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c60:	4823      	ldr	r0, [pc, #140]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001c62:	f008 ffd3 	bl	800ac0c <HAL_LTDC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_ZL12MX_LTDC_Initv+0x9a>
  {
    Error_Handler();
 8001c76:	f001 f815 	bl	8002ca4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001c7e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c82:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001c88:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001c8c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001c92:	23ff      	movs	r3, #255	@ 0xff
 8001c94:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001c9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c9e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001ca4:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001caa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001cb0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <_ZL12MX_LTDC_Initv+0x110>)
 8001cd0:	f009 f92e 	bl	800af30 <HAL_LTDC_ConfigLayer>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <_ZL12MX_LTDC_Initv+0x108>
  {
    Error_Handler();
 8001ce4:	f000 ffde 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3738      	adds	r7, #56	@ 0x38
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200006a4 	.word	0x200006a4
 8001cf4:	40016800 	.word	0x40016800

08001cf8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <_ZL15MX_QUADSPI_Initv+0x60>)
 8001d00:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d10:	2210      	movs	r2, #16
 8001d12:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d16:	2218      	movs	r2, #24
 8001d18:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d1c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001d20:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001d34:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001d36:	f009 fb33 	bl	800b3a0 <HAL_QSPI_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <_ZL15MX_QUADSPI_Initv+0x56>
  {
    Error_Handler();
 8001d4a:	f000 ffab 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000074c 	.word	0x2000074c
 8001d58:	a0001000 	.word	0xa0001000

08001d5c <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	@ 0x40
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001d76:	463b      	mov	r3, r7
 8001d78:	2228      	movs	r2, #40	@ 0x28
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f019 feee 	bl	801bb5e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d82:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001d84:	4a55      	ldr	r2, [pc, #340]	@ (8001edc <_ZL11MX_RTC_Initv+0x180>)
 8001d86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d88:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d8e:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001d90:	227f      	movs	r2, #127	@ 0x7f
 8001d92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d94:	4b50      	ldr	r3, [pc, #320]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001d96:	22ff      	movs	r2, #255	@ 0xff
 8001d98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001da0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001da6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dac:	484a      	ldr	r0, [pc, #296]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001dae:	f00a fda5 	bl	800c8fc <HAL_RTC_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8001dc2:	f000 ff6f 	bl	8002ca4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de4:	2201      	movs	r2, #1
 8001de6:	4619      	mov	r1, r3
 8001de8:	483b      	ldr	r0, [pc, #236]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001dea:	f00a fe0b 	bl	800ca04 <HAL_RTC_SetTime>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <_ZL11MX_RTC_Initv+0xa6>
  {
    Error_Handler();
 8001dfe:	f000 ff51 	bl	8002ca4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4619      	mov	r1, r3
 8001e22:	482d      	ldr	r0, [pc, #180]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001e24:	f00a fe88 	bl	800cb38 <HAL_RTC_SetDate>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <_ZL11MX_RTC_Initv+0xe0>
  {
    Error_Handler();
 8001e38:	f000 ff34 	bl	8002ca4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	4819      	ldr	r0, [pc, #100]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001e74:	f00a fee4 	bl	800cc40 <HAL_RTC_SetAlarm>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <_ZL11MX_RTC_Initv+0x130>
  {
    Error_Handler();
 8001e88:	f000 ff0c 	bl	8002ca4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	2201      	movs	r2, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	480f      	ldr	r0, [pc, #60]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001e9a:	f00a fed1 	bl	800cc40 <HAL_RTC_SetAlarm>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <_ZL11MX_RTC_Initv+0x156>
  {
    Error_Handler();
 8001eae:	f000 fef9 	bl	8002ca4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <_ZL11MX_RTC_Initv+0x17c>)
 8001eb8:	f00b f88c 	bl	800cfd4 <HAL_RTCEx_SetTimeStamp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <_ZL11MX_RTC_Initv+0x174>
  {
    Error_Handler();
 8001ecc:	f000 feea 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	3740      	adds	r7, #64	@ 0x40
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000798 	.word	0x20000798
 8001edc:	40002800 	.word	0x40002800

08001ee0 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001ee4:	4b52      	ldr	r3, [pc, #328]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001ee6:	4a53      	ldr	r2, [pc, #332]	@ (8002034 <_ZL12MX_SAI2_Initv+0x154>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001eea:	4b51      	ldr	r3, [pc, #324]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001ef8:	2240      	movs	r2, #64	@ 0x40
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001efc:	4b4c      	ldr	r3, [pc, #304]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f02:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f08:	4b49      	ldr	r3, [pc, #292]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f0e:	4b48      	ldr	r3, [pc, #288]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001f14:	4b46      	ldr	r3, [pc, #280]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f1a:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001f20:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f22:	4a45      	ldr	r2, [pc, #276]	@ (8002038 <_ZL12MX_SAI2_Initv+0x158>)
 8001f24:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f26:	4b42      	ldr	r3, [pc, #264]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f2c:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f38:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f40:	2208      	movs	r2, #8
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001f44:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001f4a:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f50:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001f56:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f5c:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f62:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001f68:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001f6e:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f74:	482e      	ldr	r0, [pc, #184]	@ (8002030 <_ZL12MX_SAI2_Initv+0x150>)
 8001f76:	f00b f895 	bl	800d0a4 <HAL_SAI_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8001f8a:	f000 fe8b 	bl	8002ca4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001f90:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <_ZL12MX_SAI2_Initv+0x160>)
 8001f92:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001fa6:	4b25      	ldr	r3, [pc, #148]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001fb8:	4b20      	ldr	r3, [pc, #128]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fde:	2208      	movs	r2, #8
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8002002:	2200      	movs	r2, #0
 8002004:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8002008:	2201      	movs	r2, #1
 800200a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 800200e:	2200      	movs	r2, #0
 8002010:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002012:	480a      	ldr	r0, [pc, #40]	@ (800203c <_ZL12MX_SAI2_Initv+0x15c>)
 8002014:	f00b f846 	bl	800d0a4 <HAL_SAI_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 8002028:	f000 fe3c 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200007b8 	.word	0x200007b8
 8002034:	40015c04 	.word	0x40015c04
 8002038:	0002ee00 	.word	0x0002ee00
 800203c:	2000083c 	.word	0x2000083c
 8002040:	40015c24 	.word	0x40015c24

08002044 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <_ZL17MX_SDMMC1_SD_Initv+0x40>)
 800204c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 800205c:	2200      	movs	r2, #0
 800205e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8002062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002066:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800206e:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200008c0 	.word	0x200008c0
 8002084:	40012c00 	.word	0x40012c00

08002088 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800208c:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800208e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002092:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80020a6:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80020ac:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80020b8:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80020d0:	4807      	ldr	r0, [pc, #28]	@ (80020f0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 80020d2:	f00c fb65 	bl	800e7a0 <HAL_SPDIFRX_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 80020e6:	f000 fddd 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000944 	.word	0x20000944

080020f4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <_ZL12MX_SPI2_Initv+0x80>)
 80020fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002100:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002104:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 800210e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002112:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002126:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 800213c:	2200      	movs	r2, #0
 800213e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002142:	2207      	movs	r2, #7
 8002144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 800214e:	2208      	movs	r2, #8
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002152:	4807      	ldr	r0, [pc, #28]	@ (8002170 <_ZL12MX_SPI2_Initv+0x7c>)
 8002154:	f00c fb80 	bl	800e858 <HAL_SPI_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8002168:	f000 fd9c 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000990 	.word	0x20000990
 8002174:	40003800 	.word	0x40003800

08002178 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002196:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 8002198:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <_ZL12MX_TIM1_Initv+0xcc>)
 800219a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800219c:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 800219e:	22c7      	movs	r2, #199	@ 0xc7
 80021a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80021ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80021c2:	481f      	ldr	r0, [pc, #124]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021c4:	f00c fd19 	bl	800ebfa <HAL_TIM_IC_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 80021d8:	f000 fd64 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4814      	ldr	r0, [pc, #80]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 80021f0:	f00d fdd2 	bl	800fd98 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <_ZL12MX_TIM1_Initv+0x90>
  {
    Error_Handler();
 8002204:	f000 fd4e 	bl	8002ca4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800220c:	2301      	movs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4808      	ldr	r0, [pc, #32]	@ (8002240 <_ZL12MX_TIM1_Initv+0xc8>)
 8002220:	f00c fe49 	bl	800eeb6 <HAL_TIM_IC_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <_ZL12MX_TIM1_Initv+0xc0>
  {
    Error_Handler();
 8002234:	f000 fd36 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200009f4 	.word	0x200009f4
 8002244:	40010000 	.word	0x40010000

08002248 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002268:	463b      	mov	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 800227c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800228e:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a2:	4830      	ldr	r0, [pc, #192]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 80022a4:	f00c fb83 	bl	800e9ae <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80022b8:	f000 fcf4 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4826      	ldr	r0, [pc, #152]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 80022ca:	f00c ffa5 	bl	800f218 <HAL_TIM_ConfigClockSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80022de:	f000 fce1 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022e2:	4820      	ldr	r0, [pc, #128]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 80022e4:	f00c fc32 	bl	800eb4c <HAL_TIM_PWM_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80022f8:	f000 fcd4 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4816      	ldr	r0, [pc, #88]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 800230c:	f00d fd44 	bl	800fd98 <HAL_TIMEx_MasterConfigSynchronization>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8002320:	f000 fcc0 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	@ 0x60
 8002326:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	480a      	ldr	r0, [pc, #40]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 800233c:	f00c fe58 	bl	800eff0 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8002350:	f000 fca8 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002354:	4803      	ldr	r0, [pc, #12]	@ (8002364 <_ZL12MX_TIM2_Initv+0x11c>)
 8002356:	f001 fba1 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 800235a:	bf00      	nop
 800235c:	3738      	adds	r7, #56	@ 0x38
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000a40 	.word	0x20000a40

08002368 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	@ 0x38
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 800239c:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <_ZL12MX_TIM3_Initv+0x11c>)
 800239e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023a0:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b36      	ldr	r3, [pc, #216]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023ac:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023c0:	482f      	ldr	r0, [pc, #188]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023c2:	f00c faf4 	bl	800e9ae <HAL_TIM_Base_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80023d6:	f000 fc65 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4826      	ldr	r0, [pc, #152]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 80023e8:	f00c ff16 	bl	800f218 <HAL_TIM_ConfigClockSource>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80023fc:	f000 fc52 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002400:	481f      	ldr	r0, [pc, #124]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 8002402:	f00c fba3 	bl	800eb4c <HAL_TIM_PWM_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8002416:	f000 fc45 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	4815      	ldr	r0, [pc, #84]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 800242a:	f00d fcb5 	bl	800fd98 <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800243e:	f000 fc31 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002442:	2360      	movs	r3, #96	@ 0x60
 8002444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	4619      	mov	r1, r3
 8002458:	4809      	ldr	r0, [pc, #36]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 800245a:	f00c fdc9 	bl	800eff0 <HAL_TIM_PWM_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 800246e:	f000 fc19 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002472:	4803      	ldr	r0, [pc, #12]	@ (8002480 <_ZL12MX_TIM3_Initv+0x118>)
 8002474:	f001 fb12 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 8002478:	bf00      	nop
 800247a:	3738      	adds	r7, #56	@ 0x38
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000a8c 	.word	0x20000a8c
 8002484:	40000400 	.word	0x40000400

08002488 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	@ 0x38
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	615a      	str	r2, [r3, #20]
 80024b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ba:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024bc:	4a39      	ldr	r2, [pc, #228]	@ (80025a4 <_ZL12MX_TIM5_Initv+0x11c>)
 80024be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024e0:	482f      	ldr	r0, [pc, #188]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 80024e2:	f00c fa64 	bl	800e9ae <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80024f6:	f000 fbd5 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002500:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002504:	4619      	mov	r1, r3
 8002506:	4826      	ldr	r0, [pc, #152]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 8002508:	f00c fe86 	bl	800f218 <HAL_TIM_ConfigClockSource>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800251c:	f000 fbc2 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002520:	481f      	ldr	r0, [pc, #124]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 8002522:	f00c fb13 	bl	800eb4c <HAL_TIM_PWM_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8002536:	f000 fbb5 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	4815      	ldr	r0, [pc, #84]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 800254a:	f00d fc25 	bl	800fd98 <HAL_TIMEx_MasterConfigSynchronization>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800255e:	f000 fba1 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2360      	movs	r3, #96	@ 0x60
 8002564:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002572:	463b      	mov	r3, r7
 8002574:	220c      	movs	r2, #12
 8002576:	4619      	mov	r1, r3
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 800257a:	f00c fd39 	bl	800eff0 <HAL_TIM_PWM_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800258e:	f000 fb89 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002592:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <_ZL12MX_TIM5_Initv+0x118>)
 8002594:	f001 fa82 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 8002598:	bf00      	nop
 800259a:	3738      	adds	r7, #56	@ 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000ad8 	.word	0x20000ad8
 80025a4:	40000c00 	.word	0x40000c00

080025a8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025c8:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <_ZL12MX_TIM8_Initv+0xc0>)
 80025ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025f2:	481c      	ldr	r0, [pc, #112]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 80025f4:	f00c f9db 	bl	800e9ae <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <_ZL12MX_TIM8_Initv+0x64>
  {
    Error_Handler();
 8002608:	f000 fb4c 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4619      	mov	r1, r3
 8002618:	4812      	ldr	r0, [pc, #72]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 800261a:	f00c fdfd 	bl	800f218 <HAL_TIM_ConfigClockSource>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <_ZL12MX_TIM8_Initv+0x8a>
  {
    Error_Handler();
 800262e:	f000 fb39 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4808      	ldr	r0, [pc, #32]	@ (8002664 <_ZL12MX_TIM8_Initv+0xbc>)
 8002644:	f00d fba8 	bl	800fd98 <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8002658:	f000 fb24 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000b24 	.word	0x20000b24
 8002668:	40010400 	.word	0x40010400

0800266c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	615a      	str	r2, [r3, #20]
 8002682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002684:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 8002686:	4a20      	ldr	r2, [pc, #128]	@ (8002708 <_ZL13MX_TIM12_Initv+0x9c>)
 8002688:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 8002698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800269c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026aa:	4816      	ldr	r0, [pc, #88]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 80026ac:	f00c fa4e 	bl	800eb4c <HAL_TIM_PWM_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_ZL13MX_TIM12_Initv+0x58>
  {
    Error_Handler();
 80026c0:	f000 faf0 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	@ 0x60
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	480a      	ldr	r0, [pc, #40]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 80026dc:	f00c fc88 	bl	800eff0 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_ZL13MX_TIM12_Initv+0x88>
  {
    Error_Handler();
 80026f0:	f000 fad8 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80026f4:	4803      	ldr	r0, [pc, #12]	@ (8002704 <_ZL13MX_TIM12_Initv+0x98>)
 80026f6:	f001 f9d1 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 80026fa:	bf00      	nop
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000b70 	.word	0x20000b70
 8002708:	40001800 	.word	0x40001800

0800270c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002712:	4a17      	ldr	r2, [pc, #92]	@ (8002770 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800271c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b13      	ldr	r3, [pc, #76]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800274e:	4807      	ldr	r0, [pc, #28]	@ (800276c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002750:	f00d fbce 	bl	800fef0 <HAL_UART_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002764:	f000 fa9e 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000bbc 	.word	0x20000bbc
 8002770:	40011000 	.word	0x40011000

08002774 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002778:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <_ZL19MX_USART6_UART_Initv+0x64>)
 800277c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002784:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027b6:	4807      	ldr	r0, [pc, #28]	@ (80027d4 <_ZL19MX_USART6_UART_Initv+0x60>)
 80027b8:	f00d fb9a 	bl	800fef0 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 80027cc:	f000 fa6a 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000c44 	.word	0x20000c44
 80027d8:	40011400 	.word	0x40011400

080027dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <_ZL11MX_DMA_Initv+0x48>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <_ZL11MX_DMA_Initv+0x48>)
 80027e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <_ZL11MX_DMA_Initv+0x48>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	200b      	movs	r0, #11
 8002800:	f002 f96a 	bl	8004ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002804:	200b      	movs	r0, #11
 8002806:	f002 f983 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2011      	movs	r0, #17
 8002810:	f002 f962 	bl	8004ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002814:	2011      	movs	r0, #17
 8002816:	f002 f97b 	bl	8004b10 <HAL_NVIC_EnableIRQ>

}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002842:	4a23      	ldr	r2, [pc, #140]	@ (80028d0 <_ZL11MX_FMC_Initv+0xa8>)
 8002844:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002846:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800284c:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002854:	2204      	movs	r2, #4
 8002856:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002858:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 800285a:	2210      	movs	r2, #16
 800285c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002860:	2240      	movs	r2, #64	@ 0x40
 8002862:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002866:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800286a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800286c:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002878:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 800287c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 8002884:	2200      	movs	r2, #0
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002888:	2302      	movs	r3, #2
 800288a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800288c:	2307      	movs	r3, #7
 800288e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002890:	2304      	movs	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002894:	2307      	movs	r3, #7
 8002896:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002898:	2303      	movs	r3, #3
 800289a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	4808      	ldr	r0, [pc, #32]	@ (80028cc <_ZL11MX_FMC_Initv+0xa4>)
 80028aa:	f00b ff44 	bl	800e736 <HAL_SDRAM_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <_ZL11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 80028be:	f000 f9f1 	bl	8002ca4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80028c2:	bf00      	nop
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000ccc 	.word	0x20000ccc
 80028d0:	a0000140 	.word	0xa0000140

080028d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b090      	sub	sp, #64	@ 0x40
 80028d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
 80028e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	4bb0      	ldr	r3, [pc, #704]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4aaf      	ldr	r2, [pc, #700]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4bad      	ldr	r3, [pc, #692]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002902:	4baa      	ldr	r3, [pc, #680]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4aa9      	ldr	r2, [pc, #676]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4ba7      	ldr	r3, [pc, #668]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4ba4      	ldr	r3, [pc, #656]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	4aa3      	ldr	r2, [pc, #652]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	@ 0x30
 8002926:	4ba1      	ldr	r3, [pc, #644]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	4b9e      	ldr	r3, [pc, #632]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a9d      	ldr	r2, [pc, #628]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b9b      	ldr	r3, [pc, #620]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	4b98      	ldr	r3, [pc, #608]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a97      	ldr	r2, [pc, #604]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b95      	ldr	r3, [pc, #596]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a91      	ldr	r2, [pc, #580]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800297a:	4b8c      	ldr	r3, [pc, #560]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a8b      	ldr	r2, [pc, #556]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b89      	ldr	r3, [pc, #548]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002992:	4b86      	ldr	r3, [pc, #536]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a85      	ldr	r2, [pc, #532]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b83      	ldr	r3, [pc, #524]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029aa:	4b80      	ldr	r3, [pc, #512]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a7f      	ldr	r2, [pc, #508]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b77      	ldr	r3, [pc, #476]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029da:	4b74      	ldr	r3, [pc, #464]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a73      	ldr	r2, [pc, #460]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b71      	ldr	r3, [pc, #452]	@ (8002bac <_ZL12MX_GPIO_Initv+0x2d8>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80029f2:	2201      	movs	r2, #1
 80029f4:	2120      	movs	r1, #32
 80029f6:	486e      	ldr	r0, [pc, #440]	@ (8002bb0 <_ZL12MX_GPIO_Initv+0x2dc>)
 80029f8:	f003 fcb6 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2104      	movs	r1, #4
 8002a00:	486c      	ldr	r0, [pc, #432]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8002a02:	f003 fcb1 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a06:	2201      	movs	r2, #1
 8002a08:	2108      	movs	r1, #8
 8002a0a:	486b      	ldr	r0, [pc, #428]	@ (8002bb8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8002a0c:	f003 fcac 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a10:	2201      	movs	r2, #1
 8002a12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a16:	4867      	ldr	r0, [pc, #412]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8002a18:	f003 fca6 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a22:	4866      	ldr	r0, [pc, #408]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x2e8>)
 8002a24:	f003 fca0 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	21c8      	movs	r1, #200	@ 0xc8
 8002a2c:	4864      	ldr	r0, [pc, #400]	@ (8002bc0 <_ZL12MX_GPIO_Initv+0x2ec>)
 8002a2e:	f003 fc9b 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a32:	2308      	movs	r3, #8
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a36:	2300      	movs	r3, #0
 8002a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a42:	4619      	mov	r1, r3
 8002a44:	485f      	ldr	r0, [pc, #380]	@ (8002bc4 <_ZL12MX_GPIO_Initv+0x2f0>)
 8002a46:	f003 facb 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin PB10
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|GPIO_PIN_10
 8002a4a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a5c:	230a      	movs	r3, #10
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a64:	4619      	mov	r1, r3
 8002a66:	4858      	ldr	r0, [pc, #352]	@ (8002bc8 <_ZL12MX_GPIO_Initv+0x2f4>)
 8002a68:	f003 faba 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4852      	ldr	r0, [pc, #328]	@ (8002bcc <_ZL12MX_GPIO_Initv+0x2f8>)
 8002a82:	f003 faad 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002a86:	2340      	movs	r3, #64	@ 0x40
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a8a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4845      	ldr	r0, [pc, #276]	@ (8002bb0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8002a9c:	f003 faa0 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	483e      	ldr	r0, [pc, #248]	@ (8002bb0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8002ab8:	f003 fa92 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_INT_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8002abc:	2308      	movs	r3, #8
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4838      	ldr	r0, [pc, #224]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8002ad2:	f003 fa85 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LCD_DISP_Pin;
 8002ad6:	f241 0304 	movw	r3, #4100	@ 0x1004
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aec:	4619      	mov	r1, r3
 8002aee:	4831      	ldr	r0, [pc, #196]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8002af0:	f003 fa76 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4831      	ldr	r0, [pc, #196]	@ (8002bd0 <_ZL12MX_GPIO_Initv+0x2fc>)
 8002b0a:	f003 fa69 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4824      	ldr	r0, [pc, #144]	@ (8002bb8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8002b26:	f003 fa5b 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481c      	ldr	r0, [pc, #112]	@ (8002bb0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8002b3e:	f003 fa4f 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002b42:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b54:	4619      	mov	r1, r3
 8002b56:	4819      	ldr	r0, [pc, #100]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x2e8>)
 8002b58:	f003 fa42 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	4619      	mov	r1, r3
 8002b74:	4811      	ldr	r0, [pc, #68]	@ (8002bbc <_ZL12MX_GPIO_Initv+0x2e8>)
 8002b76:	f003 fa33 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4808      	ldr	r0, [pc, #32]	@ (8002bb4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8002b92:	f003 fa25 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002b96:	2310      	movs	r3, #16
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	e014      	b.n	8002bd4 <_ZL12MX_GPIO_Initv+0x300>
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022800 	.word	0x40022800
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40022400 	.word	0x40022400
 8002bd0:	40020800 	.word	0x40020800
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4824      	ldr	r0, [pc, #144]	@ (8002c70 <_ZL12MX_GPIO_Initv+0x39c>)
 8002bde:	f003 f9ff 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002be2:	23c8      	movs	r3, #200	@ 0xc8
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481e      	ldr	r0, [pc, #120]	@ (8002c74 <_ZL12MX_GPIO_Initv+0x3a0>)
 8002bfa:	f003 f9f1 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002bfe:	2305      	movs	r3, #5
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c0e:	230a      	movs	r3, #10
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c16:	4619      	mov	r1, r3
 8002c18:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <_ZL12MX_GPIO_Initv+0x3a4>)
 8002c1a:	f003 f9e1 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4810      	ldr	r0, [pc, #64]	@ (8002c74 <_ZL12MX_GPIO_Initv+0x3a0>)
 8002c32:	f003 f9d5 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c36:	2328      	movs	r3, #40	@ 0x28
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c46:	230a      	movs	r3, #10
 8002c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480a      	ldr	r0, [pc, #40]	@ (8002c7c <_ZL12MX_GPIO_Initv+0x3a8>)
 8002c52:	f003 f9c5 	bl	8005fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2105      	movs	r1, #5
 8002c5a:	2009      	movs	r0, #9
 8002c5c:	f001 ff3c 	bl	8004ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c60:	2009      	movs	r0, #9
 8002c62:	f001 ff55 	bl	8004b10 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c66:	bf00      	nop
 8002c68:	3740      	adds	r7, #64	@ 0x40
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40021800 	.word	0x40021800
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020000 	.word	0x40020000

08002c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c92:	f001 fb91 	bl	80043b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40001000 	.word	0x40001000

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <Error_Handler+0x8>

08002cb0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d107      	bne.n	8002cda <_Z41__static_initialization_and_destruction_0ii+0x2a>
uint32_t currentTime = HAL_GetTick();
 8002cca:	f001 fb89 	bl	80043e0 <HAL_GetTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4a09      	ldr	r2, [pc, #36]	@ (8002cf8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002cd2:	6013      	str	r3, [r2, #0]
MPU6050 mpu_sensor;
 8002cd4:	4809      	ldr	r0, [pc, #36]	@ (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002cd6:	f014 f9bd 	bl	8017054 <_ZN7MPU6050C1Ev>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d102      	bne.n	8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8002cea:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002cec:	f014 fc54 	bl	8017598 <_ZN7MPU6050D1Ev>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000354 	.word	0x20000354
 8002cfc:	20000d6c 	.word	0x20000d6c

08002d00 <_GLOBAL__sub_I_currentTime>:
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff ffd1 	bl	8002cb0 <_Z41__static_initialization_and_destruction_0ii>
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_GLOBAL__sub_D_currentTime>:
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7ff ffc9 	bl	8002cb0 <_Z41__static_initialization_and_destruction_0ii>
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_MspInit+0x44>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a21      	ldr	r2, [pc, #132]	@ (8002e0c <HAL_ADC_MspInit+0xa4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d13c      	bne.n	8002e04 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d96:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002da8:	f043 0320 	orr.w	r3, r3, #32
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_ADC_MspInit+0xa8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002dd2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002dd6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	480b      	ldr	r0, [pc, #44]	@ (8002e14 <HAL_ADC_MspInit+0xac>)
 8002de8:	f003 f8fa 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df0:	2303      	movs	r3, #3
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <HAL_ADC_MspInit+0xb0>)
 8002e00:	f003 f8ee 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	@ 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40012200 	.word	0x40012200
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40020000 	.word	0x40020000

08002e1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_CRC_MspInit+0x38>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10b      	bne.n	8002e46 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_CRC_MspInit+0x3c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	4a09      	ldr	r2, [pc, #36]	@ (8002e58 <HAL_CRC_MspInit+0x3c>)
 8002e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <HAL_CRC_MspInit+0x3c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023000 	.word	0x40023000
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	@ 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a50      	ldr	r2, [pc, #320]	@ (8002fbc <HAL_DCMI_MspInit+0x160>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	f040 809a 	bne.w	8002fb4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002e80:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e84:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e98:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	4a48      	ldr	r2, [pc, #288]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
 8002ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea4:	4b46      	ldr	r3, [pc, #280]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb0:	4b43      	ldr	r3, [pc, #268]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	4a42      	ldr	r2, [pc, #264]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebc:	4b40      	ldr	r3, [pc, #256]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ee0:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	4a36      	ldr	r2, [pc, #216]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eec:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef8:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	4a30      	ldr	r2, [pc, #192]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f04:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc0 <HAL_DCMI_MspInit+0x164>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002f10:	2360      	movs	r3, #96	@ 0x60
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f20:	230d      	movs	r3, #13
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4826      	ldr	r0, [pc, #152]	@ (8002fc4 <HAL_DCMI_MspInit+0x168>)
 8002f2c:	f003 f858 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002f30:	2308      	movs	r3, #8
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f40:	230d      	movs	r3, #13
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481f      	ldr	r0, [pc, #124]	@ (8002fc8 <HAL_DCMI_MspInit+0x16c>)
 8002f4c:	f003 f848 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f62:	230d      	movs	r3, #13
 8002f64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4817      	ldr	r0, [pc, #92]	@ (8002fcc <HAL_DCMI_MspInit+0x170>)
 8002f6e:	f003 f837 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002f72:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002f84:	230d      	movs	r3, #13
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4810      	ldr	r0, [pc, #64]	@ (8002fd0 <HAL_DCMI_MspInit+0x174>)
 8002f90:	f003 f826 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002f94:	2350      	movs	r3, #80	@ 0x50
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002fa4:	230d      	movs	r3, #13
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fac:	4619      	mov	r1, r3
 8002fae:	4809      	ldr	r0, [pc, #36]	@ (8002fd4 <HAL_DCMI_MspInit+0x178>)
 8002fb0:	f003 f816 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3738      	adds	r7, #56	@ 0x38
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	50050000 	.word	0x50050000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40021800 	.word	0x40021800
 8002fd0:	40021c00 	.word	0x40021c00
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <HAL_DMA2D_MspInit+0x44>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d113      	bne.n	8003012 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <HAL_DMA2D_MspInit+0x48>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <HAL_DMA2D_MspInit+0x48>)
 8002ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_DMA2D_MspInit+0x48>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	205a      	movs	r0, #90	@ 0x5a
 8003008:	f001 fd66 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800300c:	205a      	movs	r0, #90	@ 0x5a
 800300e:	f001 fd7f 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	4002b000 	.word	0x4002b000
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	@ 0x38
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3f      	ldr	r2, [pc, #252]	@ (8003140 <HAL_ETH_MspInit+0x11c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d178      	bne.n	8003138 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003046:	4b3f      	ldr	r3, [pc, #252]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a3e      	ldr	r2, [pc, #248]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 800304c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b3c      	ldr	r3, [pc, #240]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4a38      	ldr	r2, [pc, #224]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4b33      	ldr	r3, [pc, #204]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 800307c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b30      	ldr	r3, [pc, #192]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800308e:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 8003094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003098:	6313      	str	r3, [r2, #48]	@ 0x30
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a6:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a26      	ldr	r2, [pc, #152]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a20      	ldr	r2, [pc, #128]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <HAL_ETH_MspInit+0x120>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80030d6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030e8:	230b      	movs	r3, #11
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f0:	4619      	mov	r1, r3
 80030f2:	4815      	ldr	r0, [pc, #84]	@ (8003148 <HAL_ETH_MspInit+0x124>)
 80030f4:	f002 ff74 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80030f8:	2332      	movs	r3, #50	@ 0x32
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003108:	230b      	movs	r3, #11
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	480e      	ldr	r0, [pc, #56]	@ (800314c <HAL_ETH_MspInit+0x128>)
 8003114:	f002 ff64 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003118:	2386      	movs	r3, #134	@ 0x86
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003128:	230b      	movs	r3, #11
 800312a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003130:	4619      	mov	r1, r3
 8003132:	4807      	ldr	r0, [pc, #28]	@ (8003150 <HAL_ETH_MspInit+0x12c>)
 8003134:	f002 ff54 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003138:	bf00      	nop
 800313a:	3738      	adds	r7, #56	@ 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40028000 	.word	0x40028000
 8003144:	40023800 	.word	0x40023800
 8003148:	40021800 	.word	0x40021800
 800314c:	40020800 	.word	0x40020800
 8003150:	40020000 	.word	0x40020000

08003154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0ac      	sub	sp, #176	@ 0xb0
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	2284      	movs	r2, #132	@ 0x84
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f018 fcf2 	bl	801bb5e <memset>
  if(hi2c->Instance==I2C1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a84      	ldr	r2, [pc, #528]	@ (8003390 <HAL_I2C_MspInit+0x23c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f040 80be 	bne.w	8003302 <HAL_I2C_MspInit+0x1ae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003186:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800318a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800318c:	2300      	movs	r3, #0
 800318e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f008 fe81 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80031a0:	f7ff fd80 	bl	8002ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b0:	4b78      	ldr	r3, [pc, #480]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80031bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c4:	2312      	movs	r3, #18
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031d6:	2304      	movs	r3, #4
 80031d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031e0:	4619      	mov	r1, r3
 80031e2:	486d      	ldr	r0, [pc, #436]	@ (8003398 <HAL_I2C_MspInit+0x244>)
 80031e4:	f002 fefc 	bl	8005fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	4a69      	ldr	r2, [pc, #420]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f4:	4b67      	ldr	r3, [pc, #412]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003202:	4a67      	ldr	r2, [pc, #412]	@ (80033a0 <HAL_I2C_MspInit+0x24c>)
 8003204:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003206:	4b65      	ldr	r3, [pc, #404]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320e:	4b63      	ldr	r3, [pc, #396]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b61      	ldr	r3, [pc, #388]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b60      	ldr	r3, [pc, #384]	@ (800339c <HAL_I2C_MspInit+0x248>)
 800321c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003220:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003222:	4b5e      	ldr	r3, [pc, #376]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003228:	4b5c      	ldr	r3, [pc, #368]	@ (800339c <HAL_I2C_MspInit+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800322e:	4b5b      	ldr	r3, [pc, #364]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003230:	2200      	movs	r2, #0
 8003232:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003234:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003236:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800323a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800323c:	4b57      	ldr	r3, [pc, #348]	@ (800339c <HAL_I2C_MspInit+0x248>)
 800323e:	2204      	movs	r2, #4
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003242:	4b56      	ldr	r3, [pc, #344]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003244:	2203      	movs	r2, #3
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003248:	4b54      	ldr	r3, [pc, #336]	@ (800339c <HAL_I2C_MspInit+0x248>)
 800324a:	2200      	movs	r2, #0
 800324c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800324e:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003254:	4851      	ldr	r0, [pc, #324]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003256:	f001 fdd5 	bl	8004e04 <HAL_DMA_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8003260:	f7ff fd20 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a4d      	ldr	r2, [pc, #308]	@ (800339c <HAL_I2C_MspInit+0x248>)
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c
 800326a:	4a4c      	ldr	r2, [pc, #304]	@ (800339c <HAL_I2C_MspInit+0x248>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003270:	4b4c      	ldr	r3, [pc, #304]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 8003272:	4a4d      	ldr	r2, [pc, #308]	@ (80033a8 <HAL_I2C_MspInit+0x254>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003276:	4b4b      	ldr	r3, [pc, #300]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 8003278:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327e:	4b49      	ldr	r3, [pc, #292]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003284:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800328a:	4b46      	ldr	r3, [pc, #280]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 800328c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003290:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003292:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003298:	4b42      	ldr	r3, [pc, #264]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800329e:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80032a4:	4b3f      	ldr	r3, [pc, #252]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032aa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032ac:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032ae:	2204      	movs	r2, #4
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032b2:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032b4:	2203      	movs	r2, #3
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032b8:	4b3a      	ldr	r3, [pc, #232]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032be:	4b39      	ldr	r3, [pc, #228]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80032c4:	4837      	ldr	r0, [pc, #220]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032c6:	f001 fd9d 	bl	8004e04 <HAL_DMA_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_MspInit+0x180>
    {
      Error_Handler();
 80032d0:	f7ff fce8 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a33      	ldr	r2, [pc, #204]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80032da:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <HAL_I2C_MspInit+0x250>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	201f      	movs	r0, #31
 80032e6:	f001 fbf7 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032ea:	201f      	movs	r0, #31
 80032ec:	f001 fc10 	bl	8004b10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	2020      	movs	r0, #32
 80032f6:	f001 fbef 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032fa:	2020      	movs	r0, #32
 80032fc:	f001 fc08 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003300:	e042      	b.n	8003388 <HAL_I2C_MspInit+0x234>
  else if(hi2c->Instance==I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_I2C_MspInit+0x258>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d13d      	bne.n	8003388 <HAL_I2C_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800330c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003310:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	4618      	mov	r0, r3
 800331e:	f008 fdbd 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_MspInit+0x1d8>
      Error_Handler();
 8003328:	f7ff fcbc 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	4a18      	ldr	r2, [pc, #96]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 8003332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003336:	6313      	str	r3, [r2, #48]	@ 0x30
 8003338:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003344:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334c:	2312      	movs	r3, #18
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003352:	2301      	movs	r3, #1
 8003354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800335e:	2304      	movs	r3, #4
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003368:	4619      	mov	r1, r3
 800336a:	4811      	ldr	r0, [pc, #68]	@ (80033b0 <HAL_I2C_MspInit+0x25c>)
 800336c:	f002 fe38 	bl	8005fe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	4a07      	ldr	r2, [pc, #28]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 8003376:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800337a:	6413      	str	r3, [r2, #64]	@ 0x40
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_I2C_MspInit+0x240>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
}
 8003388:	bf00      	nop
 800338a:	37b0      	adds	r7, #176	@ 0xb0
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40005400 	.word	0x40005400
 8003394:	40023800 	.word	0x40023800
 8003398:	40020400 	.word	0x40020400
 800339c:	200005e4 	.word	0x200005e4
 80033a0:	40026010 	.word	0x40026010
 80033a4:	20000644 	.word	0x20000644
 80033a8:	400260a0 	.word	0x400260a0
 80033ac:	40005c00 	.word	0x40005c00
 80033b0:	40021c00 	.word	0x40021c00

080033b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	@ 0x38
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a55      	ldr	r2, [pc, #340]	@ (8003528 <HAL_LTDC_MspInit+0x174>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f040 80a3 	bne.w	800351e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033d8:	4b54      	ldr	r3, [pc, #336]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033dc:	4a53      	ldr	r2, [pc, #332]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80033e4:	4b51      	ldr	r3, [pc, #324]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033f0:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	4a4d      	ldr	r2, [pc, #308]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033f6:	f043 0310 	orr.w	r3, r3, #16
 80033fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fc:	4b4b      	ldr	r3, [pc, #300]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003408:	4b48      	ldr	r3, [pc, #288]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	4a47      	ldr	r2, [pc, #284]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800340e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003412:	6313      	str	r3, [r2, #48]	@ 0x30
 8003414:	4b45      	ldr	r3, [pc, #276]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003420:	4b42      	ldr	r3, [pc, #264]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	4a41      	ldr	r2, [pc, #260]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342a:	6313      	str	r3, [r2, #48]	@ 0x30
 800342c:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003438:	4b3c      	ldr	r3, [pc, #240]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4a3b      	ldr	r2, [pc, #236]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800343e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003442:	6313      	str	r3, [r2, #48]	@ 0x30
 8003444:	4b39      	ldr	r3, [pc, #228]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003450:	4b36      	ldr	r3, [pc, #216]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	4a35      	ldr	r2, [pc, #212]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345a:	6313      	str	r3, [r2, #48]	@ 0x30
 800345c:	4b33      	ldr	r3, [pc, #204]	@ (800352c <HAL_LTDC_MspInit+0x178>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003468:	2310      	movs	r3, #16
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003478:	230e      	movs	r3, #14
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003480:	4619      	mov	r1, r3
 8003482:	482b      	ldr	r0, [pc, #172]	@ (8003530 <HAL_LTDC_MspInit+0x17c>)
 8003484:	f002 fdac 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003488:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800349a:	230e      	movs	r3, #14
 800349c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	4823      	ldr	r0, [pc, #140]	@ (8003534 <HAL_LTDC_MspInit+0x180>)
 80034a6:	f002 fd9b 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80034aa:	23f7      	movs	r3, #247	@ 0xf7
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ba:	230e      	movs	r3, #14
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	481c      	ldr	r0, [pc, #112]	@ (8003538 <HAL_LTDC_MspInit+0x184>)
 80034c6:	f002 fd8b 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80034ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034dc:	2309      	movs	r3, #9
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	4815      	ldr	r0, [pc, #84]	@ (800353c <HAL_LTDC_MspInit+0x188>)
 80034e8:	f002 fd7a 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80034ec:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034fe:	230e      	movs	r3, #14
 8003500:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	480d      	ldr	r0, [pc, #52]	@ (8003540 <HAL_LTDC_MspInit+0x18c>)
 800350a:	f002 fd69 	bl	8005fe0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2058      	movs	r0, #88	@ 0x58
 8003514:	f001 fae0 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003518:	2058      	movs	r0, #88	@ 0x58
 800351a:	f001 faf9 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800351e:	bf00      	nop
 8003520:	3738      	adds	r7, #56	@ 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40016800 	.word	0x40016800
 800352c:	40023800 	.word	0x40023800
 8003530:	40021000 	.word	0x40021000
 8003534:	40022400 	.word	0x40022400
 8003538:	40022800 	.word	0x40022800
 800353c:	40021800 	.word	0x40021800
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	@ 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3b      	ldr	r2, [pc, #236]	@ (8003650 <HAL_QSPI_MspInit+0x10c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d170      	bne.n	8003648 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003566:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	4a3a      	ldr	r2, [pc, #232]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6393      	str	r3, [r2, #56]	@ 0x38
 8003572:	4b38      	ldr	r3, [pc, #224]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800357e:	4b35      	ldr	r3, [pc, #212]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4a34      	ldr	r2, [pc, #208]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 8003584:	f043 0310 	orr.w	r3, r3, #16
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4b32      	ldr	r3, [pc, #200]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	4b2f      	ldr	r3, [pc, #188]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a2e      	ldr	r2, [pc, #184]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a28      	ldr	r2, [pc, #160]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <HAL_QSPI_MspInit+0x110>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80035c6:	2304      	movs	r3, #4
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80035d6:	2309      	movs	r3, #9
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4619      	mov	r1, r3
 80035e0:	481d      	ldr	r0, [pc, #116]	@ (8003658 <HAL_QSPI_MspInit+0x114>)
 80035e2:	f002 fcfd 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80035e6:	2340      	movs	r3, #64	@ 0x40
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035f6:	230a      	movs	r3, #10
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	4619      	mov	r1, r3
 8003600:	4816      	ldr	r0, [pc, #88]	@ (800365c <HAL_QSPI_MspInit+0x118>)
 8003602:	f002 fced 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003606:	2304      	movs	r3, #4
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003612:	2303      	movs	r3, #3
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003616:	2309      	movs	r3, #9
 8003618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	4619      	mov	r1, r3
 8003620:	480e      	ldr	r0, [pc, #56]	@ (800365c <HAL_QSPI_MspInit+0x118>)
 8003622:	f002 fcdd 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003626:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003634:	2303      	movs	r3, #3
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003638:	2309      	movs	r3, #9
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800363c:	f107 031c 	add.w	r3, r7, #28
 8003640:	4619      	mov	r1, r3
 8003642:	4807      	ldr	r0, [pc, #28]	@ (8003660 <HAL_QSPI_MspInit+0x11c>)
 8003644:	f002 fccc 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003648:	bf00      	nop
 800364a:	3730      	adds	r7, #48	@ 0x30
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	a0001000 	.word	0xa0001000
 8003654:	40023800 	.word	0x40023800
 8003658:	40021000 	.word	0x40021000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020c00 	.word	0x40020c00

08003664 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b0a4      	sub	sp, #144	@ 0x90
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	2284      	movs	r2, #132	@ 0x84
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f018 fa72 	bl	801bb5e <memset>
  if(hrtc->Instance==RTC)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0e      	ldr	r2, [pc, #56]	@ (80036b8 <HAL_RTC_MspInit+0x54>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d114      	bne.n	80036ae <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003684:	2320      	movs	r3, #32
 8003686:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	4618      	mov	r0, r3
 8003694:	f008 fc02 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800369e:	f7ff fb01 	bl	8002ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RTC_MspInit+0x58>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_RTC_MspInit+0x58>)
 80036a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ac:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3790      	adds	r7, #144	@ 0x90
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40002800 	.word	0x40002800
 80036bc:	40023800 	.word	0x40023800

080036c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a25      	ldr	r2, [pc, #148]	@ (8003774 <HAL_SD_MspInit+0xb4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d144      	bne.n	800376c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80036e2:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	4a24      	ldr	r2, [pc, #144]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 80036e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ee:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003712:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <HAL_SD_MspInit+0xb8>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800372a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800372e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800373c:	230c      	movs	r3, #12
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4619      	mov	r1, r3
 8003746:	480d      	ldr	r0, [pc, #52]	@ (800377c <HAL_SD_MspInit+0xbc>)
 8003748:	f002 fc4a 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800374c:	2304      	movs	r3, #4
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800375c:	230c      	movs	r3, #12
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	4806      	ldr	r0, [pc, #24]	@ (8003780 <HAL_SD_MspInit+0xc0>)
 8003768:	f002 fc3a 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800376c:	bf00      	nop
 800376e:	3728      	adds	r7, #40	@ 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40023800 	.word	0x40023800
 800377c:	40020800 	.word	0x40020800
 8003780:	40020c00 	.word	0x40020c00

08003784 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b0aa      	sub	sp, #168	@ 0xa8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800379c:	f107 0310 	add.w	r3, r7, #16
 80037a0:	2284      	movs	r2, #132	@ 0x84
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f018 f9da 	bl	801bb5e <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80037b2:	d143      	bne.n	800383c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80037b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80037ba:	2364      	movs	r3, #100	@ 0x64
 80037bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80037be:	2302      	movs	r3, #2
 80037c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80037c2:	2302      	movs	r3, #2
 80037c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80037c6:	2302      	movs	r3, #2
 80037c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f008 fb62 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80037de:	f7ff fa61 	bl	8002ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80037e2:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	4a17      	ldr	r2, [pc, #92]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	4a11      	ldr	r2, [pc, #68]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6313      	str	r3, [r2, #48]	@ 0x30
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <HAL_SPDIFRX_MspInit+0xc0>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800382a:	2308      	movs	r3, #8
 800382c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003830:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003834:	4619      	mov	r1, r3
 8003836:	4804      	ldr	r0, [pc, #16]	@ (8003848 <HAL_SPDIFRX_MspInit+0xc4>)
 8003838:	f002 fbd2 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800383c:	bf00      	nop
 800383e:	37a8      	adds	r7, #168	@ 0xa8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	40020c00 	.word	0x40020c00

0800384c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	@ 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a25      	ldr	r2, [pc, #148]	@ (8003900 <HAL_SPI_MspInit+0xb4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d144      	bne.n	80038f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	4a24      	ldr	r2, [pc, #144]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
 800387a:	4b22      	ldr	r3, [pc, #136]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003886:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003890:	6313      	str	r3, [r2, #48]	@ 0x30
 8003892:	4b1c      	ldr	r3, [pc, #112]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_SPI_MspInit+0xb8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80038b6:	2302      	movs	r3, #2
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038c6:	2305      	movs	r3, #5
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	480d      	ldr	r0, [pc, #52]	@ (8003908 <HAL_SPI_MspInit+0xbc>)
 80038d2:	f002 fb85 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80038d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80038da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038e8:	2305      	movs	r3, #5
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4619      	mov	r1, r3
 80038f2:	4806      	ldr	r0, [pc, #24]	@ (800390c <HAL_SPI_MspInit+0xc0>)
 80038f4:	f002 fb74 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80038f8:	bf00      	nop
 80038fa:	3728      	adds	r7, #40	@ 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40003800 	.word	0x40003800
 8003904:	40023800 	.word	0x40023800
 8003908:	40022000 	.word	0x40022000
 800390c:	40020400 	.word	0x40020400

08003910 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	@ 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_TIM_IC_MspInit+0x8c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d130      	bne.n	8003994 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	4a1a      	ldr	r2, [pc, #104]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6453      	str	r3, [r2, #68]	@ 0x44
 800393e:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6313      	str	r3, [r2, #48]	@ 0x30
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_TIM_IC_MspInit+0x90>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003974:	2301      	movs	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4619      	mov	r1, r3
 800397e:	4809      	ldr	r0, [pc, #36]	@ (80039a4 <HAL_TIM_IC_MspInit+0x94>)
 8003980:	f002 fb2e 	bl	8005fe0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	201b      	movs	r0, #27
 800398a:	f001 f8a5 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800398e:	201b      	movs	r0, #27
 8003990:	f001 f8be 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003994:	bf00      	nop
 8003996:	3728      	adds	r7, #40	@ 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40010000 	.word	0x40010000
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020000 	.word	0x40020000

080039a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b8:	d10c      	bne.n	80039d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c6:	4b21      	ldr	r3, [pc, #132]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039d2:	e034      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10c      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039de:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
}
 80039f6:	e022      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a15      	ldr	r2, [pc, #84]	@ (8003a54 <HAL_TIM_Base_MspInit+0xac>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10c      	bne.n	8003a1c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a11      	ldr	r2, [pc, #68]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a08:	f043 0308 	orr.w	r3, r3, #8
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
}
 8003a1a:	e010      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <HAL_TIM_Base_MspInit+0xb0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10b      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	4a08      	ldr	r2, [pc, #32]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_TIM_Base_MspInit+0xa4>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400

08003a5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <HAL_TIM_PWM_MspInit+0x38>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10b      	bne.n	8003a86 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40001800 	.word	0x40001800
 8003a98:	40023800 	.word	0x40023800

08003a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	@ 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d11d      	bne.n	8003afa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a42      	ldr	r2, [pc, #264]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	4837      	ldr	r0, [pc, #220]	@ (8003bd0 <HAL_TIM_MspPostInit+0x134>)
 8003af4:	f002 fa74 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003af8:	e064      	b.n	8003bc4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a35      	ldr	r2, [pc, #212]	@ (8003bd4 <HAL_TIM_MspPostInit+0x138>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d11c      	bne.n	8003b3e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b0a:	f043 0302 	orr.w	r3, r3, #2
 8003b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b10:	4b2e      	ldr	r3, [pc, #184]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4828      	ldr	r0, [pc, #160]	@ (8003bd8 <HAL_TIM_MspPostInit+0x13c>)
 8003b38:	f002 fa52 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003b3c:	e042      	b.n	8003bc4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a26      	ldr	r2, [pc, #152]	@ (8003bdc <HAL_TIM_MspPostInit+0x140>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d11c      	bne.n	8003b82 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b48:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003b60:	2301      	movs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b70:	2302      	movs	r3, #2
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4819      	ldr	r0, [pc, #100]	@ (8003be0 <HAL_TIM_MspPostInit+0x144>)
 8003b7c:	f002 fa30 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003b80:	e020      	b.n	8003bc4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a17      	ldr	r2, [pc, #92]	@ (8003be4 <HAL_TIM_MspPostInit+0x148>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	4a0e      	ldr	r2, [pc, #56]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b98:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <HAL_TIM_MspPostInit+0x130>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003ba4:	2340      	movs	r3, #64	@ 0x40
 8003ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003bb4:	2309      	movs	r3, #9
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	480a      	ldr	r0, [pc, #40]	@ (8003be8 <HAL_TIM_MspPostInit+0x14c>)
 8003bc0:	f002 fa0e 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003bc4:	bf00      	nop
 8003bc6:	3730      	adds	r7, #48	@ 0x30
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40001800 	.word	0x40001800
 8003be8:	40021c00 	.word	0x40021c00

08003bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b0ae      	sub	sp, #184	@ 0xb8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c04:	f107 0320 	add.w	r3, r7, #32
 8003c08:	2284      	movs	r2, #132	@ 0x84
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f017 ffa6 	bl	801bb5e <memset>
  if(huart->Instance==USART1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a53      	ldr	r2, [pc, #332]	@ (8003d64 <HAL_UART_MspInit+0x178>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d15d      	bne.n	8003cd8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c1c:	2340      	movs	r3, #64	@ 0x40
 8003c1e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c20:	2300      	movs	r3, #0
 8003c22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c24:	f107 0320 	add.w	r3, r7, #32
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f008 f937 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c34:	f7ff f836 	bl	8002ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c38:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c3e:	f043 0310 	orr.w	r3, r3, #16
 8003c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c44:	4b48      	ldr	r3, [pc, #288]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c50:	4b45      	ldr	r3, [pc, #276]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a44      	ldr	r2, [pc, #272]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b42      	ldr	r3, [pc, #264]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	4b3f      	ldr	r3, [pc, #252]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c74:	4b3c      	ldr	r3, [pc, #240]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c86:	2302      	movs	r3, #2
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003c9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4831      	ldr	r0, [pc, #196]	@ (8003d6c <HAL_UART_MspInit+0x180>)
 8003ca6:	f002 f99b 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cc4:	2307      	movs	r3, #7
 8003cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003cca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4827      	ldr	r0, [pc, #156]	@ (8003d70 <HAL_UART_MspInit+0x184>)
 8003cd2:	f002 f985 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003cd6:	e040      	b.n	8003d5a <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a25      	ldr	r2, [pc, #148]	@ (8003d74 <HAL_UART_MspInit+0x188>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d13b      	bne.n	8003d5a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ce6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cec:	f107 0320 	add.w	r3, r7, #32
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f008 f8d3 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003cfc:	f7fe ffd2 	bl	8002ca4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d0c:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_UART_MspInit+0x17c>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDIONO_D0_Pin|ARDUINO_D1_Pin;
 8003d30:	23c0      	movs	r3, #192	@ 0xc0
 8003d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4808      	ldr	r0, [pc, #32]	@ (8003d78 <HAL_UART_MspInit+0x18c>)
 8003d56:	f002 f943 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003d5a:	bf00      	nop
 8003d5c:	37b8      	adds	r7, #184	@ 0xb8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40011000 	.word	0x40011000
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40020000 	.word	0x40020000
 8003d74:	40011400 	.word	0x40011400
 8003d78:	40020800 	.word	0x40020800

08003d7c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003d90:	4b3a      	ldr	r3, [pc, #232]	@ (8003e7c <HAL_FMC_MspInit+0x100>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d16d      	bne.n	8003e74 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003d98:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <HAL_FMC_MspInit+0x100>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d9e:	4b38      	ldr	r3, [pc, #224]	@ (8003e80 <HAL_FMC_MspInit+0x104>)
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	4a37      	ldr	r2, [pc, #220]	@ (8003e80 <HAL_FMC_MspInit+0x104>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6393      	str	r3, [r2, #56]	@ 0x38
 8003daa:	4b35      	ldr	r3, [pc, #212]	@ (8003e80 <HAL_FMC_MspInit+0x104>)
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003db6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003dba:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dc8:	230c      	movs	r3, #12
 8003dca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	482c      	ldr	r0, [pc, #176]	@ (8003e84 <HAL_FMC_MspInit+0x108>)
 8003dd2:	f002 f905 	bl	8005fe0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003dd6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003dda:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de4:	2303      	movs	r3, #3
 8003de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003de8:	230c      	movs	r3, #12
 8003dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4825      	ldr	r0, [pc, #148]	@ (8003e88 <HAL_FMC_MspInit+0x10c>)
 8003df2:	f002 f8f5 	bl	8005fe0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003df6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003dfa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e04:	2303      	movs	r3, #3
 8003e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e08:	230c      	movs	r3, #12
 8003e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	481e      	ldr	r0, [pc, #120]	@ (8003e8c <HAL_FMC_MspInit+0x110>)
 8003e12:	f002 f8e5 	bl	8005fe0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003e16:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003e1a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e24:	2303      	movs	r3, #3
 8003e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e28:	230c      	movs	r3, #12
 8003e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4817      	ldr	r0, [pc, #92]	@ (8003e90 <HAL_FMC_MspInit+0x114>)
 8003e32:	f002 f8d5 	bl	8005fe0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003e36:	2328      	movs	r3, #40	@ 0x28
 8003e38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e42:	2303      	movs	r3, #3
 8003e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e46:	230c      	movs	r3, #12
 8003e48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4811      	ldr	r0, [pc, #68]	@ (8003e94 <HAL_FMC_MspInit+0x118>)
 8003e50:	f002 f8c6 	bl	8005fe0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003e54:	2308      	movs	r3, #8
 8003e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e64:	230c      	movs	r3, #12
 8003e66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480a      	ldr	r0, [pc, #40]	@ (8003e98 <HAL_FMC_MspInit+0x11c>)
 8003e6e:	f002 f8b7 	bl	8005fe0 <HAL_GPIO_Init>
 8003e72:	e000      	b.n	8003e76 <HAL_FMC_MspInit+0xfa>
    return;
 8003e74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000dac 	.word	0x20000dac
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40021800 	.word	0x40021800
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021400 	.word	0x40021400
 8003e94:	40021c00 	.word	0x40021c00
 8003e98:	40020800 	.word	0x40020800

08003e9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ea4:	f7ff ff6a 	bl	8003d7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f6c <HAL_SAI_MspInit+0xbc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d124      	bne.n	8003f0c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003eca:	4b2a      	ldr	r3, [pc, #168]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	4a29      	ldr	r2, [pc, #164]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003ed0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed6:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003ee2:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a21      	ldr	r2, [pc, #132]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003eea:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003eec:	23f0      	movs	r3, #240	@ 0xf0
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003efc:	230a      	movs	r3, #10
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	481c      	ldr	r0, [pc, #112]	@ (8003f78 <HAL_SAI_MspInit+0xc8>)
 8003f08:	f002 f86a 	bl	8005fe0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1a      	ldr	r2, [pc, #104]	@ (8003f7c <HAL_SAI_MspInit+0xcc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d125      	bne.n	8003f62 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003f16:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f2a:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <HAL_SAI_MspInit+0xc4>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f70 <HAL_SAI_MspInit+0xc0>)
 8003f3e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f52:	230a      	movs	r3, #10
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003f56:	f107 0314 	add.w	r3, r7, #20
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4808      	ldr	r0, [pc, #32]	@ (8003f80 <HAL_SAI_MspInit+0xd0>)
 8003f5e:	f002 f83f 	bl	8005fe0 <HAL_GPIO_Init>

    }
}
 8003f62:	bf00      	nop
 8003f64:	3728      	adds	r7, #40	@ 0x28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40015c04 	.word	0x40015c04
 8003f70:	20000db0 	.word	0x20000db0
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40015c24 	.word	0x40015c24
 8003f80:	40021800 	.word	0x40021800

08003f84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	@ 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f94:	4b33      	ldr	r3, [pc, #204]	@ (8004064 <HAL_InitTick+0xe0>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	4a32      	ldr	r2, [pc, #200]	@ (8004064 <HAL_InitTick+0xe0>)
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fa0:	4b30      	ldr	r3, [pc, #192]	@ (8004064 <HAL_InitTick+0xe0>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fac:	f107 0210 	add.w	r2, r7, #16
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f007 ff3e 	bl	800be38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003fc6:	f007 ff0f 	bl	800bde8 <HAL_RCC_GetPCLK1Freq>
 8003fca:	6378      	str	r0, [r7, #52]	@ 0x34
 8003fcc:	e004      	b.n	8003fd8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003fce:	f007 ff0b 	bl	800bde8 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <HAL_InitTick+0xe4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0c9b      	lsrs	r3, r3, #18
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003fe6:	4b21      	ldr	r3, [pc, #132]	@ (800406c <HAL_InitTick+0xe8>)
 8003fe8:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <HAL_InitTick+0xec>)
 8003fea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fec:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <HAL_InitTick+0xe8>)
 8003fee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ff2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800406c <HAL_InitTick+0xe8>)
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <HAL_InitTick+0xe8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_InitTick+0xe8>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004006:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_InitTick+0xe8>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800400c:	4817      	ldr	r0, [pc, #92]	@ (800406c <HAL_InitTick+0xe8>)
 800400e:	f00a fcce 	bl	800e9ae <HAL_TIM_Base_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004018:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800401c:	2b00      	cmp	r3, #0
 800401e:	d11b      	bne.n	8004058 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004020:	4812      	ldr	r0, [pc, #72]	@ (800406c <HAL_InitTick+0xe8>)
 8004022:	f00a fd1b 	bl	800ea5c <HAL_TIM_Base_Start_IT>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800402c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004030:	2b00      	cmp	r3, #0
 8004032:	d111      	bne.n	8004058 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004034:	2036      	movs	r0, #54	@ 0x36
 8004036:	f000 fd6b 	bl	8004b10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d808      	bhi.n	8004052 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004040:	2200      	movs	r2, #0
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	2036      	movs	r0, #54	@ 0x36
 8004046:	f000 fd47 	bl	8004ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800404a:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <HAL_InitTick+0xf0>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e002      	b.n	8004058 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800405c:	4618      	mov	r0, r3
 800405e:	3738      	adds	r7, #56	@ 0x38
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	431bde83 	.word	0x431bde83
 800406c:	20000db4 	.word	0x20000db4
 8004070:	40001000 	.word	0x40001000
 8004074:	20000004 	.word	0x20000004

08004078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800407c:	bf00      	nop
 800407e:	e7fd      	b.n	800407c <NMI_Handler+0x4>

08004080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <HardFault_Handler+0x4>

08004088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <MemManage_Handler+0x4>

08004090 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <BusFault_Handler+0x4>

08004098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <UsageFault_Handler+0x4>

080040a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 80040dc:	2008      	movs	r0, #8
 80040de:	f002 f95d 	bl	800639c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80040ec:	4802      	ldr	r0, [pc, #8]	@ (80040f8 <DMA1_Stream0_IRQHandler+0x10>)
 80040ee:	f000 ffb9 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200005e4 	.word	0x200005e4

080040fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004100:	4802      	ldr	r0, [pc, #8]	@ (800410c <DMA1_Stream6_IRQHandler+0x10>)
 8004102:	f000 ffaf 	bl	8005064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000644 	.word	0x20000644

08004110 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004114:	4802      	ldr	r0, [pc, #8]	@ (8004120 <TIM1_CC_IRQHandler+0x10>)
 8004116:	f00a fdc7 	bl	800eca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200009f4 	.word	0x200009f4

08004124 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004128:	4802      	ldr	r0, [pc, #8]	@ (8004134 <I2C1_EV_IRQHandler+0x10>)
 800412a:	f004 fef5 	bl	8008f18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000053c 	.word	0x2000053c

08004138 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800413c:	4802      	ldr	r0, [pc, #8]	@ (8004148 <I2C1_ER_IRQHandler+0x10>)
 800413e:	f004 ff05 	bl	8008f4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000053c 	.word	0x2000053c

0800414c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004150:	4802      	ldr	r0, [pc, #8]	@ (800415c <TIM6_DAC_IRQHandler+0x10>)
 8004152:	f00a fda9 	bl	800eca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000db4 	.word	0x20000db4

08004160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004164:	4802      	ldr	r0, [pc, #8]	@ (8004170 <OTG_FS_IRQHandler+0x10>)
 8004166:	f002 fc1d 	bl	80069a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20001210 	.word	0x20001210

08004174 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004178:	4802      	ldr	r0, [pc, #8]	@ (8004184 <LTDC_IRQHandler+0x10>)
 800417a:	f006 fe17 	bl	800adac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200006a4 	.word	0x200006a4

08004188 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800418c:	4802      	ldr	r0, [pc, #8]	@ (8004198 <DMA2D_IRQHandler+0x10>)
 800418e:	f001 fa37 	bl	8005600 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000044c 	.word	0x2000044c

0800419c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return 1;
 80041a0:	2301      	movs	r3, #1
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_kill>:

int _kill(int pid, int sig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041b6:	f017 fd35 	bl	801bc24 <__errno>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2216      	movs	r2, #22
 80041be:	601a      	str	r2, [r3, #0]
  return -1;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_exit>:

void _exit (int status)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041d4:	f04f 31ff 	mov.w	r1, #4294967295
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ffe7 	bl	80041ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <_exit+0x12>

080041e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e00a      	b.n	800420a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041f4:	f3af 8000 	nop.w
 80041f8:	4601      	mov	r1, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	60ba      	str	r2, [r7, #8]
 8004200:	b2ca      	uxtb	r2, r1
 8004202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	dbf0      	blt.n	80041f4 <_read+0x12>
  }

  return len;
 8004212:	687b      	ldr	r3, [r7, #4]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e009      	b.n	8004242 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	60ba      	str	r2, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3301      	adds	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	dbf1      	blt.n	800422e <_write+0x12>
  }
  return len;
 800424a:	687b      	ldr	r3, [r7, #4]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_close>:

int _close(int file)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800427c:	605a      	str	r2, [r3, #4]
  return 0;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_isatty>:

int _isatty(int file)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004294:	2301      	movs	r3, #1
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c4:	4a14      	ldr	r2, [pc, #80]	@ (8004318 <_sbrk+0x5c>)
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <_sbrk+0x60>)
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <_sbrk+0x64>)
 80042da:	4a12      	ldr	r2, [pc, #72]	@ (8004324 <_sbrk+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <_sbrk+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d207      	bcs.n	80042fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042ec:	f017 fc9a 	bl	801bc24 <__errno>
 80042f0:	4603      	mov	r3, r0
 80042f2:	220c      	movs	r2, #12
 80042f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	e009      	b.n	8004310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042fc:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <_sbrk+0x64>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004302:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <_sbrk+0x64>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	4a05      	ldr	r2, [pc, #20]	@ (8004320 <_sbrk+0x64>)
 800430c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20050000 	.word	0x20050000
 800431c:	00000400 	.word	0x00000400
 8004320:	20000e00 	.word	0x20000e00
 8004324:	200017a8 	.word	0x200017a8

08004328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <SystemInit+0x20>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	4a05      	ldr	r2, [pc, #20]	@ (8004348 <SystemInit+0x20>)
 8004334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 800434c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004384 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004350:	f7ff ffea 	bl	8004328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004354:	480c      	ldr	r0, [pc, #48]	@ (8004388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004356:	490d      	ldr	r1, [pc, #52]	@ (800438c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004358:	4a0d      	ldr	r2, [pc, #52]	@ (8004390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800435c:	e002      	b.n	8004364 <LoopCopyDataInit>

0800435e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800435e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004362:	3304      	adds	r3, #4

08004364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004368:	d3f9      	bcc.n	800435e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800436c:	4c0a      	ldr	r4, [pc, #40]	@ (8004398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004370:	e001      	b.n	8004376 <LoopFillZerobss>

08004372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004374:	3204      	adds	r2, #4

08004376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004378:	d3fb      	bcc.n	8004372 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800437a:	f017 fc59 	bl	801bc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800437e:	f7fc ff33 	bl	80011e8 <main>
  bx  lr    
 8004382:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8004384:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800438c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004390:	0801e4b8 	.word	0x0801e4b8
  ldr r2, =_sbss
 8004394:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8004398:	200017a4 	.word	0x200017a4

0800439c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800439c:	e7fe      	b.n	800439c <ADC_IRQHandler>

0800439e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a2:	2003      	movs	r0, #3
 80043a4:	f000 fb8d 	bl	8004ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7ff fdeb 	bl	8003f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043ae:	f7fe fcb7 	bl	8002d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_IncTick+0x20>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <HAL_IncTick+0x24>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <HAL_IncTick+0x24>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000008 	.word	0x20000008
 80043dc:	20000e04 	.word	0x20000e04

080043e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return uwTick;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_GetTick+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000e04 	.word	0x20000e04

080043f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff ffee 	bl	80043e0 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d005      	beq.n	800441e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_Delay+0x44>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800441e:	bf00      	nop
 8004420:	f7ff ffde 	bl	80043e0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f7      	bhi.n	8004420 <HAL_Delay+0x28>
  {
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000008 	.word	0x20000008

08004440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e031      	b.n	80044ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe fc82 	bl	8002d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <HAL_ADC_Init+0x84>)
 8004484:	4013      	ands	r3, r2
 8004486:	f043 0202 	orr.w	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f970 	bl	8004774 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80044aa:	e001      	b.n	80044b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	ffffeefd 	.word	0xffffeefd

080044c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1c>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e136      	b.n	8004752 <HAL_ADC_ConfigChannel+0x28a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d93a      	bls.n	800456a <HAL_ADC_ConfigChannel+0xa2>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fc:	d035      	beq.n	800456a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	3b1e      	subs	r3, #30
 8004514:	2207      	movs	r2, #7
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43da      	mvns	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	400a      	ands	r2, r1
 8004522:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a8d      	ldr	r2, [pc, #564]	@ (8004760 <HAL_ADC_ConfigChannel+0x298>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	061a      	lsls	r2, r3, #24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004542:	e035      	b.n	80045b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	4618      	mov	r0, r3
 8004556:	4603      	mov	r3, r0
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4403      	add	r3, r0
 800455c:	3b1e      	subs	r3, #30
 800455e:	409a      	lsls	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004568:	e022      	b.n	80045b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6919      	ldr	r1, [r3, #16]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	4613      	mov	r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4413      	add	r3, r2
 800457e:	2207      	movs	r2, #7
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43da      	mvns	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	400a      	ands	r2, r1
 800458c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6919      	ldr	r1, [r3, #16]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	4618      	mov	r0, r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4403      	add	r3, r0
 80045a6:	409a      	lsls	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b06      	cmp	r3, #6
 80045b6:	d824      	bhi.n	8004602 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	3b05      	subs	r3, #5
 80045ca:	221f      	movs	r2, #31
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43da      	mvns	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	400a      	ands	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4618      	mov	r0, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	3b05      	subs	r3, #5
 80045f4:	fa00 f203 	lsl.w	r2, r0, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8004600:	e04c      	b.n	800469c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d824      	bhi.n	8004654 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	3b23      	subs	r3, #35	@ 0x23
 800461c:	221f      	movs	r2, #31
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	400a      	ands	r2, r1
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4618      	mov	r0, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	3b23      	subs	r3, #35	@ 0x23
 8004646:	fa00 f203 	lsl.w	r2, r0, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
 8004652:	e023      	b.n	800469c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b41      	subs	r3, #65	@ 0x41
 8004666:	221f      	movs	r2, #31
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43da      	mvns	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	400a      	ands	r2, r1
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	3b41      	subs	r3, #65	@ 0x41
 8004690:	fa00 f203 	lsl.w	r2, r0, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a30      	ldr	r2, [pc, #192]	@ (8004764 <HAL_ADC_ConfigChannel+0x29c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1f4>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ae:	d105      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80046b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80046ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a28      	ldr	r2, [pc, #160]	@ (8004764 <HAL_ADC_ConfigChannel+0x29c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10f      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b12      	cmp	r3, #18
 80046cc:	d10b      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80046ce:	4b26      	ldr	r3, [pc, #152]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4a25      	ldr	r2, [pc, #148]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80046da:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 80046e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004764 <HAL_ADC_ConfigChannel+0x29c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d12b      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x280>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <HAL_ADC_ConfigChannel+0x298>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <HAL_ADC_ConfigChannel+0x23a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b11      	cmp	r3, #17
 8004700:	d122      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 8004708:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800470c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800470e:	4b16      	ldr	r3, [pc, #88]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <HAL_ADC_ConfigChannel+0x2a0>)
 8004714:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004718:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a10      	ldr	r2, [pc, #64]	@ (8004760 <HAL_ADC_ConfigChannel+0x298>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_ADC_ConfigChannel+0x2a4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a11      	ldr	r2, [pc, #68]	@ (8004770 <HAL_ADC_ConfigChannel+0x2a8>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0c9a      	lsrs	r2, r3, #18
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800473a:	e002      	b.n	8004742 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3b01      	subs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f9      	bne.n	800473c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	10000012 	.word	0x10000012
 8004764:	40012000 	.word	0x40012000
 8004768:	40012300 	.word	0x40012300
 800476c:	20000000 	.word	0x20000000
 8004770:	431bde83 	.word	0x431bde83

08004774 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800477c:	4b78      	ldr	r3, [pc, #480]	@ (8004960 <ADC_Init+0x1ec>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a77      	ldr	r2, [pc, #476]	@ (8004960 <ADC_Init+0x1ec>)
 8004782:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004786:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004788:	4b75      	ldr	r3, [pc, #468]	@ (8004960 <ADC_Init+0x1ec>)
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4973      	ldr	r1, [pc, #460]	@ (8004960 <ADC_Init+0x1ec>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	4a58      	ldr	r2, [pc, #352]	@ (8004964 <ADC_Init+0x1f0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d022      	beq.n	800484e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6899      	ldr	r1, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	e00f      	b.n	800486e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800485c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800486c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0202 	bic.w	r2, r2, #2
 800487c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	005a      	lsls	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80048ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	3b01      	subs	r3, #1
 80048c8:	035a      	lsls	r2, r3, #13
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	e007      	b.n	80048e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	3b01      	subs	r3, #1
 8004900:	051a      	lsls	r2, r3, #20
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004926:	025a      	lsls	r2, r3, #9
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	029a      	lsls	r2, r3, #10
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40012300 	.word	0x40012300
 8004964:	0f000001 	.word	0x0f000001

08004968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <__NVIC_SetPriorityGrouping+0x40>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	4313      	orrs	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004996:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	60d3      	str	r3, [r2, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00
 80049ac:	05fa0000 	.word	0x05fa0000

080049b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <__NVIC_GetPriorityGrouping+0x18>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 0307 	and.w	r3, r3, #7
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0b      	blt.n	80049f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4907      	ldr	r1, [pc, #28]	@ (8004a04 <__NVIC_EnableIRQ+0x38>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	@ (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	@ (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	@ 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
         );
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	@ 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff4c 	bl	8004968 <__NVIC_SetPriorityGrouping>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aea:	f7ff ff61 	bl	80049b0 <__NVIC_GetPriorityGrouping>
 8004aee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	6978      	ldr	r0, [r7, #20]
 8004af6:	f7ff ffb1 	bl	8004a5c <NVIC_EncodePriority>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff80 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff54 	bl	80049cc <__NVIC_EnableIRQ>
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e054      	b.n	8004be8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7f5b      	ldrb	r3, [r3, #29]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fe f964 	bl	8002e1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	791b      	ldrb	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10c      	bne.n	8004b7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a22      	ldr	r2, [pc, #136]	@ (8004bf0 <HAL_CRC_Init+0xc4>)
 8004b68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0218 	bic.w	r2, r2, #24
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	e00c      	b.n	8004b96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f834 	bl	8004bf4 <HAL_CRCEx_Polynomial_Set>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e028      	b.n	8004be8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	795b      	ldrb	r3, [r3, #5]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	611a      	str	r2, [r3, #16]
 8004ba8:	e004      	b.n	8004bb4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6912      	ldr	r2, [r2, #16]
 8004bb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	04c11db7 	.word	0x04c11db7

08004bf4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c04:	231f      	movs	r3, #31
 8004c06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
 8004c16:	e063      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c18:	bf00      	nop
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	613a      	str	r2, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_CRCEx_Polynomial_Set+0x44>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b18      	cmp	r3, #24
 8004c3c:	d846      	bhi.n	8004ccc <HAL_CRCEx_Polynomial_Set+0xd8>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004cd3 	.word	0x08004cd3
 8004c48:	08004ccd 	.word	0x08004ccd
 8004c4c:	08004ccd 	.word	0x08004ccd
 8004c50:	08004ccd 	.word	0x08004ccd
 8004c54:	08004ccd 	.word	0x08004ccd
 8004c58:	08004ccd 	.word	0x08004ccd
 8004c5c:	08004ccd 	.word	0x08004ccd
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004cc1 	.word	0x08004cc1
 8004c68:	08004ccd 	.word	0x08004ccd
 8004c6c:	08004ccd 	.word	0x08004ccd
 8004c70:	08004ccd 	.word	0x08004ccd
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004ccd 	.word	0x08004ccd
 8004c84:	08004cb5 	.word	0x08004cb5
 8004c88:	08004ccd 	.word	0x08004ccd
 8004c8c:	08004ccd 	.word	0x08004ccd
 8004c90:	08004ccd 	.word	0x08004ccd
 8004c94:	08004ccd 	.word	0x08004ccd
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004ccd 	.word	0x08004ccd
 8004ca0:	08004ccd 	.word	0x08004ccd
 8004ca4:	08004ca9 	.word	0x08004ca9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d913      	bls.n	8004cd6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004cb2:	e010      	b.n	8004cd6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b07      	cmp	r3, #7
 8004cb8:	d90f      	bls.n	8004cda <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004cbe:	e00c      	b.n	8004cda <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0f      	cmp	r3, #15
 8004cc4:	d90b      	bls.n	8004cde <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004cca:	e008      	b.n	8004cde <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
        break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004cd2:	bf00      	nop
 8004cd4:	e004      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004cde:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 0118 	bic.w	r1, r3, #24
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e069      	b.n	8004df6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fe f894 	bl	8002e5c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <HAL_DCMI_Init+0xf0>)
 8004d56:	400b      	ands	r3, r1
 8004d58:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d6e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d86:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d92:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d9e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d112      	bne.n	8004dd6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7f1b      	ldrb	r3, [r3, #28]
 8004db4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7f5b      	ldrb	r3, [r3, #29]
 8004dba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dbc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7f9b      	ldrb	r3, [r3, #30]
 8004dc2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7fdb      	ldrb	r3, [r3, #31]
 8004dcc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dd2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dd4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 021e 	orr.w	r2, r2, #30
 8004de4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	ffe0f007 	.word	0xffe0f007

08004e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff fae6 	bl	80043e0 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e099      	b.n	8004f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e40:	e00f      	b.n	8004e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e42:	f7ff facd 	bl	80043e0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d908      	bls.n	8004e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e078      	b.n	8004f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e8      	bne.n	8004e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_DMA_Init+0x158>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d107      	bne.n	8004ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d117      	bne.n	8004f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00e      	beq.n	8004f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fab3 	bl	8005474 <DMA_CheckFifoParam>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2240      	movs	r2, #64	@ 0x40
 8004f18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f22:	2301      	movs	r3, #1
 8004f24:	e016      	b.n	8004f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa6a 	bl	8005408 <DMA_CalcBaseAndBitshift>
 8004f34:	4603      	mov	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3c:	223f      	movs	r2, #63	@ 0x3f
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	f010803f 	.word	0xf010803f

08004f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_DMA_Start_IT+0x26>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e048      	b.n	8005018 <HAL_DMA_Start_IT+0xb8>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d137      	bne.n	800500a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f9fc 	bl	80053ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	223f      	movs	r2, #63	@ 0x3f
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0216 	orr.w	r2, r2, #22
 8004fce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e005      	b.n	8005016 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d004      	beq.n	800503e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2280      	movs	r2, #128	@ 0x80
 8005038:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e00c      	b.n	8005058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2205      	movs	r2, #5
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005070:	4b8e      	ldr	r3, [pc, #568]	@ (80052ac <HAL_DMA_IRQHandler+0x248>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a8e      	ldr	r2, [pc, #568]	@ (80052b0 <HAL_DMA_IRQHandler+0x24c>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a9b      	lsrs	r3, r3, #10
 800507c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508e:	2208      	movs	r2, #8
 8005090:	409a      	lsls	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01a      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	2208      	movs	r2, #8
 80050be:	409a      	lsls	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510a:	2204      	movs	r2, #4
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d012      	beq.n	800513c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	2204      	movs	r2, #4
 800512a:	409a      	lsls	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005134:	f043 0204 	orr.w	r2, r3, #4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	2210      	movs	r2, #16
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d043      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03c      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	2210      	movs	r2, #16
 8005160:	409a      	lsls	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d018      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d108      	bne.n	8005194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d024      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	e01f      	b.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	e016      	b.n	80051d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0208 	bic.w	r2, r2, #8
 80051c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	2220      	movs	r2, #32
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808f 	beq.w	8005304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8087 	beq.w	8005304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	2220      	movs	r2, #32
 80051fc:	409a      	lsls	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b05      	cmp	r3, #5
 800520c:	d136      	bne.n	800527c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0216 	bic.w	r2, r2, #22
 800521c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800522c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <HAL_DMA_IRQHandler+0x1da>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0208 	bic.w	r2, r2, #8
 800524c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005252:	223f      	movs	r2, #63	@ 0x3f
 8005254:	409a      	lsls	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d07e      	beq.n	8005370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
        }
        return;
 800527a:	e079      	b.n	8005370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01d      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	2b00      	cmp	r3, #0
 800529e:	d031      	beq.n	8005304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
 80052a8:	e02c      	b.n	8005304 <HAL_DMA_IRQHandler+0x2a0>
 80052aa:	bf00      	nop
 80052ac:	20000000 	.word	0x20000000
 80052b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d023      	beq.n	8005304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
 80052c4:	e01e      	b.n	8005304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10f      	bne.n	80052f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0210 	bic.w	r2, r2, #16
 80052e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	2b00      	cmp	r3, #0
 800530a:	d032      	beq.n	8005372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d022      	beq.n	800535e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2205      	movs	r2, #5
 800531c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3301      	adds	r3, #1
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	429a      	cmp	r2, r3
 800533a:	d307      	bcc.n	800534c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f2      	bne.n	8005330 <HAL_DMA_IRQHandler+0x2cc>
 800534a:	e000      	b.n	800534e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800534c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
 800536e:	e000      	b.n	8005372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005370:	bf00      	nop
    }
  }
}
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d108      	bne.n	80053ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053ea:	e007      	b.n	80053fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	3b10      	subs	r3, #16
 8005418:	4a13      	ldr	r2, [pc, #76]	@ (8005468 <DMA_CalcBaseAndBitshift+0x60>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005422:	4a12      	ldr	r2, [pc, #72]	@ (800546c <DMA_CalcBaseAndBitshift+0x64>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d908      	bls.n	8005448 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <DMA_CalcBaseAndBitshift+0x68>)
 800543e:	4013      	ands	r3, r2
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	659a      	str	r2, [r3, #88]	@ 0x58
 8005446:	e006      	b.n	8005456 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	4b08      	ldr	r3, [pc, #32]	@ (8005470 <DMA_CalcBaseAndBitshift+0x68>)
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	aaaaaaab 	.word	0xaaaaaaab
 800546c:	0801dcfc 	.word	0x0801dcfc
 8005470:	fffffc00 	.word	0xfffffc00

08005474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11f      	bne.n	80054ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d856      	bhi.n	8005542 <DMA_CheckFifoParam+0xce>
 8005494:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <DMA_CheckFifoParam+0x28>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bf 	.word	0x080054bf
 80054a4:	080054ad 	.word	0x080054ad
 80054a8:	08005543 	.word	0x08005543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d046      	beq.n	8005546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054bc:	e043      	b.n	8005546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054c6:	d140      	bne.n	800554a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054cc:	e03d      	b.n	800554a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d6:	d121      	bne.n	800551c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d837      	bhi.n	800554e <DMA_CheckFifoParam+0xda>
 80054de:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <DMA_CheckFifoParam+0x70>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	080054fb 	.word	0x080054fb
 80054ec:	080054f5 	.word	0x080054f5
 80054f0:	0800550d 	.word	0x0800550d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e030      	b.n	800555c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d025      	beq.n	8005552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550a:	e022      	b.n	8005552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005514:	d11f      	bne.n	8005556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800551a:	e01c      	b.n	8005556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d903      	bls.n	800552a <DMA_CheckFifoParam+0xb6>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d003      	beq.n	8005530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005528:	e018      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      break;
 800552e:	e015      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      break;
 8005540:	e00b      	b.n	800555a <DMA_CheckFifoParam+0xe6>
      break;
 8005542:	bf00      	nop
 8005544:	e00a      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;
 8005546:	bf00      	nop
 8005548:	e008      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;
 800554a:	bf00      	nop
 800554c:	e006      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;
 800554e:	bf00      	nop
 8005550:	e004      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;   
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
    }
  } 
  
  return status; 
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop

0800556c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e039      	b.n	80055f2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fd fd20 	bl	8002fd8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	f023 0107 	bic.w	r1, r3, #7
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d2:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <HAL_DMA2D_Init+0x90>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68d1      	ldr	r1, [r2, #12]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	430b      	orrs	r3, r1
 80055e0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	ffffc000 	.word	0xffffc000

08005600 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d026      	beq.n	8005670 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d021      	beq.n	8005670 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800563a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d026      	beq.n	80056c8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d021      	beq.n	80056c8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005692:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2220      	movs	r2, #32
 800569a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a0:	f043 0202 	orr.w	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2204      	movs	r2, #4
 80056ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d026      	beq.n	8005720 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d021      	beq.n	8005720 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2204      	movs	r2, #4
 8005704:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d013      	beq.n	8005752 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005742:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2204      	movs	r2, #4
 800574a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f853 	bl	80057f8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d024      	beq.n	80057a6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01f      	beq.n	80057a6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005774:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2202      	movs	r2, #2
 800577c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01f      	beq.n	80057f0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01a      	beq.n	80057f0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2210      	movs	r2, #16
 80057d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f80e 	bl	800580c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_DMA2D_ConfigLayer+0x20>
 800583c:	2302      	movs	r3, #2
 800583e:	e079      	b.n	8005934 <HAL_DMA2D_ConfigLayer+0x114>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	3318      	adds	r3, #24
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800586a:	4b35      	ldr	r3, [pc, #212]	@ (8005940 <HAL_DMA2D_ConfigLayer+0x120>)
 800586c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d003      	beq.n	800587e <HAL_DMA2D_ConfigLayer+0x5e>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b09      	cmp	r3, #9
 800587c:	d107      	bne.n	800588e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e005      	b.n	800589a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d120      	bne.n	80058e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	ea02 0103 	and.w	r1, r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b0a      	cmp	r3, #10
 80058c8:	d003      	beq.n	80058d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d127      	bne.n	8005922 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
 80058e0:	e01f      	b.n	8005922 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	ea02 0103 	and.w	r1, r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b0a      	cmp	r3, #10
 800590a:	d003      	beq.n	8005914 <HAL_DMA2D_ConfigLayer+0xf4>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b09      	cmp	r3, #9
 8005912:	d106      	bne.n	8005922 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005920:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	ff03000f 	.word	0xff03000f

08005944 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e086      	b.n	8005a64 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2223      	movs	r2, #35	@ 0x23
 8005964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fd fb5b 	bl	8003024 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <HAL_ETH_Init+0x128>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	4a3e      	ldr	r2, [pc, #248]	@ (8005a6c <HAL_ETH_Init+0x128>)
 8005974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005978:	6453      	str	r3, [r2, #68]	@ 0x44
 800597a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a6c <HAL_ETH_Init+0x128>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005986:	4b3a      	ldr	r3, [pc, #232]	@ (8005a70 <HAL_ETH_Init+0x12c>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4a39      	ldr	r2, [pc, #228]	@ (8005a70 <HAL_ETH_Init+0x12c>)
 800598c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005990:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005992:	4b37      	ldr	r3, [pc, #220]	@ (8005a70 <HAL_ETH_Init+0x12c>)
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4935      	ldr	r1, [pc, #212]	@ (8005a70 <HAL_ETH_Init+0x12c>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80059a0:	4b33      	ldr	r3, [pc, #204]	@ (8005a70 <HAL_ETH_Init+0x12c>)
 80059a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059bc:	f7fe fd10 	bl	80043e0 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80059c2:	e011      	b.n	80059e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80059c4:	f7fe fd0c 	bl	80043e0 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80059d2:	d909      	bls.n	80059e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2204      	movs	r2, #4
 80059d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22e0      	movs	r2, #224	@ 0xe0
 80059e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e03d      	b.n	8005a64 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e4      	bne.n	80059c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f97a 	bl	8005cf4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fa25 	bl	8005e50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa7b 	bl	8005f02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	461a      	mov	r2, r3
 8005a12:	2100      	movs	r1, #0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9e3 	bl	8005de0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <HAL_ETH_Init+0x130>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005a4e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40013800 	.word	0x40013800
 8005a74:	00020060 	.word	0x00020060

08005a78 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4b53      	ldr	r3, [pc, #332]	@ (8005bdc <ETH_SetMACConfig+0x164>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	7b9b      	ldrb	r3, [r3, #14]
 8005a96:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	7c12      	ldrb	r2, [r2, #16]
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d102      	bne.n	8005aa6 <ETH_SetMACConfig+0x2e>
 8005aa0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005aa4:	e000      	b.n	8005aa8 <ETH_SetMACConfig+0x30>
 8005aa6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005aa8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	7c52      	ldrb	r2, [r2, #17]
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	d102      	bne.n	8005ab8 <ETH_SetMACConfig+0x40>
 8005ab2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005ab6:	e000      	b.n	8005aba <ETH_SetMACConfig+0x42>
 8005ab8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005aba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	7fdb      	ldrb	r3, [r3, #31]
 8005ac6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005ac8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	7f92      	ldrb	r2, [r2, #30]
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d102      	bne.n	8005ade <ETH_SetMACConfig+0x66>
 8005ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005adc:	e000      	b.n	8005ae0 <ETH_SetMACConfig+0x68>
 8005ade:	2200      	movs	r2, #0
                        macconf->Speed |
 8005ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	7f1b      	ldrb	r3, [r3, #28]
 8005ae6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005ae8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005af6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d102      	bne.n	8005b08 <ETH_SetMACConfig+0x90>
 8005b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b06:	e000      	b.n	8005b0a <ETH_SetMACConfig+0x92>
 8005b08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005b0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	7bdb      	ldrb	r3, [r3, #15]
 8005b10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005b12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005b22:	4313      	orrs	r3, r2
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	f7fe fc5c 	bl	80043f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d101      	bne.n	8005b6e <ETH_SetMACConfig+0xf6>
 8005b6a:	2280      	movs	r2, #128	@ 0x80
 8005b6c:	e000      	b.n	8005b70 <ETH_SetMACConfig+0xf8>
 8005b6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005b70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005b7e:	2a01      	cmp	r2, #1
 8005b80:	d101      	bne.n	8005b86 <ETH_SetMACConfig+0x10e>
 8005b82:	2208      	movs	r2, #8
 8005b84:	e000      	b.n	8005b88 <ETH_SetMACConfig+0x110>
 8005b86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005b88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005b90:	2a01      	cmp	r2, #1
 8005b92:	d101      	bne.n	8005b98 <ETH_SetMACConfig+0x120>
 8005b94:	2204      	movs	r2, #4
 8005b96:	e000      	b.n	8005b9a <ETH_SetMACConfig+0x122>
 8005b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005ba2:	2a01      	cmp	r2, #1
 8005ba4:	d101      	bne.n	8005baa <ETH_SetMACConfig+0x132>
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	e000      	b.n	8005bac <ETH_SetMACConfig+0x134>
 8005baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005bac:	4313      	orrs	r3, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	f7fe fc17 	bl	80043f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	619a      	str	r2, [r3, #24]
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	fd20810f 	.word	0xfd20810f

08005be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf0 <ETH_SetDMAConfig+0x110>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	7b1b      	ldrb	r3, [r3, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <ETH_SetDMAConfig+0x2c>
 8005c06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005c0a:	e000      	b.n	8005c0e <ETH_SetDMAConfig+0x2e>
 8005c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	7b5b      	ldrb	r3, [r3, #13]
 8005c12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005c14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	7f52      	ldrb	r2, [r2, #29]
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d102      	bne.n	8005c24 <ETH_SetDMAConfig+0x44>
 8005c1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c22:	e000      	b.n	8005c26 <ETH_SetDMAConfig+0x46>
 8005c24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005c26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	7b9b      	ldrb	r3, [r3, #14]
 8005c2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005c2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005c34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	7f1b      	ldrb	r3, [r3, #28]
 8005c3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005c3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	7f9b      	ldrb	r3, [r3, #30]
 8005c42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005c44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005c4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005c54:	4313      	orrs	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c64:	461a      	mov	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c76:	2001      	movs	r0, #1
 8005c78:	f7fe fbbe 	bl	80043f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c84:	461a      	mov	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	791b      	ldrb	r3, [r3, #4]
 8005c8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005c94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005c9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005ca0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ca8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005caa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005cb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005cb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	f7fe fb8f 	bl	80043f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	f8de3f23 	.word	0xf8de3f23

08005cf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b0a6      	sub	sp, #152	@ 0x98
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d36:	2300      	movs	r3, #0
 8005d38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005d5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005d62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005d6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fe7f 	bl	8005a78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005daa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005dae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005db0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005db4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005dba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005dca:	f107 0308 	add.w	r3, r7, #8
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ff05 	bl	8005be0 <ETH_SetDMAConfig>
}
 8005dd6:	bf00      	nop
 8005dd8:	3798      	adds	r7, #152	@ 0x98
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3305      	adds	r3, #5
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	3204      	adds	r2, #4
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <ETH_MACAddressConfig+0x68>)
 8005e02:	4413      	add	r3, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	061a      	lsls	r2, r3, #24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3302      	adds	r3, #2
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	041b      	lsls	r3, r3, #16
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	4313      	orrs	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <ETH_MACAddressConfig+0x6c>)
 8005e32:	4413      	add	r3, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6013      	str	r3, [r2, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40028040 	.word	0x40028040
 8005e4c:	40028044 	.word	0x40028044

08005e50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e03e      	b.n	8005edc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68d9      	ldr	r1, [r3, #12]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	440b      	add	r3, r1
 8005e6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	3206      	adds	r2, #6
 8005e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d80c      	bhi.n	8005ec0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68d9      	ldr	r1, [r3, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	e004      	b.n	8005eca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d9bd      	bls.n	8005e5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef4:	611a      	str	r2, [r3, #16]
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e048      	b.n	8005fa2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6919      	ldr	r1, [r3, #16]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	440b      	add	r3, r1
 8005f20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	3212      	adds	r2, #18
 8005f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d80c      	bhi.n	8005f92 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6919      	ldr	r1, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e004      	b.n	8005f9c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d9b3      	bls.n	8005f10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fd2:	60da      	str	r2, [r3, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e175      	b.n	80062ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006000:	2201      	movs	r2, #1
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	429a      	cmp	r2, r3
 800601a:	f040 8164 	bne.w	80062e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d005      	beq.n	8006036 <HAL_GPIO_Init+0x56>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d130      	bne.n	8006098 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	2203      	movs	r2, #3
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4013      	ands	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800606c:	2201      	movs	r2, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 0201 	and.w	r2, r3, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d017      	beq.n	80060d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d123      	bne.n	8006128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	08da      	lsrs	r2, r3, #3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3208      	adds	r2, #8
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	220f      	movs	r2, #15
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	08da      	lsrs	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3208      	adds	r2, #8
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	2203      	movs	r2, #3
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0203 	and.w	r2, r3, #3
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80be 	beq.w	80062e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800616a:	4b66      	ldr	r3, [pc, #408]	@ (8006304 <HAL_GPIO_Init+0x324>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	4a65      	ldr	r2, [pc, #404]	@ (8006304 <HAL_GPIO_Init+0x324>)
 8006170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006174:	6453      	str	r3, [r2, #68]	@ 0x44
 8006176:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_GPIO_Init+0x324>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006182:	4a61      	ldr	r2, [pc, #388]	@ (8006308 <HAL_GPIO_Init+0x328>)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	3302      	adds	r3, #2
 800618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	220f      	movs	r2, #15
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43db      	mvns	r3, r3
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	4013      	ands	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a58      	ldr	r2, [pc, #352]	@ (800630c <HAL_GPIO_Init+0x32c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d037      	beq.n	800621e <HAL_GPIO_Init+0x23e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a57      	ldr	r2, [pc, #348]	@ (8006310 <HAL_GPIO_Init+0x330>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <HAL_GPIO_Init+0x23a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a56      	ldr	r2, [pc, #344]	@ (8006314 <HAL_GPIO_Init+0x334>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d02b      	beq.n	8006216 <HAL_GPIO_Init+0x236>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a55      	ldr	r2, [pc, #340]	@ (8006318 <HAL_GPIO_Init+0x338>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d025      	beq.n	8006212 <HAL_GPIO_Init+0x232>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a54      	ldr	r2, [pc, #336]	@ (800631c <HAL_GPIO_Init+0x33c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01f      	beq.n	800620e <HAL_GPIO_Init+0x22e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a53      	ldr	r2, [pc, #332]	@ (8006320 <HAL_GPIO_Init+0x340>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d019      	beq.n	800620a <HAL_GPIO_Init+0x22a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a52      	ldr	r2, [pc, #328]	@ (8006324 <HAL_GPIO_Init+0x344>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_GPIO_Init+0x226>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a51      	ldr	r2, [pc, #324]	@ (8006328 <HAL_GPIO_Init+0x348>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00d      	beq.n	8006202 <HAL_GPIO_Init+0x222>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a50      	ldr	r2, [pc, #320]	@ (800632c <HAL_GPIO_Init+0x34c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <HAL_GPIO_Init+0x21e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a4f      	ldr	r2, [pc, #316]	@ (8006330 <HAL_GPIO_Init+0x350>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <HAL_GPIO_Init+0x21a>
 80061f6:	2309      	movs	r3, #9
 80061f8:	e012      	b.n	8006220 <HAL_GPIO_Init+0x240>
 80061fa:	230a      	movs	r3, #10
 80061fc:	e010      	b.n	8006220 <HAL_GPIO_Init+0x240>
 80061fe:	2308      	movs	r3, #8
 8006200:	e00e      	b.n	8006220 <HAL_GPIO_Init+0x240>
 8006202:	2307      	movs	r3, #7
 8006204:	e00c      	b.n	8006220 <HAL_GPIO_Init+0x240>
 8006206:	2306      	movs	r3, #6
 8006208:	e00a      	b.n	8006220 <HAL_GPIO_Init+0x240>
 800620a:	2305      	movs	r3, #5
 800620c:	e008      	b.n	8006220 <HAL_GPIO_Init+0x240>
 800620e:	2304      	movs	r3, #4
 8006210:	e006      	b.n	8006220 <HAL_GPIO_Init+0x240>
 8006212:	2303      	movs	r3, #3
 8006214:	e004      	b.n	8006220 <HAL_GPIO_Init+0x240>
 8006216:	2302      	movs	r3, #2
 8006218:	e002      	b.n	8006220 <HAL_GPIO_Init+0x240>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <HAL_GPIO_Init+0x240>
 800621e:	2300      	movs	r3, #0
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	f002 0203 	and.w	r2, r2, #3
 8006226:	0092      	lsls	r2, r2, #2
 8006228:	4093      	lsls	r3, r2
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006230:	4935      	ldr	r1, [pc, #212]	@ (8006308 <HAL_GPIO_Init+0x328>)
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	3302      	adds	r3, #2
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800623e:	4b3d      	ldr	r3, [pc, #244]	@ (8006334 <HAL_GPIO_Init+0x354>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006262:	4a34      	ldr	r2, [pc, #208]	@ (8006334 <HAL_GPIO_Init+0x354>)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006268:	4b32      	ldr	r3, [pc, #200]	@ (8006334 <HAL_GPIO_Init+0x354>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	43db      	mvns	r3, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800628c:	4a29      	ldr	r2, [pc, #164]	@ (8006334 <HAL_GPIO_Init+0x354>)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006292:	4b28      	ldr	r3, [pc, #160]	@ (8006334 <HAL_GPIO_Init+0x354>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006334 <HAL_GPIO_Init+0x354>)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006334 <HAL_GPIO_Init+0x354>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	43db      	mvns	r3, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062e0:	4a14      	ldr	r2, [pc, #80]	@ (8006334 <HAL_GPIO_Init+0x354>)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	f67f ae86 	bls.w	8006000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	3724      	adds	r7, #36	@ 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40023800 	.word	0x40023800
 8006308:	40013800 	.word	0x40013800
 800630c:	40020000 	.word	0x40020000
 8006310:	40020400 	.word	0x40020400
 8006314:	40020800 	.word	0x40020800
 8006318:	40020c00 	.word	0x40020c00
 800631c:	40021000 	.word	0x40021000
 8006320:	40021400 	.word	0x40021400
 8006324:	40021800 	.word	0x40021800
 8006328:	40021c00 	.word	0x40021c00
 800632c:	40022000 	.word	0x40022000
 8006330:	40022400 	.word	0x40022400
 8006334:	40013c00 	.word	0x40013c00

08006338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	887b      	ldrh	r3, [r7, #2]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e001      	b.n	800635a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
 8006374:	4613      	mov	r3, r2
 8006376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006378:	787b      	ldrb	r3, [r7, #1]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006384:	e003      	b.n	800638e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	041a      	lsls	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	619a      	str	r2, [r3, #24]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063a6:	4b08      	ldr	r3, [pc, #32]	@ (80063c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063b2:	4a05      	ldr	r2, [pc, #20]	@ (80063c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f806 	bl	80063cc <HAL_GPIO_EXTI_Callback>
  }
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40013c00 	.word	0x40013c00

080063cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af02      	add	r7, sp, #8
 80063e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e059      	b.n	80064a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f012 fa0e 	bl	8018830 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2203      	movs	r2, #3
 8006418:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006422:	d102      	bne.n	800642a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f00b f90b 	bl	801164a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7c1a      	ldrb	r2, [r3, #16]
 800643c:	f88d 2000 	strb.w	r2, [sp]
 8006440:	3304      	adds	r3, #4
 8006442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006444:	f00b f896 	bl	8011574 <USB_CoreInit>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e026      	b.n	80064a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2101      	movs	r1, #1
 8006460:	4618      	mov	r0, r3
 8006462:	f00b f903 	bl	801166c <USB_SetCurrentMode>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e017      	b.n	80064a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7c1a      	ldrb	r2, [r3, #16]
 8006480:	f88d 2000 	strb.w	r2, [sp]
 8006484:	3304      	adds	r3, #4
 8006486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006488:	f00b faa6 	bl	80119d8 <USB_HostInit>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e004      	b.n	80064a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b08b      	sub	sp, #44	@ 0x2c
 80064b4:	af04      	add	r7, sp, #16
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	70fb      	strb	r3, [r7, #3]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70bb      	strb	r3, [r7, #2]
 80064c6:	4613      	mov	r3, r2
 80064c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80064ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80064cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_HCD_HC_Init+0x2c>
 80064d8:	2302      	movs	r3, #2
 80064da:	e09d      	b.n	8006618 <HAL_HCD_HC_Init+0x168>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	3319      	adds	r3, #25
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80064f8:	78fa      	ldrb	r2, [r7, #3]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	3314      	adds	r3, #20
 8006508:	787a      	ldrb	r2, [r7, #1]
 800650a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	3315      	adds	r3, #21
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006520:	78fa      	ldrb	r2, [r7, #3]
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	3326      	adds	r3, #38	@ 0x26
 8006530:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	78bb      	ldrb	r3, [r7, #2]
 800653a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653e:	b2d8      	uxtb	r0, r3
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	3316      	adds	r3, #22
 800654e:	4602      	mov	r2, r0
 8006550:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fbac 	bl	8006cb4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800655c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da0a      	bge.n	800657a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3317      	adds	r3, #23
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e009      	b.n	800658e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	3317      	adds	r3, #23
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f00b fb4e 	bl	8011c34 <USB_GetHostSpeed>
 8006598:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800659a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d10b      	bne.n	80065ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80065a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <HAL_HCD_HC_Init+0x10a>
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80065b4:	d901      	bls.n	80065ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80065b6:	23bc      	movs	r3, #188	@ 0xbc
 80065b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80065ba:	78fa      	ldrb	r2, [r7, #3]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3318      	adds	r3, #24
 80065ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80065ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	b298      	uxth	r0, r3
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	3328      	adds	r3, #40	@ 0x28
 80065e4:	4602      	mov	r2, r0
 80065e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	787c      	ldrb	r4, [r7, #1]
 80065f2:	78ba      	ldrb	r2, [r7, #2]
 80065f4:	78f9      	ldrb	r1, [r7, #3]
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4623      	mov	r3, r4
 8006606:	f00b fb3d 	bl	8011c84 <USB_HC_Init>
 800660a:	4603      	mov	r3, r0
 800660c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}

08006620 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_HCD_HC_Halt+0x1e>
 800663a:	2302      	movs	r3, #2
 800663c:	e00f      	b.n	800665e <HAL_HCD_HC_Halt+0x3e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f00b fecf 	bl	80123f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4603      	mov	r3, r0
 8006678:	70fb      	strb	r3, [r7, #3]
 800667a:	460b      	mov	r3, r1
 800667c:	70bb      	strb	r3, [r7, #2]
 800667e:	4613      	mov	r3, r2
 8006680:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	1a9b      	subs	r3, r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	3317      	adds	r3, #23
 8006692:	78ba      	ldrb	r2, [r7, #2]
 8006694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3326      	adds	r3, #38	@ 0x26
 80066a6:	787a      	ldrb	r2, [r7, #1]
 80066a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80066aa:	7c3b      	ldrb	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	332a      	adds	r3, #42	@ 0x2a
 80066c0:	2203      	movs	r2, #3
 80066c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	3319      	adds	r3, #25
 80066d4:	7f3a      	ldrb	r2, [r7, #28]
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e009      	b.n	80066ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	332a      	adds	r3, #42	@ 0x2a
 80066ea:	2202      	movs	r2, #2
 80066ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80066ee:	787b      	ldrb	r3, [r7, #1]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	f200 8102 	bhi.w	80068fa <HAL_HCD_HC_SubmitRequest+0x292>
 80066f6:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	080068e5 	.word	0x080068e5
 8006704:	080067d1 	.word	0x080067d1
 8006708:	0800685b 	.word	0x0800685b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800670c:	7c3b      	ldrb	r3, [r7, #16]
 800670e:	2b01      	cmp	r3, #1
 8006710:	f040 80f5 	bne.w	80068fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006714:	78bb      	ldrb	r3, [r7, #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d12d      	bne.n	8006776 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800671a:	8b3b      	ldrh	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	333d      	adds	r3, #61	@ 0x3d
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	333d      	adds	r3, #61	@ 0x3d
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	332a      	adds	r3, #42	@ 0x2a
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800675e:	e0ce      	b.n	80068fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	332a      	adds	r3, #42	@ 0x2a
 8006770:	2202      	movs	r2, #2
 8006772:	701a      	strb	r2, [r3, #0]
      break;
 8006774:	e0c3      	b.n	80068fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	331a      	adds	r3, #26
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	f040 80b8 	bne.w	80068fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	333c      	adds	r3, #60	@ 0x3c
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	1a9b      	subs	r3, r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	332a      	adds	r3, #42	@ 0x2a
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
      break;
 80067b8:	e0a1      	b.n	80068fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	332a      	adds	r3, #42	@ 0x2a
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
      break;
 80067ce:	e096      	b.n	80068fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80067d0:	78bb      	ldrb	r3, [r7, #2]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d120      	bne.n	8006818 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	333d      	adds	r3, #61	@ 0x3d
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	332a      	adds	r3, #42	@ 0x2a
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006800:	e07e      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	332a      	adds	r3, #42	@ 0x2a
 8006812:	2202      	movs	r2, #2
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e073      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	333c      	adds	r3, #60	@ 0x3c
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	332a      	adds	r3, #42	@ 0x2a
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
      break;
 8006842:	e05d      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	332a      	adds	r3, #42	@ 0x2a
 8006854:	2202      	movs	r2, #2
 8006856:	701a      	strb	r2, [r3, #0]
      break;
 8006858:	e052      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800685a:	78bb      	ldrb	r3, [r7, #2]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d120      	bne.n	80068a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	333d      	adds	r3, #61	@ 0x3d
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	332a      	adds	r3, #42	@ 0x2a
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800688a:	e039      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	332a      	adds	r3, #42	@ 0x2a
 800689c:	2202      	movs	r2, #2
 800689e:	701a      	strb	r2, [r3, #0]
      break;
 80068a0:	e02e      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	333c      	adds	r3, #60	@ 0x3c
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	332a      	adds	r3, #42	@ 0x2a
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
      break;
 80068cc:	e018      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	332a      	adds	r3, #42	@ 0x2a
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
      break;
 80068e2:	e00d      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	332a      	adds	r3, #42	@ 0x2a
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
      break;
 80068f8:	e002      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80068fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	332c      	adds	r3, #44	@ 0x2c
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	8b39      	ldrh	r1, [r7, #24]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4403      	add	r3, r0
 8006924:	3334      	adds	r3, #52	@ 0x34
 8006926:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	334c      	adds	r3, #76	@ 0x4c
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	3338      	adds	r3, #56	@ 0x38
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	3315      	adds	r3, #21
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	334d      	adds	r3, #77	@ 0x4d
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	4613      	mov	r3, r2
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	3310      	adds	r3, #16
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	799b      	ldrb	r3, [r3, #6]
 8006992:	461a      	mov	r2, r3
 8006994:	f00b faa2 	bl	8011edc <USB_HC_StartXfer>
 8006998:	4603      	mov	r3, r0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop

080069a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f00a ffcc 	bl	8011958 <USB_GetMode>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	f040 80fb 	bne.w	8006bbe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f00a ff8f 	bl	80118f0 <USB_ReadInterrupts>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80f1 	beq.w	8006bbc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f00a ff86 	bl	80118f0 <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ee:	d104      	bne.n	80069fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80069f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f00a ff76 	bl	80118f0 <USB_ReadInterrupts>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0e:	d104      	bne.n	8006a1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f00a ff66 	bl	80118f0 <USB_ReadInterrupts>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a2e:	d104      	bne.n	8006a3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f00a ff56 	bl	80118f0 <USB_ReadInterrupts>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d103      	bne.n	8006a56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2202      	movs	r2, #2
 8006a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f00a ff48 	bl	80118f0 <USB_ReadInterrupts>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6a:	d120      	bne.n	8006aae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006a74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d113      	bne.n	8006aae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a86:	2110      	movs	r1, #16
 8006a88:	6938      	ldr	r0, [r7, #16]
 8006a8a:	f00a fe3b 	bl	8011704 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f00a fe6a 	bl	8011768 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7a5b      	ldrb	r3, [r3, #9]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d105      	bne.n	8006aa8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f00b f850 	bl	8011b48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f011 ff33 	bl	8018914 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f00a ff1c 	bl	80118f0 <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ac2:	d102      	bne.n	8006aca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fd17 	bl	80084f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f00a ff0e 	bl	80118f0 <USB_ReadInterrupts>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d106      	bne.n	8006aec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f011 fefc 	bl	80188dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f00a fefd 	bl	80118f0 <USB_ReadInterrupts>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b00:	d139      	bne.n	8006b76 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f00b fc62 	bl	80123d0 <USB_HC_ReadInterrupt>
 8006b0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e025      	b.n	8006b60 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b3e:	d106      	bne.n	8006b4e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8e9 	bl	8006d1e <HCD_HC_IN_IRQHandler>
 8006b4c:	e005      	b.n	8006b5a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 ff4b 	bl	80079f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	795b      	ldrb	r3, [r3, #5]
 8006b64:	461a      	mov	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d3d3      	bcc.n	8006b14 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f00a feb8 	bl	80118f0 <USB_ReadInterrupts>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d101      	bne.n	8006b8e <HAL_HCD_IRQHandler+0x1ea>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <HAL_HCD_IRQHandler+0x1ec>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d014      	beq.n	8006bbe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0210 	bic.w	r2, r2, #16
 8006ba2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fbc8 	bl	800833a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0210 	orr.w	r2, r2, #16
 8006bb8:	619a      	str	r2, [r3, #24]
 8006bba:	e000      	b.n	8006bbe <HAL_HCD_IRQHandler+0x21a>
      return;
 8006bbc:	bf00      	nop
    }
  }
}
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_HCD_Start+0x16>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e013      	b.n	8006c02 <HAL_HCD_Start+0x3e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2101      	movs	r1, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f00a ffea 	bl	8011bc2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f00a fd18 	bl	8011628 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_HCD_Stop+0x16>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e00d      	b.n	8006c3c <HAL_HCD_Stop+0x32>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00b fd3d 	bl	80126ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	334c      	adds	r3, #76	@ 0x4c
 8006c60:	781b      	ldrb	r3, [r3, #0]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3338      	adds	r3, #56	@ 0x38
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f00a ffdc 	bl	8011c62 <USB_GetCurrentFrame>
 8006caa:	4603      	mov	r3, r0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	331a      	adds	r3, #26
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	331b      	adds	r3, #27
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4613      	mov	r3, r2
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3325      	adds	r3, #37	@ 0x25
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3324      	adds	r3, #36	@ 0x24
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f00a fdea 	bl	8011916 <USB_ReadChInterrupts>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d11a      	bne.n	8006d82 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	334d      	adds	r3, #77	@ 0x4d
 8006d6e:	2207      	movs	r2, #7
 8006d70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f00b fb39 	bl	80123f2 <USB_HC_Halt>
 8006d80:	e09e      	b.n	8006ec0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f00a fdc3 	bl	8011916 <USB_ReadChInterrupts>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9a:	d11b      	bne.n	8006dd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da8:	461a      	mov	r2, r3
 8006daa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	334d      	adds	r3, #77	@ 0x4d
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f00b fb10 	bl	80123f2 <USB_HC_Halt>
 8006dd2:	e075      	b.n	8006ec0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f00a fd9a 	bl	8011916 <USB_ReadChInterrupts>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d11a      	bne.n	8006e22 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	334d      	adds	r3, #77	@ 0x4d
 8006e0e:	2206      	movs	r2, #6
 8006e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f00b fae9 	bl	80123f2 <USB_HC_Halt>
 8006e20:	e04e      	b.n	8006ec0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f00a fd73 	bl	8011916 <USB_ReadChInterrupts>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3a:	d11b      	bne.n	8006e74 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	334d      	adds	r3, #77	@ 0x4d
 8006e60:	2209      	movs	r2, #9
 8006e62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f00b fac0 	bl	80123f2 <USB_HC_Halt>
 8006e72:	e025      	b.n	8006ec0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f00a fd4a 	bl	8011916 <USB_ReadChInterrupts>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d119      	bne.n	8006ec0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2380      	movs	r3, #128	@ 0x80
 8006e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	334d      	adds	r3, #77	@ 0x4d
 8006eae:	2207      	movs	r2, #7
 8006eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f00b fa99 	bl	80123f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f00a fd24 	bl	8011916 <USB_ReadChInterrupts>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed8:	d112      	bne.n	8006f00 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f00b fa85 	bl	80123f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006efa:	6093      	str	r3, [r2, #8]
 8006efc:	f000 bd75 	b.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f00a fd04 	bl	8011916 <USB_ReadChInterrupts>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	f040 8128 	bne.w	800716a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f26:	461a      	mov	r2, r3
 8006f28:	2320      	movs	r3, #32
 8006f2a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4613      	mov	r3, r2
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	331b      	adds	r3, #27
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d119      	bne.n	8006f76 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006f42:	78fa      	ldrb	r2, [r7, #3]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	331b      	adds	r3, #27
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f74:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	799b      	ldrb	r3, [r3, #6]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01b      	beq.n	8006fb6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3330      	adds	r3, #48	@ 0x30
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	1ac9      	subs	r1, r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4403      	add	r3, r0
 8006fb2:	3338      	adds	r3, #56	@ 0x38
 8006fb4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	334d      	adds	r3, #77	@ 0x4d
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	3344      	adds	r3, #68	@ 0x44
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	2301      	movs	r3, #1
 8006fee:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3326      	adds	r3, #38	@ 0x26
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3326      	adds	r3, #38	@ 0x26
 8007016:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007018:	2b02      	cmp	r3, #2
 800701a:	d110      	bne.n	800703e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f00b f9e4 	bl	80123f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4413      	add	r3, r2
 8007032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007036:	461a      	mov	r2, r3
 8007038:	2310      	movs	r3, #16
 800703a:	6093      	str	r3, [r2, #8]
 800703c:	e03d      	b.n	80070ba <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	3326      	adds	r3, #38	@ 0x26
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d00a      	beq.n	800706a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3326      	adds	r3, #38	@ 0x26
 8007064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007066:	2b01      	cmp	r3, #1
 8007068:	d127      	bne.n	80070ba <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	440a      	add	r2, r1
 8007080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007084:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007088:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	334c      	adds	r3, #76	@ 0x4c
 800709a:	2201      	movs	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	334c      	adds	r3, #76	@ 0x4c
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f011 fc3b 	bl	8018930 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	799b      	ldrb	r3, [r3, #6]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d13b      	bne.n	800713a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80070c2:	78fa      	ldrb	r2, [r7, #3]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	3338      	adds	r3, #56	@ 0x38
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4403      	add	r3, r0
 80070e2:	3328      	adds	r3, #40	@ 0x28
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	440b      	add	r3, r1
 80070e8:	1e59      	subs	r1, r3, #1
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4403      	add	r3, r0
 80070f8:	3328      	adds	r3, #40	@ 0x28
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8470 	beq.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	333c      	adds	r3, #60	@ 0x3c
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	f083 0301 	eor.w	r3, r3, #1
 8007122:	b2d8      	uxtb	r0, r3
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	333c      	adds	r3, #60	@ 0x3c
 8007132:	4602      	mov	r2, r0
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	f000 bc58 	b.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	333c      	adds	r3, #60	@ 0x3c
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	f083 0301 	eor.w	r3, r3, #1
 8007152:	b2d8      	uxtb	r0, r3
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	333c      	adds	r3, #60	@ 0x3c
 8007162:	4602      	mov	r2, r0
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	f000 bc40 	b.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f00a fbcf 	bl	8011916 <USB_ReadChInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b20      	cmp	r3, #32
 8007180:	d131      	bne.n	80071e6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	4413      	add	r3, r2
 800718a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718e:	461a      	mov	r2, r3
 8007190:	2320      	movs	r3, #32
 8007192:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007194:	78fa      	ldrb	r2, [r7, #3]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	331a      	adds	r3, #26
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f040 841f 	bne.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	331b      	adds	r3, #27
 80071bc:	2201      	movs	r2, #1
 80071be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	334d      	adds	r3, #77	@ 0x4d
 80071d0:	2203      	movs	r2, #3
 80071d2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	4611      	mov	r1, r2
 80071dc:	4618      	mov	r0, r3
 80071de:	f00b f908 	bl	80123f2 <USB_HC_Halt>
 80071e2:	f000 bc02 	b.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f00a fb91 	bl	8011916 <USB_ReadChInterrupts>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	f040 8305 	bne.w	800780a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720c:	461a      	mov	r2, r3
 800720e:	2302      	movs	r3, #2
 8007210:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	334d      	adds	r3, #77	@ 0x4d
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d114      	bne.n	8007252 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	334d      	adds	r3, #77	@ 0x4d
 8007238:	2202      	movs	r2, #2
 800723a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	334c      	adds	r3, #76	@ 0x4c
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e2cc      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	334d      	adds	r3, #77	@ 0x4d
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d114      	bne.n	8007292 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	334d      	adds	r3, #77	@ 0x4d
 8007278:	2202      	movs	r2, #2
 800727a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	334c      	adds	r3, #76	@ 0x4c
 800728c:	2205      	movs	r2, #5
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e2ac      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	334d      	adds	r3, #77	@ 0x4d
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b07      	cmp	r3, #7
 80072a6:	d00b      	beq.n	80072c0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80072a8:	78fa      	ldrb	r2, [r7, #3]
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	1a9b      	subs	r3, r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	334d      	adds	r3, #77	@ 0x4d
 80072b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	f040 80a6 	bne.w	800740c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	334d      	adds	r3, #77	@ 0x4d
 80072d0:	2202      	movs	r2, #2
 80072d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3344      	adds	r3, #68	@ 0x44
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4403      	add	r3, r0
 80072f4:	3344      	adds	r3, #68	@ 0x44
 80072f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3344      	adds	r3, #68	@ 0x44
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d943      	bls.n	8007396 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3344      	adds	r3, #68	@ 0x44
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	331a      	adds	r3, #26
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d123      	bne.n	8007380 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	331b      	adds	r3, #27
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	331c      	adds	r3, #28
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	4413      	add	r3, r2
 8007368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	440a      	add	r2, r1
 8007376:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800737a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800737e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	334c      	adds	r3, #76	@ 0x4c
 8007390:	2204      	movs	r2, #4
 8007392:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007394:	e229      	b.n	80077ea <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	334c      	adds	r3, #76	@ 0x4c
 80073a6:	2202      	movs	r2, #2
 80073a8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	3326      	adds	r3, #38	@ 0x26
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	3326      	adds	r3, #38	@ 0x26
 80073d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	f040 8209 	bne.w	80077ea <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007404:	461a      	mov	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800740a:	e1ee      	b.n	80077ea <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	334d      	adds	r3, #77	@ 0x4d
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b05      	cmp	r3, #5
 8007420:	f040 80c8 	bne.w	80075b4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	334d      	adds	r3, #77	@ 0x4d
 8007434:	2202      	movs	r2, #2
 8007436:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	331b      	adds	r3, #27
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b01      	cmp	r3, #1
 800744c:	f040 81ce 	bne.w	80077ec <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	3326      	adds	r3, #38	@ 0x26
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d16b      	bne.n	800753e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3348      	adds	r3, #72	@ 0x48
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	1c59      	adds	r1, r3, #1
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4613      	mov	r3, r2
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	1a9b      	subs	r3, r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4403      	add	r3, r0
 8007486:	3348      	adds	r3, #72	@ 0x48
 8007488:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	4613      	mov	r3, r2
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	3348      	adds	r3, #72	@ 0x48
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d943      	bls.n	8007528 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80074a0:	78fa      	ldrb	r2, [r7, #3]
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	4613      	mov	r3, r2
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	3348      	adds	r3, #72	@ 0x48
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	331b      	adds	r3, #27
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	3344      	adds	r3, #68	@ 0x44
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d809      	bhi.n	80074f2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80074de:	78fa      	ldrb	r2, [r7, #3]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	331c      	adds	r3, #28
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	440a      	add	r2, r1
 8007508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800750c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007510:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	334c      	adds	r3, #76	@ 0x4c
 8007522:	2204      	movs	r2, #4
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e014      	b.n	8007552 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	334c      	adds	r3, #76	@ 0x4c
 8007538:	2202      	movs	r2, #2
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e009      	b.n	8007552 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	334c      	adds	r3, #76	@ 0x4c
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3326      	adds	r3, #38	@ 0x26
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007568:	78fa      	ldrb	r2, [r7, #3]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3326      	adds	r3, #38	@ 0x26
 8007578:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800757a:	2b02      	cmp	r3, #2
 800757c:	f040 8136 	bne.w	80077ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007596:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800759e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ac:	461a      	mov	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e11b      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	334d      	adds	r3, #77	@ 0x4d
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f040 8081 	bne.w	80076ce <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	334d      	adds	r3, #77	@ 0x4d
 80075dc:	2202      	movs	r2, #2
 80075de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	331b      	adds	r3, #27
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	f040 80fa 	bne.w	80077ec <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	334c      	adds	r3, #76	@ 0x4c
 8007608:	2202      	movs	r2, #2
 800760a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4413      	add	r3, r2
 8007614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	440a      	add	r2, r1
 8007622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800762a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	440a      	add	r2, r1
 8007642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800764a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	0151      	lsls	r1, r2, #5
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	440a      	add	r2, r1
 8007662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007666:	f023 0320 	bic.w	r3, r3, #32
 800766a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3326      	adds	r3, #38	@ 0x26
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	3326      	adds	r3, #38	@ 0x26
 8007692:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007694:	2b02      	cmp	r3, #2
 8007696:	f040 80a9 	bne.w	80077ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c6:	461a      	mov	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	e08e      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	334d      	adds	r3, #77	@ 0x4d
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d143      	bne.n	800776c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	334d      	adds	r3, #77	@ 0x4d
 80076f4:	2202      	movs	r2, #2
 80076f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	334c      	adds	r3, #76	@ 0x4c
 8007708:	2202      	movs	r2, #2
 800770a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	3326      	adds	r3, #38	@ 0x26
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	3326      	adds	r3, #38	@ 0x26
 8007732:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007734:	2b02      	cmp	r3, #2
 8007736:	d159      	bne.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4413      	add	r3, r2
 8007740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800774e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007756:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007764:	461a      	mov	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e03f      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800776c:	78fa      	ldrb	r2, [r7, #3]
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4613      	mov	r3, r2
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	440b      	add	r3, r1
 800777a:	334d      	adds	r3, #77	@ 0x4d
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b08      	cmp	r3, #8
 8007780:	d126      	bne.n	80077d0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	440b      	add	r3, r1
 8007790:	334d      	adds	r3, #77	@ 0x4d
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	3344      	adds	r3, #68	@ 0x44
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	1c59      	adds	r1, r3, #1
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	1a9b      	subs	r3, r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4403      	add	r3, r0
 80077b6:	3344      	adds	r3, #68	@ 0x44
 80077b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	334c      	adds	r3, #76	@ 0x4c
 80077ca:	2204      	movs	r2, #4
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e00d      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	334d      	adds	r3, #77	@ 0x4d
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	f000 8100 	beq.w	80079e8 <HCD_HC_IN_IRQHandler+0xcca>
 80077e8:	e000      	b.n	80077ec <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80077ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	334c      	adds	r3, #76	@ 0x4c
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f011 f894 	bl	8018930 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007808:	e0ef      	b.n	80079ea <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f00a f87f 	bl	8011916 <USB_ReadChInterrupts>
 8007818:	4603      	mov	r3, r0
 800781a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781e:	2b40      	cmp	r3, #64	@ 0x40
 8007820:	d12f      	bne.n	8007882 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782e:	461a      	mov	r2, r3
 8007830:	2340      	movs	r3, #64	@ 0x40
 8007832:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	334d      	adds	r3, #77	@ 0x4d
 8007844:	2205      	movs	r2, #5
 8007846:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	331a      	adds	r3, #26
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	3344      	adds	r3, #68	@ 0x44
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f00a fdb9 	bl	80123f2 <USB_HC_Halt>
 8007880:	e0b3      	b.n	80079ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f00a f843 	bl	8011916 <USB_ReadChInterrupts>
 8007890:	4603      	mov	r3, r0
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b10      	cmp	r3, #16
 8007898:	f040 80a7 	bne.w	80079ea <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	3326      	adds	r3, #38	@ 0x26
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d11b      	bne.n	80078ea <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	3344      	adds	r3, #68	@ 0x44
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	334d      	adds	r3, #77	@ 0x4d
 80078d6:	2204      	movs	r2, #4
 80078d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f00a fd85 	bl	80123f2 <USB_HC_Halt>
 80078e8:	e03f      	b.n	800796a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3326      	adds	r3, #38	@ 0x26
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	3326      	adds	r3, #38	@ 0x26
 8007910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007912:	2b02      	cmp	r3, #2
 8007914:	d129      	bne.n	800796a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3344      	adds	r3, #68	@ 0x44
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	799b      	ldrb	r3, [r3, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HCD_HC_IN_IRQHandler+0xc2a>
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	331b      	adds	r3, #27
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d110      	bne.n	800796a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	4613      	mov	r3, r2
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	334d      	adds	r3, #77	@ 0x4d
 8007958:	2204      	movs	r2, #4
 800795a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f00a fd44 	bl	80123f2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	331b      	adds	r3, #27
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d129      	bne.n	80079d4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007980:	78fa      	ldrb	r2, [r7, #3]
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	331b      	adds	r3, #27
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ce:	f043 0320 	orr.w	r3, r3, #32
 80079d2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e0:	461a      	mov	r2, r3
 80079e2:	2310      	movs	r3, #16
 80079e4:	6093      	str	r3, [r2, #8]
 80079e6:	e000      	b.n	80079ea <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80079e8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f009 ff81 	bl	8011916 <USB_ReadChInterrupts>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d11b      	bne.n	8007a56 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	334d      	adds	r3, #77	@ 0x4d
 8007a40:	2207      	movs	r2, #7
 8007a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00a fcd0 	bl	80123f2 <USB_HC_Halt>
 8007a52:	f000 bc6f 	b.w	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f009 ff59 	bl	8011916 <USB_ReadChInterrupts>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	f040 8082 	bne.w	8007b74 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2320      	movs	r3, #32
 8007a80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3319      	adds	r3, #25
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d124      	bne.n	8007ae2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3319      	adds	r3, #25
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	334c      	adds	r3, #76	@ 0x4c
 8007abc:	2202      	movs	r2, #2
 8007abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	334d      	adds	r3, #77	@ 0x4d
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f00a fc88 	bl	80123f2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	331a      	adds	r3, #26
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 841d 	bne.w	8008334 <HCD_HC_OUT_IRQHandler+0x944>
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	331b      	adds	r3, #27
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 8411 	bne.w	8008334 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	3326      	adds	r3, #38	@ 0x26
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d009      	beq.n	8007b3c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	1a9b      	subs	r3, r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	331b      	adds	r3, #27
 8007b38:	2201      	movs	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	334d      	adds	r3, #77	@ 0x4d
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f00a fc4a 	bl	80123f2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3344      	adds	r3, #68	@ 0x44
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e3df      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f009 feca 	bl	8011916 <USB_ReadChInterrupts>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8c:	d111      	bne.n	8007bb2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ba0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f00a fc21 	bl	80123f2 <USB_HC_Halt>
 8007bb0:	e3c0      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f009 feab 	bl	8011916 <USB_ReadChInterrupts>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d168      	bne.n	8007c9c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3344      	adds	r3, #68	@ 0x44
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f009 fe95 	bl	8011916 <USB_ReadChInterrupts>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d112      	bne.n	8007c1c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3319      	adds	r3, #25
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c16:	461a      	mov	r2, r3
 8007c18:	2340      	movs	r3, #64	@ 0x40
 8007c1a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	331b      	adds	r3, #27
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	331b      	adds	r3, #27
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c64:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c72:	461a      	mov	r2, r3
 8007c74:	2301      	movs	r3, #1
 8007c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	334d      	adds	r3, #77	@ 0x4d
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	78fa      	ldrb	r2, [r7, #3]
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f00a fbac 	bl	80123f2 <USB_HC_Halt>
 8007c9a:	e34b      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f009 fe36 	bl	8011916 <USB_ReadChInterrupts>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	d139      	bne.n	8007d28 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	334d      	adds	r3, #77	@ 0x4d
 8007cc4:	2205      	movs	r2, #5
 8007cc6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	331a      	adds	r3, #26
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	3319      	adds	r3, #25
 8007cee:	2201      	movs	r2, #1
 8007cf0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	3344      	adds	r3, #68	@ 0x44
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	78fa      	ldrb	r2, [r7, #3]
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00a fb6f 	bl	80123f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d20:	461a      	mov	r2, r3
 8007d22:	2340      	movs	r3, #64	@ 0x40
 8007d24:	6093      	str	r3, [r2, #8]
 8007d26:	e305      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f009 fdf0 	bl	8011916 <USB_ReadChInterrupts>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d11a      	bne.n	8007d76 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2308      	movs	r3, #8
 8007d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	334d      	adds	r3, #77	@ 0x4d
 8007d62:	2206      	movs	r2, #6
 8007d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	78fa      	ldrb	r2, [r7, #3]
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f00a fb3f 	bl	80123f2 <USB_HC_Halt>
 8007d74:	e2de      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f009 fdc9 	bl	8011916 <USB_ReadChInterrupts>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d144      	bne.n	8007e18 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3344      	adds	r3, #68	@ 0x44
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	334d      	adds	r3, #77	@ 0x4d
 8007db2:	2204      	movs	r2, #4
 8007db4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3319      	adds	r3, #25
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d114      	bne.n	8007df6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	3318      	adds	r3, #24
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3319      	adds	r3, #25
 8007df2:	2201      	movs	r2, #1
 8007df4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f00a faf7 	bl	80123f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e10:	461a      	mov	r2, r3
 8007e12:	2310      	movs	r3, #16
 8007e14:	6093      	str	r3, [r2, #8]
 8007e16:	e28d      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f009 fd78 	bl	8011916 <USB_ReadChInterrupts>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2c:	2b80      	cmp	r3, #128	@ 0x80
 8007e2e:	d169      	bne.n	8007f04 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	799b      	ldrb	r3, [r3, #6]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d111      	bne.n	8007e5c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	334d      	adds	r3, #77	@ 0x4d
 8007e48:	2207      	movs	r2, #7
 8007e4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00a facc 	bl	80123f2 <USB_HC_Halt>
 8007e5a:	e049      	b.n	8007ef0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	3344      	adds	r3, #68	@ 0x44
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4403      	add	r3, r0
 8007e7c:	3344      	adds	r3, #68	@ 0x44
 8007e7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	4613      	mov	r3, r2
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	3344      	adds	r3, #68	@ 0x44
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d922      	bls.n	8007edc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3344      	adds	r3, #68	@ 0x44
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	334c      	adds	r3, #76	@ 0x4c
 8007eba:	2204      	movs	r2, #4
 8007ebc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	334c      	adds	r3, #76	@ 0x4c
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f010 fd2b 	bl	8018930 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007eda:	e009      	b.n	8007ef0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	334c      	adds	r3, #76	@ 0x4c
 8007eec:	2202      	movs	r2, #2
 8007eee:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efc:	461a      	mov	r2, r3
 8007efe:	2380      	movs	r3, #128	@ 0x80
 8007f00:	6093      	str	r3, [r2, #8]
 8007f02:	e217      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f009 fd02 	bl	8011916 <USB_ReadChInterrupts>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1c:	d11b      	bne.n	8007f56 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	334d      	adds	r3, #77	@ 0x4d
 8007f2e:	2209      	movs	r2, #9
 8007f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f00a fa59 	bl	80123f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f52:	6093      	str	r3, [r2, #8]
 8007f54:	e1ee      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f009 fcd9 	bl	8011916 <USB_ReadChInterrupts>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	f040 81df 	bne.w	800832e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	2302      	movs	r3, #2
 8007f80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007f82:	78fa      	ldrb	r2, [r7, #3]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	334d      	adds	r3, #77	@ 0x4d
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	f040 8093 	bne.w	80080c0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	334d      	adds	r3, #77	@ 0x4d
 8007faa:	2202      	movs	r2, #2
 8007fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	334c      	adds	r3, #76	@ 0x4c
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3326      	adds	r3, #38	@ 0x26
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d00b      	beq.n	8007ff0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3326      	adds	r3, #38	@ 0x26
 8007fe8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	f040 8190 	bne.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	799b      	ldrb	r3, [r3, #6]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d115      	bne.n	8008024 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	333d      	adds	r3, #61	@ 0x3d
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	f083 0301 	eor.w	r3, r3, #1
 8008010:	b2d8      	uxtb	r0, r3
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	333d      	adds	r3, #61	@ 0x3d
 8008020:	4602      	mov	r2, r0
 8008022:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	799b      	ldrb	r3, [r3, #6]
 8008028:	2b01      	cmp	r3, #1
 800802a:	f040 8171 	bne.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	3334      	adds	r3, #52	@ 0x34
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8165 	beq.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	3334      	adds	r3, #52	@ 0x34
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4613      	mov	r3, r2
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	1a9b      	subs	r3, r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4403      	add	r3, r0
 8008066:	3328      	adds	r3, #40	@ 0x28
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	440b      	add	r3, r1
 800806c:	1e59      	subs	r1, r3, #1
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4403      	add	r3, r0
 800807c:	3328      	adds	r3, #40	@ 0x28
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	fbb1 f3f3 	udiv	r3, r1, r3
 8008084:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 813f 	beq.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	333d      	adds	r3, #61	@ 0x3d
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	78fa      	ldrb	r2, [r7, #3]
 80080a6:	f083 0301 	eor.w	r3, r3, #1
 80080aa:	b2d8      	uxtb	r0, r3
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	333d      	adds	r3, #61	@ 0x3d
 80080ba:	4602      	mov	r2, r0
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e127      	b.n	8008310 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	334d      	adds	r3, #77	@ 0x4d
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d120      	bne.n	8008118 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	334d      	adds	r3, #77	@ 0x4d
 80080e6:	2202      	movs	r2, #2
 80080e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	331b      	adds	r3, #27
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	f040 8107 	bne.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4613      	mov	r3, r2
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	334c      	adds	r3, #76	@ 0x4c
 8008112:	2202      	movs	r2, #2
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e0fb      	b.n	8008310 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	334d      	adds	r3, #77	@ 0x4d
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b04      	cmp	r3, #4
 800812c:	d13a      	bne.n	80081a4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	4613      	mov	r3, r2
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	334d      	adds	r3, #77	@ 0x4d
 800813e:	2202      	movs	r2, #2
 8008140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	334c      	adds	r3, #76	@ 0x4c
 8008152:	2202      	movs	r2, #2
 8008154:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	331b      	adds	r3, #27
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 80d1 	bne.w	8008310 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	331b      	adds	r3, #27
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	440a      	add	r2, r1
 8008198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800819c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	e0b5      	b.n	8008310 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	334d      	adds	r3, #77	@ 0x4d
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d114      	bne.n	80081e4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	334d      	adds	r3, #77	@ 0x4d
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	334c      	adds	r3, #76	@ 0x4c
 80081de:	2202      	movs	r2, #2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e095      	b.n	8008310 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	334d      	adds	r3, #77	@ 0x4d
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b06      	cmp	r3, #6
 80081f8:	d114      	bne.n	8008224 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	334d      	adds	r3, #77	@ 0x4d
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	334c      	adds	r3, #76	@ 0x4c
 800821e:	2205      	movs	r2, #5
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e075      	b.n	8008310 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	334d      	adds	r3, #77	@ 0x4d
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b07      	cmp	r3, #7
 8008238:	d00a      	beq.n	8008250 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	4613      	mov	r3, r2
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	334d      	adds	r3, #77	@ 0x4d
 800824a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800824c:	2b09      	cmp	r3, #9
 800824e:	d170      	bne.n	8008332 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4613      	mov	r3, r2
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	334d      	adds	r3, #77	@ 0x4d
 8008260:	2202      	movs	r2, #2
 8008262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	3344      	adds	r3, #68	@ 0x44
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	1c59      	adds	r1, r3, #1
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4403      	add	r3, r0
 8008284:	3344      	adds	r3, #68	@ 0x44
 8008286:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3344      	adds	r3, #68	@ 0x44
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d914      	bls.n	80082c8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	3344      	adds	r3, #68	@ 0x44
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	334c      	adds	r3, #76	@ 0x4c
 80082c2:	2204      	movs	r2, #4
 80082c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80082c6:	e022      	b.n	800830e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	334c      	adds	r3, #76	@ 0x4c
 80082d8:	2202      	movs	r2, #2
 80082da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008308:	461a      	mov	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800830e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	334c      	adds	r3, #76	@ 0x4c
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f010 fb02 	bl	8018930 <HAL_HCD_HC_NotifyURBChange_Callback>
 800832c:	e002      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8008332:	bf00      	nop
  }
}
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b08a      	sub	sp, #40	@ 0x28
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	0c5b      	lsrs	r3, r3, #17
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	091b      	lsrs	r3, r3, #4
 800836a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800836e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d004      	beq.n	8008380 <HCD_RXQLVL_IRQHandler+0x46>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b05      	cmp	r3, #5
 800837a:	f000 80b6 	beq.w	80084ea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800837e:	e0b7      	b.n	80084f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80b3 	beq.w	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	4613      	mov	r3, r2
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	332c      	adds	r3, #44	@ 0x2c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80a7 	beq.w	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	4613      	mov	r3, r2
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	1a9b      	subs	r3, r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3338      	adds	r3, #56	@ 0x38
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	18d1      	adds	r1, r2, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	4613      	mov	r3, r2
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4403      	add	r3, r0
 80083c4:	3334      	adds	r3, #52	@ 0x34
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4299      	cmp	r1, r3
 80083ca:	f200 8083 	bhi.w	80084d4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4613      	mov	r3, r2
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	332c      	adds	r3, #44	@ 0x2c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	b292      	uxth	r2, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	f009 fa29 	bl	8011840 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4613      	mov	r3, r2
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	332c      	adds	r3, #44	@ 0x2c
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	18d1      	adds	r1, r2, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4403      	add	r3, r0
 8008412:	332c      	adds	r3, #44	@ 0x2c
 8008414:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4613      	mov	r3, r2
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3338      	adds	r3, #56	@ 0x38
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	18d1      	adds	r1, r2, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	4613      	mov	r3, r2
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	1a9b      	subs	r3, r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4403      	add	r3, r0
 800843a:	3338      	adds	r3, #56	@ 0x38
 800843c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	0cdb      	lsrs	r3, r3, #19
 800844e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008452:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	4613      	mov	r3, r2
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	3328      	adds	r3, #40	@ 0x28
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4293      	cmp	r3, r2
 800846c:	d13f      	bne.n	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d03c      	beq.n	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	4413      	add	r3, r2
 800847c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800848a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008492:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a0:	461a      	mov	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	4613      	mov	r3, r2
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	1a9b      	subs	r3, r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	440b      	add	r3, r1
 80084b4:	333c      	adds	r3, #60	@ 0x3c
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f083 0301 	eor.w	r3, r3, #1
 80084bc:	b2d8      	uxtb	r0, r3
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4613      	mov	r3, r2
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	440b      	add	r3, r1
 80084cc:	333c      	adds	r3, #60	@ 0x3c
 80084ce:	4602      	mov	r2, r0
 80084d0:	701a      	strb	r2, [r3, #0]
      break;
 80084d2:	e00c      	b.n	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	4613      	mov	r3, r2
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	334c      	adds	r3, #76	@ 0x4c
 80084e4:	2204      	movs	r2, #4
 80084e6:	701a      	strb	r2, [r3, #0]
      break;
 80084e8:	e001      	b.n	80084ee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80084ea:	bf00      	nop
 80084ec:	e000      	b.n	80084f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80084ee:	bf00      	nop
  }
}
 80084f0:	bf00      	nop
 80084f2:	3728      	adds	r7, #40	@ 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008524:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b02      	cmp	r3, #2
 800852e:	d10b      	bne.n	8008548 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b01      	cmp	r3, #1
 8008538:	d102      	bne.n	8008540 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f010 f9dc 	bl	80188f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f043 0302 	orr.w	r3, r3, #2
 8008546:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b08      	cmp	r3, #8
 8008550:	d132      	bne.n	80085b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b04      	cmp	r3, #4
 8008562:	d126      	bne.n	80085b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	7a5b      	ldrb	r3, [r3, #9]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d113      	bne.n	8008594 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008576:	d106      	bne.n	8008586 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2102      	movs	r1, #2
 800857e:	4618      	mov	r0, r3
 8008580:	f009 fae2 	bl	8011b48 <USB_InitFSLSPClkSel>
 8008584:	e011      	b.n	80085aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2101      	movs	r1, #1
 800858c:	4618      	mov	r0, r3
 800858e:	f009 fadb 	bl	8011b48 <USB_InitFSLSPClkSel>
 8008592:	e00a      	b.n	80085aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	79db      	ldrb	r3, [r3, #7]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d106      	bne.n	80085aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085a2:	461a      	mov	r2, r3
 80085a4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80085a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f010 f9ce 	bl	801894c <HAL_HCD_PortEnabled_Callback>
 80085b0:	e002      	b.n	80085b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f010 f9d8 	bl	8018968 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d103      	bne.n	80085ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f043 0320 	orr.w	r3, r3, #32
 80085c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6013      	str	r3, [r2, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e08b      	b.n	800870a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fa fda4 	bl	8003154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2224      	movs	r2, #36	@ 0x24
 8008610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d107      	bne.n	800865a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008656:	609a      	str	r2, [r3, #8]
 8008658:	e006      	b.n	8008668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d108      	bne.n	8008682 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	e007      	b.n	8008692 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6859      	ldr	r1, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	4b1d      	ldr	r3, [pc, #116]	@ (8008714 <HAL_I2C_Init+0x134>)
 800869e:	430b      	orrs	r3, r1
 80086a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69d9      	ldr	r1, [r3, #28]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	02008000 	.word	0x02008000

08008718 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	4608      	mov	r0, r1
 8008722:	4611      	mov	r1, r2
 8008724:	461a      	mov	r2, r3
 8008726:	4603      	mov	r3, r0
 8008728:	817b      	strh	r3, [r7, #10]
 800872a:	460b      	mov	r3, r1
 800872c:	813b      	strh	r3, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b20      	cmp	r3, #32
 800873c:	f040 80f9 	bne.w	8008932 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_I2C_Mem_Write+0x34>
 8008746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008752:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0ed      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_I2C_Mem_Write+0x4e>
 8008762:	2302      	movs	r3, #2
 8008764:	e0e6      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800876e:	f7fb fe37 	bl	80043e0 <HAL_GetTick>
 8008772:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	2319      	movs	r3, #25
 800877a:	2201      	movs	r2, #1
 800877c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f001 fed3 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e0d1      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2221      	movs	r2, #33	@ 0x21
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2240      	movs	r2, #64	@ 0x40
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6a3a      	ldr	r2, [r7, #32]
 80087aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80087b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087b8:	88f8      	ldrh	r0, [r7, #6]
 80087ba:	893a      	ldrh	r2, [r7, #8]
 80087bc:	8979      	ldrh	r1, [r7, #10]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	4603      	mov	r3, r0
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f001 f87d 	bl	80098c8 <I2C_RequestMemoryWrite>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0a9      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2bff      	cmp	r3, #255	@ 0xff
 80087e8:	d90e      	bls.n	8008808 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22ff      	movs	r2, #255	@ 0xff
 80087ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	8979      	ldrh	r1, [r7, #10]
 80087f8:	2300      	movs	r3, #0
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f002 f857 	bl	800a8b4 <I2C_TransferConfig>
 8008806:	e00f      	b.n	8008828 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008816:	b2da      	uxtb	r2, r3
 8008818:	8979      	ldrh	r1, [r7, #10]
 800881a:	2300      	movs	r3, #0
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f002 f846 	bl	800a8b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 fed6 	bl	800a5de <I2C_WaitOnTXISFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e07b      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d034      	beq.n	80088e0 <HAL_I2C_Mem_Write+0x1c8>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d130      	bne.n	80088e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	2200      	movs	r2, #0
 8008886:	2180      	movs	r1, #128	@ 0x80
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f001 fe4f 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e04d      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	2bff      	cmp	r3, #255	@ 0xff
 80088a0:	d90e      	bls.n	80088c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	22ff      	movs	r2, #255	@ 0xff
 80088a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	8979      	ldrh	r1, [r7, #10]
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f001 fffb 	bl	800a8b4 <I2C_TransferConfig>
 80088be:	e00f      	b.n	80088e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	8979      	ldrh	r1, [r7, #10]
 80088d2:	2300      	movs	r3, #0
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f001 ffea 	bl	800a8b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d19e      	bne.n	8008828 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 febc 	bl	800a66c <I2C_WaitOnSTOPFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e01a      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2220      	movs	r2, #32
 8008904:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6859      	ldr	r1, [r3, #4]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <HAL_I2C_Mem_Write+0x224>)
 8008912:	400b      	ands	r3, r1
 8008914:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e000      	b.n	8008934 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008932:	2302      	movs	r3, #2
  }
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	fe00e800 	.word	0xfe00e800

08008940 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4603      	mov	r3, r0
 8008950:	817b      	strh	r3, [r7, #10]
 8008952:	460b      	mov	r3, r1
 8008954:	813b      	strh	r3, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b20      	cmp	r3, #32
 8008964:	f040 80fd 	bne.w	8008b62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <HAL_I2C_Mem_Read+0x34>
 800896e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800897a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0f1      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_I2C_Mem_Read+0x4e>
 800898a:	2302      	movs	r3, #2
 800898c:	e0ea      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008996:	f7fb fd23 	bl	80043e0 <HAL_GetTick>
 800899a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2319      	movs	r3, #25
 80089a2:	2201      	movs	r2, #1
 80089a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f001 fdbf 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0d5      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2222      	movs	r2, #34	@ 0x22
 80089bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2240      	movs	r2, #64	@ 0x40
 80089c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a3a      	ldr	r2, [r7, #32]
 80089d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089e0:	88f8      	ldrh	r0, [r7, #6]
 80089e2:	893a      	ldrh	r2, [r7, #8]
 80089e4:	8979      	ldrh	r1, [r7, #10]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4603      	mov	r3, r0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 ffbd 	bl	8009970 <I2C_RequestMemoryRead>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0ad      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2bff      	cmp	r3, #255	@ 0xff
 8008a10:	d90e      	bls.n	8008a30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	8979      	ldrh	r1, [r7, #10]
 8008a20:	4b52      	ldr	r3, [pc, #328]	@ (8008b6c <HAL_I2C_Mem_Read+0x22c>)
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f001 ff43 	bl	800a8b4 <I2C_TransferConfig>
 8008a2e:	e00f      	b.n	8008a50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	8979      	ldrh	r1, [r7, #10]
 8008a42:	4b4a      	ldr	r3, [pc, #296]	@ (8008b6c <HAL_I2C_Mem_Read+0x22c>)
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f001 ff32 	bl	800a8b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	2200      	movs	r2, #0
 8008a58:	2104      	movs	r1, #4
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f001 fd66 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e07c      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d034      	beq.n	8008b10 <HAL_I2C_Mem_Read+0x1d0>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d130      	bne.n	8008b10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2180      	movs	r1, #128	@ 0x80
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f001 fd37 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e04d      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2bff      	cmp	r3, #255	@ 0xff
 8008ad0:	d90e      	bls.n	8008af0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	8979      	ldrh	r1, [r7, #10]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f001 fee3 	bl	800a8b4 <I2C_TransferConfig>
 8008aee:	e00f      	b.n	8008b10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	8979      	ldrh	r1, [r7, #10]
 8008b02:	2300      	movs	r3, #0
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f001 fed2 	bl	800a8b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d19a      	bne.n	8008a50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f001 fda4 	bl	800a66c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e01a      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2220      	movs	r2, #32
 8008b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6859      	ldr	r1, [r3, #4]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <HAL_I2C_Mem_Read+0x230>)
 8008b42:	400b      	ands	r3, r1
 8008b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e000      	b.n	8008b64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008b62:	2302      	movs	r3, #2
  }
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	80002400 	.word	0x80002400
 8008b70:	fe00e800 	.word	0xfe00e800

08008b74 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	817b      	strh	r3, [r7, #10]
 8008b86:	460b      	mov	r3, r1
 8008b88:	813b      	strh	r3, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	f040 80c2 	bne.w	8008d20 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_I2C_Mem_Read_DMA+0x34>
 8008ba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0b6      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bc2:	d101      	bne.n	8008bc8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e0ac      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_I2C_Mem_Read_DMA+0x62>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e0a5      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2222      	movs	r2, #34	@ 0x22
 8008be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2240      	movs	r2, #64	@ 0x40
 8008bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a3a      	ldr	r2, [r7, #32]
 8008bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4a4a      	ldr	r2, [pc, #296]	@ (8008d2c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8008c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4a49      	ldr	r2, [pc, #292]	@ (8008d30 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8008c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8008c0c:	897a      	ldrh	r2, [r7, #10]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	2bff      	cmp	r3, #255	@ 0xff
 8008c1a:	d903      	bls.n	8008c24 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	22ff      	movs	r2, #255	@ 0xff
 8008c20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008c22:	e004      	b.n	8008c2e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d109      	bne.n	8008c48 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	651a      	str	r2, [r3, #80]	@ 0x50
 8008c46:	e00b      	b.n	8008c60 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c48:	893b      	ldrh	r3, [r7, #8]
 8008c4a:	0a1b      	lsrs	r3, r3, #8
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8008c56:	893b      	ldrh	r3, [r7, #8]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d020      	beq.n	8008caa <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c6c:	4a31      	ldr	r2, [pc, #196]	@ (8008d34 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8008c6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008c76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c84:	2200      	movs	r2, #0
 8008c86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3324      	adds	r3, #36	@ 0x24
 8008c92:	4619      	mov	r1, r3
 8008c94:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c9a:	f7fc f961 	bl	8004f60 <HAL_DMA_Start_IT>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d127      	bne.n	8008cf8 <HAL_I2C_Mem_Read_DMA+0x184>
 8008ca8:	e013      	b.n	8008cd2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e027      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	8979      	ldrh	r1, [r7, #10]
 8008cd8:	4b18      	ldr	r3, [pc, #96]	@ (8008d3c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f001 fde8 	bl	800a8b4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008cec:	2101      	movs	r1, #1
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f001 fe12 	bl	800a918 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e014      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0c:	f043 0210 	orr.w	r2, r3, #16
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8008d20:	2302      	movs	r3, #2
  }
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	ffff0000 	.word	0xffff0000
 8008d30:	08009491 	.word	0x08009491
 8008d34:	0800a3cb 	.word	0x0800a3cb
 8008d38:	0800a47d 	.word	0x0800a47d
 8008d3c:	80002000 	.word	0x80002000

08008d40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	@ 0x28
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	607a      	str	r2, [r7, #4]
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	f040 80d2 	bne.w	8008f06 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d70:	d101      	bne.n	8008d76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
 8008d74:	e0c8      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_I2C_IsDeviceReady+0x44>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e0c1      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2224      	movs	r2, #36	@ 0x24
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <HAL_I2C_IsDeviceReady+0x6e>
 8008da2:	897b      	ldrh	r3, [r7, #10]
 8008da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008da8:	4b59      	ldr	r3, [pc, #356]	@ (8008f10 <HAL_I2C_IsDeviceReady+0x1d0>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	e004      	b.n	8008db8 <HAL_I2C_IsDeviceReady+0x78>
 8008dae:	897b      	ldrh	r3, [r7, #10]
 8008db0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008db4:	4b57      	ldr	r3, [pc, #348]	@ (8008f14 <HAL_I2C_IsDeviceReady+0x1d4>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008dbe:	f7fb fb0f 	bl	80043e0 <HAL_GetTick>
 8008dc2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2301      	moveq	r3, #1
 8008dd4:	2300      	movne	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	bf0c      	ite	eq
 8008de8:	2301      	moveq	r3, #1
 8008dea:	2300      	movne	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008df0:	e034      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d01a      	beq.n	8008e30 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008dfa:	f7fb faf1 	bl	80043e0 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <HAL_I2C_IsDeviceReady+0xd0>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10f      	bne.n	8008e30 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e06b      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	bf0c      	ite	eq
 8008e3e:	2301      	moveq	r3, #1
 8008e40:	2300      	movne	r3, #0
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008e5c:	7ffb      	ldrb	r3, [r7, #31]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <HAL_I2C_IsDeviceReady+0x128>
 8008e62:	7fbb      	ldrb	r3, [r7, #30]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0c4      	beq.n	8008df2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	d01a      	beq.n	8008eac <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2120      	movs	r1, #32
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 fb53 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e03b      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2220      	movs	r2, #32
 8008e96:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e02d      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2120      	movs	r1, #32
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f001 fb38 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e020      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2210      	movs	r2, #16
 8008ecc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	f63f af5a 	bhi.w	8008d9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef2:	f043 0220 	orr.w	r2, r3, #32
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8008f06:	2302      	movs	r3, #2
  }
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	02002000 	.word	0x02002000
 8008f14:	02002800 	.word	0x02002800

08008f18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	68f9      	ldr	r1, [r7, #12]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
  }
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00f      	beq.n	8008f8e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7c:	f043 0201 	orr.w	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f8c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00f      	beq.n	8008fb8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa6:	f043 0208 	orr.w	r2, r3, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fb6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00f      	beq.n	8008fe2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00a      	beq.n	8008fe2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd0:	f043 0202 	orr.w	r2, r3, #2
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fe0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 030b 	and.w	r3, r3, #11
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f8ad 	bl	800a154 <I2C_ITError>
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
 800905e:	4613      	mov	r3, r2
 8009060:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b086      	sub	sp, #24
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <I2C_Slave_ISR_IT+0x24>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e0e2      	b.n	8009294 <I2C_Slave_ISR_IT+0x1ea>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f003 0320 	and.w	r3, r3, #32
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80090ea:	6939      	ldr	r1, [r7, #16]
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fe79 	bl	8009de4 <I2C_ITSlaveCplt>
 80090f2:	e0ca      	b.n	800928a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f003 0310 	and.w	r3, r3, #16
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d04b      	beq.n	8009196 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009104:	2b00      	cmp	r3, #0
 8009106:	d046      	beq.n	8009196 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d128      	bne.n	8009164 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b28      	cmp	r3, #40	@ 0x28
 800911c:	d108      	bne.n	8009130 <I2C_Slave_ISR_IT+0x86>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009124:	d104      	bne.n	8009130 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009126:	6939      	ldr	r1, [r7, #16]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 ffbf 	bl	800a0ac <I2C_ITListenCplt>
 800912e:	e031      	b.n	8009194 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b29      	cmp	r3, #41	@ 0x29
 800913a:	d10e      	bne.n	800915a <I2C_Slave_ISR_IT+0xb0>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009142:	d00a      	beq.n	800915a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2210      	movs	r2, #16
 800914a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f001 f918 	bl	800a382 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fd21 	bl	8009b9a <I2C_ITSlaveSeqCplt>
 8009158:	e01c      	b.n	8009194 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2210      	movs	r2, #16
 8009160:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009162:	e08f      	b.n	8009284 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2210      	movs	r2, #16
 800916a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009170:	f043 0204 	orr.w	r2, r3, #4
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <I2C_Slave_ISR_IT+0xdc>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009184:	d17e      	bne.n	8009284 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	4619      	mov	r1, r3
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 ffe1 	bl	800a154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009192:	e077      	b.n	8009284 <I2C_Slave_ISR_IT+0x1da>
 8009194:	e076      	b.n	8009284 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d02f      	beq.n	8009200 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d02a      	beq.n	8009200 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d018      	beq.n	80091e6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d14b      	bne.n	8009288 <I2C_Slave_ISR_IT+0x1de>
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091f6:	d047      	beq.n	8009288 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fcce 	bl	8009b9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80091fe:	e043      	b.n	8009288 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009214:	6939      	ldr	r1, [r7, #16]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fbfe 	bl	8009a18 <I2C_ITAddrCplt>
 800921c:	e035      	b.n	800928a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d030      	beq.n	800928a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02b      	beq.n	800928a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d018      	beq.n	800926e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009256:	b29b      	uxth	r3, r3
 8009258:	3b01      	subs	r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800926c:	e00d      	b.n	800928a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009274:	d002      	beq.n	800927c <I2C_Slave_ISR_IT+0x1d2>
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fc8c 	bl	8009b9a <I2C_ITSlaveSeqCplt>
 8009282:	e002      	b.n	800928a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009288:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <I2C_Master_ISR_DMA+0x1a>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e0e7      	b.n	8009486 <I2C_Master_ISR_DMA+0x1ea>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d016      	beq.n	80092f6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d011      	beq.n	80092f6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2210      	movs	r2, #16
 80092d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092de:	f043 0204 	orr.w	r2, r3, #4
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80092e6:	2120      	movs	r1, #32
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f001 fb15 	bl	800a918 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f001 f847 	bl	800a382 <I2C_Flush_TXDR>
 80092f4:	e0c2      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d07f      	beq.n	8009400 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009306:	2b00      	cmp	r3, #0
 8009308:	d07a      	beq.n	8009400 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009318:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d05c      	beq.n	80093de <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b29b      	uxth	r3, r3
 800932c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009330:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	2bff      	cmp	r3, #255	@ 0xff
 800933a:	d914      	bls.n	8009366 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b01      	cmp	r3, #1
 800934e:	d103      	bne.n	8009358 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009356:	e002      	b.n	800935e <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	22ff      	movs	r2, #255	@ 0xff
 800935c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800935e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e010      	b.n	8009388 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800936a:	b29a      	uxth	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009378:	d003      	beq.n	8009382 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e002      	b.n	8009388 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009386:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800938c:	b2da      	uxtb	r2, r3
 800938e:	8a79      	ldrh	r1, [r7, #18]
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 fa8c 	bl	800a8b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b22      	cmp	r3, #34	@ 0x22
 80093b8:	d108      	bne.n	80093cc <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80093ca:	e057      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80093dc:	e04e      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093ec:	d003      	beq.n	80093f6 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fb96 	bl	8009b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80093f4:	e042      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80093f6:	2140      	movs	r1, #64	@ 0x40
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 feab 	bl	800a154 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80093fe:	e03d      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d028      	beq.n	800945c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009410:	2b00      	cmp	r3, #0
 8009412:	d023      	beq.n	800945c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d119      	bne.n	8009452 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800942c:	d025      	beq.n	800947a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009436:	d108      	bne.n	800944a <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009446:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009448:	e017      	b.n	800947a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fb68 	bl	8009b20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009450:	e013      	b.n	800947a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009452:	2140      	movs	r1, #64	@ 0x40
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fe7d 	bl	800a154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800945a:	e00e      	b.n	800947a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fbee 	bl	8009c54 <I2C_ITMasterCplt>
 8009478:	e000      	b.n	800947c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800947a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800949c:	4b90      	ldr	r3, [pc, #576]	@ (80096e0 <I2C_Mem_ISR_DMA+0x250>)
 800949e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <I2C_Mem_ISR_DMA+0x1e>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e12f      	b.n	800970e <I2C_Mem_ISR_DMA+0x27e>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f003 0310 	and.w	r3, r3, #16
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d016      	beq.n	80094ee <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d011      	beq.n	80094ee <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2210      	movs	r2, #16
 80094d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	f043 0204 	orr.w	r2, r3, #4
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80094de:	2120      	movs	r1, #32
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fa19 	bl	800a918 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 ff4b 	bl	800a382 <I2C_Flush_TXDR>
 80094ec:	e10a      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00e      	beq.n	8009516 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800950a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	651a      	str	r2, [r3, #80]	@ 0x50
 8009514:	e0f6      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951c:	2b00      	cmp	r3, #0
 800951e:	d06d      	beq.n	80095fc <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009526:	2b00      	cmp	r3, #0
 8009528:	d068      	beq.n	80095fc <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800952a:	2101      	movs	r1, #1
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f001 fa77 	bl	800aa20 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009532:	2110      	movs	r1, #16
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 f9ef 	bl	800a918 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d056      	beq.n	80095f2 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009548:	b29b      	uxth	r3, r3
 800954a:	2bff      	cmp	r3, #255	@ 0xff
 800954c:	d91e      	bls.n	800958c <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	0c1b      	lsrs	r3, r3, #16
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d103      	bne.n	800956a <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2201      	movs	r2, #1
 8009566:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009568:	e002      	b.n	8009570 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	22ff      	movs	r2, #255	@ 0xff
 800956e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009574:	b299      	uxth	r1, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957a:	b2da      	uxtb	r2, r3
 800957c:	2300      	movs	r3, #0
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f001 f995 	bl	800a8b4 <I2C_TransferConfig>
 800958a:	e011      	b.n	80095b0 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009590:	b29a      	uxth	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800959a:	b299      	uxth	r1, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f001 f982 	bl	800a8b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b22      	cmp	r3, #34	@ 0x22
 80095cc:	d108      	bne.n	80095e0 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80095de:	e091      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80095f0:	e088      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80095f2:	2140      	movs	r1, #64	@ 0x40
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 fdad 	bl	800a154 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80095fa:	e083      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	d070      	beq.n	80096e8 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800960c:	2b00      	cmp	r3, #0
 800960e:	d06b      	beq.n	80096e8 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009610:	2101      	movs	r1, #1
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f001 fa04 	bl	800aa20 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009618:	2110      	movs	r1, #16
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f001 f97c 	bl	800a918 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b22      	cmp	r3, #34	@ 0x22
 800962a:	d101      	bne.n	8009630 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 800962c:	4b2d      	ldr	r3, [pc, #180]	@ (80096e4 <I2C_Mem_ISR_DMA+0x254>)
 800962e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009634:	b29b      	uxth	r3, r3
 8009636:	2bff      	cmp	r3, #255	@ 0xff
 8009638:	d91e      	bls.n	8009678 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	0c1b      	lsrs	r3, r3, #16
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b01      	cmp	r3, #1
 800964c:	d103      	bne.n	8009656 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009654:	e002      	b.n	800965c <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	22ff      	movs	r2, #255	@ 0xff
 800965a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009660:	b299      	uxth	r1, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009666:	b2da      	uxtb	r2, r3
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f001 f91f 	bl	800a8b4 <I2C_TransferConfig>
 8009676:	e011      	b.n	800969c <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009686:	b299      	uxth	r1, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800968c:	b2da      	uxtb	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f001 f90c 	bl	800a8b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b22      	cmp	r3, #34	@ 0x22
 80096b8:	d108      	bne.n	80096cc <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096c8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096ca:	e01b      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096da:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096dc:	e012      	b.n	8009704 <I2C_Mem_ISR_DMA+0x274>
 80096de:	bf00      	nop
 80096e0:	80002000 	.word	0x80002000
 80096e4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f003 0320 	and.w	r3, r3, #32
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d008      	beq.n	8009704 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 faa8 	bl	8009c54 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop

08009718 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <I2C_Slave_ISR_DMA+0x24>
 8009738:	2302      	movs	r3, #2
 800973a:	e0c0      	b.n	80098be <I2C_Slave_ISR_DMA+0x1a6>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009754:	2b00      	cmp	r3, #0
 8009756:	d004      	beq.n	8009762 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fb42 	bl	8009de4 <I2C_ITSlaveCplt>
 8009760:	e0a8      	b.n	80098b4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8095 	beq.w	8009898 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 808f 	beq.w	8009898 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d104      	bne.n	800978e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800978a:	2b00      	cmp	r3, #0
 800978c:	d07d      	beq.n	800988a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00c      	beq.n	80097b0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80097ac:	2301      	movs	r3, #1
 80097ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00c      	beq.n	80097d2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d007      	beq.n	80097d2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80097ce:	2301      	movs	r3, #1
 80097d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d128      	bne.n	800982a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b28      	cmp	r3, #40	@ 0x28
 80097e2:	d108      	bne.n	80097f6 <I2C_Slave_ISR_DMA+0xde>
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097ea:	d104      	bne.n	80097f6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 fc5c 	bl	800a0ac <I2C_ITListenCplt>
 80097f4:	e048      	b.n	8009888 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b29      	cmp	r3, #41	@ 0x29
 8009800:	d10e      	bne.n	8009820 <I2C_Slave_ISR_DMA+0x108>
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009808:	d00a      	beq.n	8009820 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2210      	movs	r2, #16
 8009810:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fdb5 	bl	800a382 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f9be 	bl	8009b9a <I2C_ITSlaveSeqCplt>
 800981e:	e033      	b.n	8009888 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2210      	movs	r2, #16
 8009826:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009828:	e034      	b.n	8009894 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009836:	f043 0204 	orr.w	r2, r3, #4
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009844:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <I2C_Slave_ISR_DMA+0x13c>
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009852:	d11f      	bne.n	8009894 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b21      	cmp	r3, #33	@ 0x21
 8009858:	d002      	beq.n	8009860 <I2C_Slave_ISR_DMA+0x148>
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	2b29      	cmp	r3, #41	@ 0x29
 800985e:	d103      	bne.n	8009868 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2221      	movs	r2, #33	@ 0x21
 8009864:	631a      	str	r2, [r3, #48]	@ 0x30
 8009866:	e008      	b.n	800987a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b22      	cmp	r3, #34	@ 0x22
 800986c:	d002      	beq.n	8009874 <I2C_Slave_ISR_DMA+0x15c>
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	2b2a      	cmp	r3, #42	@ 0x2a
 8009872:	d102      	bne.n	800987a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2222      	movs	r2, #34	@ 0x22
 8009878:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987e:	4619      	mov	r1, r3
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 fc67 	bl	800a154 <I2C_ITError>
      if (treatdmanack == 1U)
 8009886:	e005      	b.n	8009894 <I2C_Slave_ISR_DMA+0x17c>
 8009888:	e004      	b.n	8009894 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2210      	movs	r2, #16
 8009890:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009892:	e00f      	b.n	80098b4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8009894:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009896:	e00d      	b.n	80098b4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 0308 	and.w	r3, r3, #8
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d008      	beq.n	80098b4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f8b2 	bl	8009a18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	4608      	mov	r0, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	817b      	strh	r3, [r7, #10]
 80098da:	460b      	mov	r3, r1
 80098dc:	813b      	strh	r3, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	8979      	ldrh	r1, [r7, #10]
 80098e8:	4b20      	ldr	r3, [pc, #128]	@ (800996c <I2C_RequestMemoryWrite+0xa4>)
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 ffdf 	bl	800a8b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	69b9      	ldr	r1, [r7, #24]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fe6f 	bl	800a5de <I2C_WaitOnTXISFlagUntilTimeout>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e02c      	b.n	8009964 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d105      	bne.n	800991c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	b2da      	uxtb	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	629a      	str	r2, [r3, #40]	@ 0x28
 800991a:	e015      	b.n	8009948 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800991c:	893b      	ldrh	r3, [r7, #8]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	b2da      	uxtb	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	69b9      	ldr	r1, [r7, #24]
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fe55 	bl	800a5de <I2C_WaitOnTXISFlagUntilTimeout>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e012      	b.n	8009964 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800993e:	893b      	ldrh	r3, [r7, #8]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	2200      	movs	r2, #0
 8009950:	2180      	movs	r1, #128	@ 0x80
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fdea 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	80002000 	.word	0x80002000

08009970 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	461a      	mov	r2, r3
 800997e:	4603      	mov	r3, r0
 8009980:	817b      	strh	r3, [r7, #10]
 8009982:	460b      	mov	r3, r1
 8009984:	813b      	strh	r3, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	b2da      	uxtb	r2, r3
 800998e:	8979      	ldrh	r1, [r7, #10]
 8009990:	4b20      	ldr	r3, [pc, #128]	@ (8009a14 <I2C_RequestMemoryRead+0xa4>)
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 ff8c 	bl	800a8b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	69b9      	ldr	r1, [r7, #24]
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fe1c 	bl	800a5de <I2C_WaitOnTXISFlagUntilTimeout>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e02c      	b.n	8009a0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099b0:	88fb      	ldrh	r3, [r7, #6]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d105      	bne.n	80099c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099b6:	893b      	ldrh	r3, [r7, #8]
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	629a      	str	r2, [r3, #40]	@ 0x28
 80099c0:	e015      	b.n	80099ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099c2:	893b      	ldrh	r3, [r7, #8]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d0:	69fa      	ldr	r2, [r7, #28]
 80099d2:	69b9      	ldr	r1, [r7, #24]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fe02 	bl	800a5de <I2C_WaitOnTXISFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e012      	b.n	8009a0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099e4:	893b      	ldrh	r3, [r7, #8]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2200      	movs	r2, #0
 80099f6:	2140      	movs	r1, #64	@ 0x40
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fd97 	bl	800a52c <I2C_WaitOnFlagUntilTimeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	80002000 	.word	0x80002000

08009a18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009a2e:	2b28      	cmp	r3, #40	@ 0x28
 8009a30:	d16a      	bne.n	8009b08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	0c1b      	lsrs	r3, r3, #16
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009a50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009a6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d138      	bne.n	8009ae8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009a76:	897b      	ldrh	r3, [r7, #10]
 8009a78:	09db      	lsrs	r3, r3, #7
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	89bb      	ldrh	r3, [r7, #12]
 8009a7e:	4053      	eors	r3, r2
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f003 0306 	and.w	r3, r3, #6
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d11c      	bne.n	8009ac4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009a8a:	897b      	ldrh	r3, [r7, #10]
 8009a8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d13b      	bne.n	8009b18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2208      	movs	r2, #8
 8009aac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009ab6:	89ba      	ldrh	r2, [r7, #12]
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fac8 	bl	8009052 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ac2:	e029      	b.n	8009b18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009ac4:	893b      	ldrh	r3, [r7, #8]
 8009ac6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 ffa7 	bl	800aa20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009ada:	89ba      	ldrh	r2, [r7, #12]
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fab6 	bl	8009052 <HAL_I2C_AddrCallback>
}
 8009ae6:	e017      	b.n	8009b18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009ae8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 ff97 	bl	800aa20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009afa:	89ba      	ldrh	r2, [r7, #12]
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff faa6 	bl	8009052 <HAL_I2C_AddrCallback>
}
 8009b06:	e007      	b.n	8009b18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2208      	movs	r2, #8
 8009b0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b21      	cmp	r3, #33	@ 0x21
 8009b3a:	d115      	bne.n	8009b68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2211      	movs	r2, #17
 8009b48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009b50:	2101      	movs	r1, #1
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 ff64 	bl	800aa20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff fa4e 	bl	8009002 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b66:	e014      	b.n	8009b92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2212      	movs	r2, #18
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 ff4e 	bl	800aa20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fa42 	bl	8009016 <HAL_I2C_MasterRxCpltCallback>
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	e00c      	b.n	8009be8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009be6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b29      	cmp	r3, #41	@ 0x29
 8009bf2:	d112      	bne.n	8009c1a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2228      	movs	r2, #40	@ 0x28
 8009bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2221      	movs	r2, #33	@ 0x21
 8009c00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009c02:	2101      	movs	r1, #1
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 ff0b 	bl	800aa20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fa09 	bl	800902a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009c18:	e017      	b.n	8009c4a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c24:	d111      	bne.n	8009c4a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2228      	movs	r2, #40	@ 0x28
 8009c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2222      	movs	r2, #34	@ 0x22
 8009c32:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009c34:	2102      	movs	r1, #2
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fef2 	bl	800aa20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff f9fa 	bl	800903e <HAL_I2C_SlaveRxCpltCallback>
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2220      	movs	r2, #32
 8009c68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b21      	cmp	r3, #33	@ 0x21
 8009c74:	d107      	bne.n	8009c86 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009c76:	2101      	movs	r1, #1
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fed1 	bl	800aa20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2211      	movs	r2, #17
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c84:	e00c      	b.n	8009ca0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b22      	cmp	r3, #34	@ 0x22
 8009c90:	d106      	bne.n	8009ca0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009c92:	2102      	movs	r1, #2
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fec3 	bl	800aa20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2212      	movs	r2, #18
 8009c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b4c      	ldr	r3, [pc, #304]	@ (8009ddc <I2C_ITMasterCplt+0x188>)
 8009cac:	400b      	ands	r3, r1
 8009cae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a49      	ldr	r2, [pc, #292]	@ (8009de0 <I2C_ITMasterCplt+0x18c>)
 8009cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f003 0310 	and.w	r3, r3, #16
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2210      	movs	r2, #16
 8009ccc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd2:	f043 0204 	orr.w	r2, r3, #4
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b60      	cmp	r3, #96	@ 0x60
 8009ce4:	d10a      	bne.n	8009cfc <I2C_ITMasterCplt+0xa8>
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fb40 	bl	800a382 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d06:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d002      	beq.n	8009d1a <I2C_ITMasterCplt+0xc6>
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fa17 	bl	800a154 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d26:	e054      	b.n	8009dd2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b21      	cmp	r3, #33	@ 0x21
 8009d32:	d124      	bne.n	8009d7e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b40      	cmp	r3, #64	@ 0x40
 8009d4c:	d10b      	bne.n	8009d66 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff f98f 	bl	8009082 <HAL_I2C_MemTxCpltCallback>
}
 8009d64:	e035      	b.n	8009dd2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff f943 	bl	8009002 <HAL_I2C_MasterTxCpltCallback>
}
 8009d7c:	e029      	b.n	8009dd2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b22      	cmp	r3, #34	@ 0x22
 8009d88:	d123      	bne.n	8009dd2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b40      	cmp	r3, #64	@ 0x40
 8009da2:	d10b      	bne.n	8009dbc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f7 f903 	bl	8000fc0 <HAL_I2C_MemRxCpltCallback>
}
 8009dba:	e00a      	b.n	8009dd2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff f922 	bl	8009016 <HAL_I2C_MasterRxCpltCallback>
}
 8009dd2:	bf00      	nop
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	fe00e800 	.word	0xfe00e800
 8009de0:	ffff0000 	.word	0xffff0000

08009de4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e06:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	2b21      	cmp	r3, #33	@ 0x21
 8009e14:	d002      	beq.n	8009e1c <I2C_ITSlaveCplt+0x38>
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	2b29      	cmp	r3, #41	@ 0x29
 8009e1a:	d108      	bne.n	8009e2e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009e1c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fdfd 	bl	800aa20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2221      	movs	r2, #33	@ 0x21
 8009e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e2c:	e019      	b.n	8009e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	2b22      	cmp	r3, #34	@ 0x22
 8009e32:	d002      	beq.n	8009e3a <I2C_ITSlaveCplt+0x56>
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e38:	d108      	bne.n	8009e4c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009e3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fdee 	bl	800aa20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2222      	movs	r2, #34	@ 0x22
 8009e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e4a:	e00a      	b.n	8009e62 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	2b28      	cmp	r3, #40	@ 0x28
 8009e50:	d107      	bne.n	8009e62 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009e52:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fde2 	bl	800aa20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6859      	ldr	r1, [r3, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	4b89      	ldr	r3, [pc, #548]	@ (800a0a4 <I2C_ITSlaveCplt+0x2c0>)
 8009e7e:	400b      	ands	r3, r1
 8009e80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa7d 	bl	800a382 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d013      	beq.n	8009eba <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009ea0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01f      	beq.n	8009eea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009eb8:	e017      	b.n	8009eea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d012      	beq.n	8009eea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ed2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d006      	beq.n	8009eea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d020      	beq.n	8009f36 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f023 0304 	bic.w	r3, r3, #4
 8009efa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00c      	beq.n	8009f36 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f20:	3b01      	subs	r3, #1
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f44:	f043 0204 	orr.w	r2, r3, #4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d049      	beq.n	8009fea <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d044      	beq.n	8009fea <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d128      	bne.n	8009fbc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b28      	cmp	r3, #40	@ 0x28
 8009f74:	d108      	bne.n	8009f88 <I2C_ITSlaveCplt+0x1a4>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f7c:	d104      	bne.n	8009f88 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009f7e:	6979      	ldr	r1, [r7, #20]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f893 	bl	800a0ac <I2C_ITListenCplt>
 8009f86:	e030      	b.n	8009fea <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b29      	cmp	r3, #41	@ 0x29
 8009f92:	d10e      	bne.n	8009fb2 <I2C_ITSlaveCplt+0x1ce>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f9a:	d00a      	beq.n	8009fb2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f9ec 	bl	800a382 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fdf5 	bl	8009b9a <I2C_ITSlaveSeqCplt>
 8009fb0:	e01b      	b.n	8009fea <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2210      	movs	r2, #16
 8009fb8:	61da      	str	r2, [r3, #28]
 8009fba:	e016      	b.n	8009fea <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc8:	f043 0204 	orr.w	r2, r3, #4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <I2C_ITSlaveCplt+0x1fa>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fdc:	d105      	bne.n	8009fea <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f8b5 	bl	800a154 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d010      	beq.n	800a022 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f8a4 	bl	800a154 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b28      	cmp	r3, #40	@ 0x28
 800a016:	d141      	bne.n	800a09c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a018:	6979      	ldr	r1, [r7, #20]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f846 	bl	800a0ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a020:	e03c      	b.n	800a09c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a02a:	d014      	beq.n	800a056 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fdb4 	bl	8009b9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a8 <I2C_ITSlaveCplt+0x2c4>)
 800a036:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff f80d 	bl	800906e <HAL_I2C_ListenCpltCallback>
}
 800a054:	e022      	b.n	800a09c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b22      	cmp	r3, #34	@ 0x22
 800a060:	d10e      	bne.n	800a080 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2220      	movs	r2, #32
 800a066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7fe ffe0 	bl	800903e <HAL_I2C_SlaveRxCpltCallback>
}
 800a07e:	e00d      	b.n	800a09c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe ffc7 	bl	800902a <HAL_I2C_SlaveTxCpltCallback>
}
 800a09c:	bf00      	nop
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	fe00e800 	.word	0xfe00e800
 800a0a8:	ffff0000 	.word	0xffff0000

0800a0ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a25      	ldr	r2, [pc, #148]	@ (800a150 <I2C_ITListenCplt+0xa4>)
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d022      	beq.n	800a128 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d012      	beq.n	800a128 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a120:	f043 0204 	orr.w	r2, r3, #4
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a128:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fc77 	bl	800aa20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2210      	movs	r2, #16
 800a138:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe ff93 	bl	800906e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	ffff0000 	.word	0xffff0000

0800a154 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a164:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a6d      	ldr	r2, [pc, #436]	@ (800a328 <I2C_ITError+0x1d4>)
 800a172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	431a      	orrs	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	2b28      	cmp	r3, #40	@ 0x28
 800a18a:	d005      	beq.n	800a198 <I2C_ITError+0x44>
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b29      	cmp	r3, #41	@ 0x29
 800a190:	d002      	beq.n	800a198 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	2b2a      	cmp	r3, #42	@ 0x2a
 800a196:	d10b      	bne.n	800a1b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a198:	2103      	movs	r1, #3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fc40 	bl	800aa20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2228      	movs	r2, #40	@ 0x28
 800a1a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a60      	ldr	r2, [pc, #384]	@ (800a32c <I2C_ITError+0x1d8>)
 800a1ac:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1ae:	e030      	b.n	800a212 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a1b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fc33 	bl	800aa20 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f8e1 	bl	800a382 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ca:	d01f      	beq.n	800a20c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f003 0320 	and.w	r3, r3, #32
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	d114      	bne.n	800a20c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d109      	bne.n	800a204 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2210      	movs	r2, #16
 800a1f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1fc:	f043 0204 	orr.w	r2, r3, #4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2220      	movs	r2, #32
 800a20a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a216:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d039      	beq.n	800a294 <I2C_ITError+0x140>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b11      	cmp	r3, #17
 800a224:	d002      	beq.n	800a22c <I2C_ITError+0xd8>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b21      	cmp	r3, #33	@ 0x21
 800a22a:	d133      	bne.n	800a294 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a236:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a23a:	d107      	bne.n	800a24c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a24a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a250:	4618      	mov	r0, r3
 800a252:	f7fb f891 	bl	8005378 <HAL_DMA_GetState>
 800a256:	4603      	mov	r3, r0
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d017      	beq.n	800a28c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	4a33      	ldr	r2, [pc, #204]	@ (800a330 <I2C_ITError+0x1dc>)
 800a262:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a270:	4618      	mov	r0, r3
 800a272:	f7fa fed5 	bl	8005020 <HAL_DMA_Abort_IT>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d04d      	beq.n	800a318 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a286:	4610      	mov	r0, r2
 800a288:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a28a:	e045      	b.n	800a318 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f851 	bl	800a334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a292:	e041      	b.n	800a318 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d039      	beq.n	800a310 <I2C_ITError+0x1bc>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b12      	cmp	r3, #18
 800a2a0:	d002      	beq.n	800a2a8 <I2C_ITError+0x154>
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b22      	cmp	r3, #34	@ 0x22
 800a2a6:	d133      	bne.n	800a310 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2b6:	d107      	bne.n	800a2c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fb f853 	bl	8005378 <HAL_DMA_GetState>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d017      	beq.n	800a308 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2dc:	4a14      	ldr	r2, [pc, #80]	@ (800a330 <I2C_ITError+0x1dc>)
 800a2de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fa fe97 	bl	8005020 <HAL_DMA_Abort_IT>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d011      	beq.n	800a31c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a302:	4610      	mov	r0, r2
 800a304:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a306:	e009      	b.n	800a31c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f813 	bl	800a334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a30e:	e005      	b.n	800a31c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f80f 	bl	800a334 <I2C_TreatErrorCallback>
  }
}
 800a316:	e002      	b.n	800a31e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a31c:	bf00      	nop
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	ffff0000 	.word	0xffff0000
 800a32c:	080090ab 	.word	0x080090ab
 800a330:	0800a4f1 	.word	0x0800a4f1

0800a334 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b60      	cmp	r3, #96	@ 0x60
 800a346:	d10e      	bne.n	800a366 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7fe fe99 	bl	8009096 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a364:	e009      	b.n	800a37a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7f6 ff01 	bl	800117c <HAL_I2C_ErrorCallback>
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	2b02      	cmp	r3, #2
 800a396:	d103      	bne.n	800a3a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d007      	beq.n	800a3be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0201 	orr.w	r2, r2, #1
 800a3bc:	619a      	str	r2, [r3, #24]
  }
}
 800a3be:	bf00      	nop
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a3e6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a3f2:	2120      	movs	r1, #32
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fa8f 	bl	800a918 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a3fa:	e03b      	b.n	800a474 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a404:	441a      	add	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2bff      	cmp	r3, #255	@ 0xff
 800a412:	d911      	bls.n	800a438 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	0c1b      	lsrs	r3, r3, #16
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b01      	cmp	r3, #1
 800a426:	d103      	bne.n	800a430 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2201      	movs	r2, #1
 800a42c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a42e:	e008      	b.n	800a442 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	22ff      	movs	r2, #255	@ 0xff
 800a434:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a436:	e004      	b.n	800a442 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3324      	adds	r3, #36	@ 0x24
 800a44c:	4619      	mov	r1, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a452:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a458:	f7fa fd82 	bl	8004f60 <HAL_DMA_Start_IT>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a462:	2110      	movs	r1, #16
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff fe75 	bl	800a154 <I2C_ITError>
}
 800a46a:	e003      	b.n	800a474 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a46c:	2140      	movs	r1, #64	@ 0x40
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fa52 	bl	800a918 <I2C_Enable_IRQ>
}
 800a474:	bf00      	nop
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a492:	2b00      	cmp	r3, #0
 800a494:	d007      	beq.n	800a4a6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fa ff68 	bl	8005394 <HAL_DMA_GetError>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d00e      	beq.n	800a4e8 <I2C_DMAError+0x6c>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4de:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a4e0:	2110      	movs	r1, #16
 800a4e2:	68b8      	ldr	r0, [r7, #8]
 800a4e4:	f7ff fe36 	bl	800a154 <I2C_ITError>
  }
}
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50a:	2200      	movs	r2, #0
 800a50c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a51a:	2200      	movs	r2, #0
 800a51c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7ff ff08 	bl	800a334 <I2C_TreatErrorCallback>
}
 800a524:	bf00      	nop
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	4613      	mov	r3, r2
 800a53a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a53c:	e03b      	b.n	800a5b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f8d6 	bl	800a6f4 <I2C_IsErrorOccurred>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e041      	b.n	800a5d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d02d      	beq.n	800a5b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a55a:	f7f9 ff41 	bl	80043e0 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d122      	bne.n	800a5b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	4013      	ands	r3, r2
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	bf0c      	ite	eq
 800a580:	2301      	moveq	r3, #1
 800a582:	2300      	movne	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	461a      	mov	r2, r3
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d113      	bne.n	800a5b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a592:	f043 0220 	orr.w	r2, r3, #32
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e00f      	b.n	800a5d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	bf0c      	ite	eq
 800a5c6:	2301      	moveq	r3, #1
 800a5c8:	2300      	movne	r3, #0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d0b4      	beq.n	800a53e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5ea:	e033      	b.n	800a654 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f87f 	bl	800a6f4 <I2C_IsErrorOccurred>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e031      	b.n	800a664 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d025      	beq.n	800a654 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a608:	f7f9 feea 	bl	80043e0 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d11a      	bne.n	800a654 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d013      	beq.n	800a654 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a630:	f043 0220 	orr.w	r2, r3, #32
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e007      	b.n	800a664 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d1c4      	bne.n	800a5ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a678:	e02f      	b.n	800a6da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f838 	bl	800a6f4 <I2C_IsErrorOccurred>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e02d      	b.n	800a6ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68e:	f7f9 fea7 	bl	80043e0 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d302      	bcc.n	800a6a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d11a      	bne.n	800a6da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	d013      	beq.n	800a6da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b6:	f043 0220 	orr.w	r2, r3, #32
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e007      	b.n	800a6ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d1c8      	bne.n	800a67a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	@ 0x28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d068      	beq.n	800a7f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2210      	movs	r2, #16
 800a726:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a728:	e049      	b.n	800a7be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a730:	d045      	beq.n	800a7be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a732:	f7f9 fe55 	bl	80043e0 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d302      	bcc.n	800a748 <I2C_IsErrorOccurred+0x54>
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d13a      	bne.n	800a7be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a752:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a75a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a76a:	d121      	bne.n	800a7b0 <I2C_IsErrorOccurred+0xbc>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a772:	d01d      	beq.n	800a7b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a774:	7cfb      	ldrb	r3, [r7, #19]
 800a776:	2b20      	cmp	r3, #32
 800a778:	d01a      	beq.n	800a7b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a788:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a78a:	f7f9 fe29 	bl	80043e0 <HAL_GetTick>
 800a78e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a790:	e00e      	b.n	800a7b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a792:	f7f9 fe25 	bl	80043e0 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b19      	cmp	r3, #25
 800a79e:	d907      	bls.n	800a7b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	f043 0320 	orr.w	r3, r3, #32
 800a7a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a7ae:	e006      	b.n	800a7be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b20      	cmp	r3, #32
 800a7bc:	d1e9      	bne.n	800a792 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	d003      	beq.n	800a7d4 <I2C_IsErrorOccurred+0xe0>
 800a7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0aa      	beq.n	800a72a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	f043 0304 	orr.w	r3, r3, #4
 800a7ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	f043 0308 	orr.w	r3, r3, #8
 800a82c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	f043 0302 	orr.w	r3, r3, #2
 800a84e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a858:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01c      	beq.n	800a8a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff fd8a 	bl	800a382 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <I2C_IsErrorOccurred+0x1bc>)
 800a87a:	400b      	ands	r3, r1
 800a87c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	431a      	orrs	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3728      	adds	r7, #40	@ 0x28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	fe00e800 	.word	0xfe00e800

0800a8b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	607b      	str	r3, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	817b      	strh	r3, [r7, #10]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8c6:	897b      	ldrh	r3, [r7, #10]
 800a8c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a8cc:	7a7b      	ldrb	r3, [r7, #9]
 800a8ce:	041b      	lsls	r3, r3, #16
 800a8d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	0d5b      	lsrs	r3, r3, #21
 800a8ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a8f2:	4b08      	ldr	r3, [pc, #32]	@ (800a914 <I2C_TransferConfig+0x60>)
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	43db      	mvns	r3, r3
 800a8f8:	ea02 0103 	and.w	r1, r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	430a      	orrs	r2, r1
 800a904:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a906:	bf00      	nop
 800a908:	371c      	adds	r7, #28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	03ff63ff 	.word	0x03ff63ff

0800a918 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a92c:	4a39      	ldr	r2, [pc, #228]	@ (800aa14 <I2C_Enable_IRQ+0xfc>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d032      	beq.n	800a998 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a936:	4a38      	ldr	r2, [pc, #224]	@ (800aa18 <I2C_Enable_IRQ+0x100>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d02d      	beq.n	800a998 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a940:	4a36      	ldr	r2, [pc, #216]	@ (800aa1c <I2C_Enable_IRQ+0x104>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d028      	beq.n	800a998 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da03      	bge.n	800a956 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a954:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a956:	887b      	ldrh	r3, [r7, #2]
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a966:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a968:	887b      	ldrh	r3, [r7, #2]
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a978:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d103      	bne.n	800a988 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a986:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a988:	887b      	ldrh	r3, [r7, #2]
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d133      	bne.n	800a9f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f043 0320 	orr.w	r3, r3, #32
 800a994:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a996:	e02e      	b.n	800a9f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da03      	bge.n	800a9a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a9a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a9a8:	887b      	ldrh	r3, [r7, #2]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a9b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a9ba:	887b      	ldrh	r3, [r7, #2]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a9ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a9cc:	887b      	ldrh	r3, [r7, #2]
 800a9ce:	2b10      	cmp	r3, #16
 800a9d0:	d103      	bne.n	800a9da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a9d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a9da:	887b      	ldrh	r3, [r7, #2]
 800a9dc:	2b20      	cmp	r3, #32
 800a9de:	d103      	bne.n	800a9e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a9e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	2b40      	cmp	r3, #64	@ 0x40
 800a9ec:	d103      	bne.n	800a9f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6819      	ldr	r1, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	0800929d 	.word	0x0800929d
 800aa18:	08009719 	.word	0x08009719
 800aa1c:	08009491 	.word	0x08009491

0800aa20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aa30:	887b      	ldrh	r3, [r7, #2]
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00f      	beq.n	800aa5a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800aa40:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800aa4e:	2b28      	cmp	r3, #40	@ 0x28
 800aa50:	d003      	beq.n	800aa5a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800aa58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aa5a:	887b      	ldrh	r3, [r7, #2]
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00f      	beq.n	800aa84 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800aa6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800aa78:	2b28      	cmp	r3, #40	@ 0x28
 800aa7a:	d003      	beq.n	800aa84 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800aa82:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da03      	bge.n	800aa94 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800aa94:	887b      	ldrh	r3, [r7, #2]
 800aa96:	2b10      	cmp	r3, #16
 800aa98:	d103      	bne.n	800aaa2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800aaa0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d103      	bne.n	800aab0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f043 0320 	orr.w	r3, r3, #32
 800aaae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800aab0:	887b      	ldrh	r3, [r7, #2]
 800aab2:	2b40      	cmp	r3, #64	@ 0x40
 800aab4:	d103      	bne.n	800aabe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aabc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	43da      	mvns	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	400a      	ands	r2, r1
 800aace:	601a      	str	r2, [r3, #0]
}
 800aad0:	bf00      	nop
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d138      	bne.n	800ab64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e032      	b.n	800ab66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2224      	movs	r2, #36	@ 0x24
 800ab0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0201 	bic.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ab2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6819      	ldr	r1, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e000      	b.n	800ab66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab64:	2302      	movs	r3, #2
  }
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d139      	bne.n	800abfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab92:	2302      	movs	r3, #2
 800ab94:	e033      	b.n	800abfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2224      	movs	r2, #36	@ 0x24
 800aba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0201 	bic.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800abc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	021b      	lsls	r3, r3, #8
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	e000      	b.n	800abfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abfc:	2302      	movs	r3, #2
  }
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e0bf      	b.n	800ad9e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d106      	bne.n	800ac38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7f8 fbbe 	bl	80033b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ac4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6999      	ldr	r1, [r3, #24]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ac64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6899      	ldr	r1, [r3, #8]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b4a      	ldr	r3, [pc, #296]	@ (800ada8 <HAL_LTDC_Init+0x19c>)
 800ac80:	400b      	ands	r3, r1
 800ac82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	041b      	lsls	r3, r3, #16
 800ac8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6899      	ldr	r1, [r3, #8]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699a      	ldr	r2, [r3, #24]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68d9      	ldr	r1, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b3e      	ldr	r3, [pc, #248]	@ (800ada8 <HAL_LTDC_Init+0x19c>)
 800acae:	400b      	ands	r3, r1
 800acb0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68d9      	ldr	r1, [r3, #12]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a1a      	ldr	r2, [r3, #32]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	431a      	orrs	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6919      	ldr	r1, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4b33      	ldr	r3, [pc, #204]	@ (800ada8 <HAL_LTDC_Init+0x19c>)
 800acdc:	400b      	ands	r3, r1
 800acde:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace4:	041b      	lsls	r3, r3, #16
 800ace6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6919      	ldr	r1, [r3, #16]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6959      	ldr	r1, [r3, #20]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	4b27      	ldr	r3, [pc, #156]	@ (800ada8 <HAL_LTDC_Init+0x19c>)
 800ad0a:	400b      	ands	r3, r1
 800ad0c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	041b      	lsls	r3, r3, #16
 800ad14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6959      	ldr	r1, [r3, #20]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	431a      	orrs	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800ad4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800ad62:	431a      	orrs	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f042 0206 	orr.w	r2, r2, #6
 800ad7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0201 	orr.w	r2, r2, #1
 800ad8a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	f000f800 	.word	0xf000f800

0800adac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f003 0304 	and.w	r3, r3, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d023      	beq.n	800ae16 <HAL_LTDC_IRQHandler+0x6a>
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01e      	beq.n	800ae16 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0204 	bic.w	r2, r2, #4
 800ade6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2204      	movs	r2, #4
 800adee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800adf6:	f043 0201 	orr.w	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2204      	movs	r2, #4
 800ae04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f86f 	bl	800aef4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d023      	beq.n	800ae68 <HAL_LTDC_IRQHandler+0xbc>
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f003 0302 	and.w	r3, r3, #2
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01e      	beq.n	800ae68 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0202 	bic.w	r2, r2, #2
 800ae38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae48:	f043 0202 	orr.w	r2, r3, #2
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2204      	movs	r2, #4
 800ae56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f846 	bl	800aef4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01b      	beq.n	800aeaa <HAL_LTDC_IRQHandler+0xfe>
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d016      	beq.n	800aeaa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0201 	bic.w	r2, r2, #1
 800ae8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2201      	movs	r2, #1
 800ae92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f82f 	bl	800af08 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01b      	beq.n	800aeec <HAL_LTDC_IRQHandler+0x140>
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d016      	beq.n	800aeec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 0208 	bic.w	r2, r2, #8
 800aecc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2208      	movs	r2, #8
 800aed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f818 	bl	800af1c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800af30:	b5b0      	push	{r4, r5, r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_LTDC_ConfigLayer+0x1a>
 800af46:	2302      	movs	r3, #2
 800af48:	e02c      	b.n	800afa4 <HAL_LTDC_ConfigLayer+0x74>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2202      	movs	r2, #2
 800af56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2134      	movs	r1, #52	@ 0x34
 800af60:	fb01 f303 	mul.w	r3, r1, r3
 800af64:	4413      	add	r3, r2
 800af66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4614      	mov	r4, r2
 800af6e:	461d      	mov	r5, r3
 800af70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 f811 	bl	800afac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2201      	movs	r2, #1
 800af90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bdb0      	pop	{r4, r5, r7, pc}

0800afac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800afac:	b480      	push	{r7}
 800afae:	b089      	sub	sp, #36	@ 0x24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	0c1b      	lsrs	r3, r3, #16
 800afc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc8:	4413      	add	r3, r2
 800afca:	041b      	lsls	r3, r3, #16
 800afcc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	01db      	lsls	r3, r3, #7
 800afd8:	4413      	add	r3, r2
 800afda:	3384      	adds	r3, #132	@ 0x84
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	6812      	ldr	r2, [r2, #0]
 800afe2:	4611      	mov	r1, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	01d2      	lsls	r2, r2, #7
 800afe8:	440a      	add	r2, r1
 800afea:	3284      	adds	r2, #132	@ 0x84
 800afec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800aff0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	0c1b      	lsrs	r3, r3, #16
 800affe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b002:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b004:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	01db      	lsls	r3, r3, #7
 800b010:	440b      	add	r3, r1
 800b012:	3384      	adds	r3, #132	@ 0x84
 800b014:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b01a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b02a:	4413      	add	r3, r2
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	01db      	lsls	r3, r3, #7
 800b03a:	4413      	add	r3, r2
 800b03c:	3384      	adds	r3, #132	@ 0x84
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	6812      	ldr	r2, [r2, #0]
 800b044:	4611      	mov	r1, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	01d2      	lsls	r2, r2, #7
 800b04a:	440a      	add	r2, r1
 800b04c:	3284      	adds	r2, #132	@ 0x84
 800b04e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800b052:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b062:	4413      	add	r3, r2
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	01db      	lsls	r3, r3, #7
 800b070:	440b      	add	r3, r1
 800b072:	3384      	adds	r3, #132	@ 0x84
 800b074:	4619      	mov	r1, r3
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4313      	orrs	r3, r2
 800b07a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	01db      	lsls	r3, r3, #7
 800b086:	4413      	add	r3, r2
 800b088:	3384      	adds	r3, #132	@ 0x84
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	6812      	ldr	r2, [r2, #0]
 800b090:	4611      	mov	r1, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	01d2      	lsls	r2, r2, #7
 800b096:	440a      	add	r2, r1
 800b098:	3284      	adds	r2, #132	@ 0x84
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	01db      	lsls	r3, r3, #7
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3384      	adds	r3, #132	@ 0x84
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	061b      	lsls	r3, r3, #24
 800b0d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	01db      	lsls	r3, r3, #7
 800b0dc:	4413      	add	r3, r2
 800b0de:	3384      	adds	r3, #132	@ 0x84
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	01db      	lsls	r3, r3, #7
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3384      	adds	r3, #132	@ 0x84
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	431a      	orrs	r2, r3
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	431a      	orrs	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4619      	mov	r1, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	01db      	lsls	r3, r3, #7
 800b110:	440b      	add	r3, r1
 800b112:	3384      	adds	r3, #132	@ 0x84
 800b114:	4619      	mov	r1, r3
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	4313      	orrs	r3, r2
 800b11a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	461a      	mov	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	01db      	lsls	r3, r3, #7
 800b126:	4413      	add	r3, r2
 800b128:	3384      	adds	r3, #132	@ 0x84
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	4611      	mov	r1, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	01d2      	lsls	r2, r2, #7
 800b136:	440a      	add	r2, r1
 800b138:	3284      	adds	r2, #132	@ 0x84
 800b13a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b13e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	01db      	lsls	r3, r3, #7
 800b14a:	4413      	add	r3, r2
 800b14c:	3384      	adds	r3, #132	@ 0x84
 800b14e:	461a      	mov	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	01db      	lsls	r3, r3, #7
 800b160:	4413      	add	r3, r2
 800b162:	3384      	adds	r3, #132	@ 0x84
 800b164:	69da      	ldr	r2, [r3, #28]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4619      	mov	r1, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	01db      	lsls	r3, r3, #7
 800b170:	440b      	add	r3, r1
 800b172:	3384      	adds	r3, #132	@ 0x84
 800b174:	4619      	mov	r1, r3
 800b176:	4b58      	ldr	r3, [pc, #352]	@ (800b2d8 <LTDC_SetConfig+0x32c>)
 800b178:	4013      	ands	r3, r2
 800b17a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	69da      	ldr	r2, [r3, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	6809      	ldr	r1, [r1, #0]
 800b188:	4608      	mov	r0, r1
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	01c9      	lsls	r1, r1, #7
 800b18e:	4401      	add	r1, r0
 800b190:	3184      	adds	r1, #132	@ 0x84
 800b192:	4313      	orrs	r3, r2
 800b194:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	01db      	lsls	r3, r3, #7
 800b1a0:	4413      	add	r3, r2
 800b1a2:	3384      	adds	r3, #132	@ 0x84
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	01db      	lsls	r3, r3, #7
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3384      	adds	r3, #132	@ 0x84
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	01db      	lsls	r3, r3, #7
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3384      	adds	r3, #132	@ 0x84
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b1d8:	2304      	movs	r3, #4
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	e01b      	b.n	800b216 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d102      	bne.n	800b1ec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	61fb      	str	r3, [r7, #28]
 800b1ea:	e014      	b.n	800b216 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d00b      	beq.n	800b20c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d007      	beq.n	800b20c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b200:	2b03      	cmp	r3, #3
 800b202:	d003      	beq.n	800b20c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b208:	2b07      	cmp	r3, #7
 800b20a:	d102      	bne.n	800b212 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b20c:	2302      	movs	r3, #2
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e001      	b.n	800b216 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b212:	2301      	movs	r3, #1
 800b214:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	01db      	lsls	r3, r3, #7
 800b220:	4413      	add	r3, r2
 800b222:	3384      	adds	r3, #132	@ 0x84
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	6812      	ldr	r2, [r2, #0]
 800b22a:	4611      	mov	r1, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	01d2      	lsls	r2, r2, #7
 800b230:	440a      	add	r2, r1
 800b232:	3284      	adds	r2, #132	@ 0x84
 800b234:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800b238:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	1acb      	subs	r3, r1, r3
 800b250:	69f9      	ldr	r1, [r7, #28]
 800b252:	fb01 f303 	mul.w	r3, r1, r3
 800b256:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b258:	68f9      	ldr	r1, [r7, #12]
 800b25a:	6809      	ldr	r1, [r1, #0]
 800b25c:	4608      	mov	r0, r1
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	01c9      	lsls	r1, r1, #7
 800b262:	4401      	add	r1, r0
 800b264:	3184      	adds	r1, #132	@ 0x84
 800b266:	4313      	orrs	r3, r2
 800b268:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	01db      	lsls	r3, r3, #7
 800b274:	4413      	add	r3, r2
 800b276:	3384      	adds	r3, #132	@ 0x84
 800b278:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4619      	mov	r1, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	01db      	lsls	r3, r3, #7
 800b284:	440b      	add	r3, r1
 800b286:	3384      	adds	r3, #132	@ 0x84
 800b288:	4619      	mov	r1, r3
 800b28a:	4b14      	ldr	r3, [pc, #80]	@ (800b2dc <LTDC_SetConfig+0x330>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	461a      	mov	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	01db      	lsls	r3, r3, #7
 800b29a:	4413      	add	r3, r2
 800b29c:	3384      	adds	r3, #132	@ 0x84
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	01db      	lsls	r3, r3, #7
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3384      	adds	r3, #132	@ 0x84
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	6812      	ldr	r2, [r2, #0]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	01d2      	lsls	r2, r2, #7
 800b2c0:	440a      	add	r2, r1
 800b2c2:	3284      	adds	r2, #132	@ 0x84
 800b2c4:	f043 0301 	orr.w	r3, r3, #1
 800b2c8:	6013      	str	r3, [r2, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	3724      	adds	r7, #36	@ 0x24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	fffff8f8 	.word	0xfffff8f8
 800b2dc:	fffff800 	.word	0xfffff800

0800b2e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2e4:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a04      	ldr	r2, [pc, #16]	@ (800b2fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b2ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	40007000 	.word	0x40007000

0800b300 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b30a:	4b23      	ldr	r3, [pc, #140]	@ (800b398 <HAL_PWREx_EnableOverDrive+0x98>)
 800b30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30e:	4a22      	ldr	r2, [pc, #136]	@ (800b398 <HAL_PWREx_EnableOverDrive+0x98>)
 800b310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b314:	6413      	str	r3, [r2, #64]	@ 0x40
 800b316:	4b20      	ldr	r3, [pc, #128]	@ (800b398 <HAL_PWREx_EnableOverDrive+0x98>)
 800b318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b31a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b322:	4b1e      	ldr	r3, [pc, #120]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a1d      	ldr	r2, [pc, #116]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b32c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b32e:	f7f9 f857 	bl	80043e0 <HAL_GetTick>
 800b332:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b334:	e009      	b.n	800b34a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b336:	f7f9 f853 	bl	80043e0 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b344:	d901      	bls.n	800b34a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e022      	b.n	800b390 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b34a:	4b14      	ldr	r3, [pc, #80]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b356:	d1ee      	bne.n	800b336 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b358:	4b10      	ldr	r3, [pc, #64]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a0f      	ldr	r2, [pc, #60]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b35e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b362:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b364:	f7f9 f83c 	bl	80043e0 <HAL_GetTick>
 800b368:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b36a:	e009      	b.n	800b380 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b36c:	f7f9 f838 	bl	80043e0 <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b37a:	d901      	bls.n	800b380 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e007      	b.n	800b390 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b380:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b38c:	d1ee      	bne.n	800b36c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	40023800 	.word	0x40023800
 800b39c:	40007000 	.word	0x40007000

0800b3a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b3a8:	f7f9 f81a 	bl	80043e0 <HAL_GetTick>
 800b3ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e067      	b.n	800b488 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10b      	bne.n	800b3dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7f8 f8b9 	bl	8003544 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b3d2:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f85e 	bl	800b498 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	021a      	lsls	r2, r3, #8
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	2120      	movs	r1, #32
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f856 	bl	800b4b4 <QSPI_WaitFlagStateUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d135      	bne.n	800b47e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	4b1d      	ldr	r3, [pc, #116]	@ (800b490 <HAL_QSPI_Init+0xf0>)
 800b41a:	4013      	ands	r3, r2
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	6852      	ldr	r2, [r2, #4]
 800b420:	0611      	lsls	r1, r2, #24
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	68d2      	ldr	r2, [r2, #12]
 800b426:	4311      	orrs	r1, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	69d2      	ldr	r2, [r2, #28]
 800b42c:	4311      	orrs	r1, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	6a12      	ldr	r2, [r2, #32]
 800b432:	4311      	orrs	r1, r2
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	6812      	ldr	r2, [r2, #0]
 800b438:	430b      	orrs	r3, r1
 800b43a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	4b14      	ldr	r3, [pc, #80]	@ (800b494 <HAL_QSPI_Init+0xf4>)
 800b444:	4013      	ands	r3, r2
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6912      	ldr	r2, [r2, #16]
 800b44a:	0411      	lsls	r1, r2, #16
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	6952      	ldr	r2, [r2, #20]
 800b450:	4311      	orrs	r1, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6992      	ldr	r2, [r2, #24]
 800b456:	4311      	orrs	r1, r2
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6812      	ldr	r2, [r2, #0]
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0201 	orr.w	r2, r2, #1
 800b46e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b486:	7afb      	ldrb	r3, [r7, #11]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	00ffff2f 	.word	0x00ffff2f
 800b494:	ffe0f8fe 	.word	0xffe0f8fe

0800b498 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b4c4:	e01a      	b.n	800b4fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4cc:	d016      	beq.n	800b4fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ce:	f7f8 ff87 	bl	80043e0 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d302      	bcc.n	800b4e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10b      	bne.n	800b4fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f0:	f043 0201 	orr.w	r2, r3, #1
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e00e      	b.n	800b51a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	4013      	ands	r3, r2
 800b506:	2b00      	cmp	r3, #0
 800b508:	bf14      	ite	ne
 800b50a:	2301      	movne	r3, #1
 800b50c:	2300      	moveq	r3, #0
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	429a      	cmp	r2, r3
 800b516:	d1d6      	bne.n	800b4c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
	...

0800b524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b52c:	2300      	movs	r3, #0
 800b52e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e291      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8087 	beq.w	800b656 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b548:	4b96      	ldr	r3, [pc, #600]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	2b04      	cmp	r3, #4
 800b552:	d00c      	beq.n	800b56e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b554:	4b93      	ldr	r3, [pc, #588]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 030c 	and.w	r3, r3, #12
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d112      	bne.n	800b586 <HAL_RCC_OscConfig+0x62>
 800b560:	4b90      	ldr	r3, [pc, #576]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b56c:	d10b      	bne.n	800b586 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b56e:	4b8d      	ldr	r3, [pc, #564]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d06c      	beq.n	800b654 <HAL_RCC_OscConfig+0x130>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d168      	bne.n	800b654 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e26b      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b58e:	d106      	bne.n	800b59e <HAL_RCC_OscConfig+0x7a>
 800b590:	4b84      	ldr	r3, [pc, #528]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a83      	ldr	r2, [pc, #524]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	e02e      	b.n	800b5fc <HAL_RCC_OscConfig+0xd8>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10c      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x9c>
 800b5a6:	4b7f      	ldr	r3, [pc, #508]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a7e      	ldr	r2, [pc, #504]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	4b7c      	ldr	r3, [pc, #496]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a7b      	ldr	r2, [pc, #492]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	e01d      	b.n	800b5fc <HAL_RCC_OscConfig+0xd8>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5c8:	d10c      	bne.n	800b5e4 <HAL_RCC_OscConfig+0xc0>
 800b5ca:	4b76      	ldr	r3, [pc, #472]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a75      	ldr	r2, [pc, #468]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	4b73      	ldr	r3, [pc, #460]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a72      	ldr	r2, [pc, #456]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	e00b      	b.n	800b5fc <HAL_RCC_OscConfig+0xd8>
 800b5e4:	4b6f      	ldr	r3, [pc, #444]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a6e      	ldr	r2, [pc, #440]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	4b6c      	ldr	r3, [pc, #432]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a6b      	ldr	r2, [pc, #428]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b5f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d013      	beq.n	800b62c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b604:	f7f8 feec 	bl	80043e0 <HAL_GetTick>
 800b608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b60a:	e008      	b.n	800b61e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b60c:	f7f8 fee8 	bl	80043e0 <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	2b64      	cmp	r3, #100	@ 0x64
 800b618:	d901      	bls.n	800b61e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e21f      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b61e:	4b61      	ldr	r3, [pc, #388]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d0f0      	beq.n	800b60c <HAL_RCC_OscConfig+0xe8>
 800b62a:	e014      	b.n	800b656 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b62c:	f7f8 fed8 	bl	80043e0 <HAL_GetTick>
 800b630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b632:	e008      	b.n	800b646 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b634:	f7f8 fed4 	bl	80043e0 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	2b64      	cmp	r3, #100	@ 0x64
 800b640:	d901      	bls.n	800b646 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e20b      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b646:	4b57      	ldr	r3, [pc, #348]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f0      	bne.n	800b634 <HAL_RCC_OscConfig+0x110>
 800b652:	e000      	b.n	800b656 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0302 	and.w	r3, r3, #2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d069      	beq.n	800b736 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b662:	4b50      	ldr	r3, [pc, #320]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f003 030c 	and.w	r3, r3, #12
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b66e:	4b4d      	ldr	r3, [pc, #308]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f003 030c 	and.w	r3, r3, #12
 800b676:	2b08      	cmp	r3, #8
 800b678:	d11c      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x190>
 800b67a:	4b4a      	ldr	r3, [pc, #296]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d116      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b686:	4b47      	ldr	r3, [pc, #284]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d005      	beq.n	800b69e <HAL_RCC_OscConfig+0x17a>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d001      	beq.n	800b69e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e1df      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b69e:	4b41      	ldr	r3, [pc, #260]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	493d      	ldr	r1, [pc, #244]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6b2:	e040      	b.n	800b736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d023      	beq.n	800b704 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6bc:	4b39      	ldr	r3, [pc, #228]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a38      	ldr	r2, [pc, #224]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6c2:	f043 0301 	orr.w	r3, r3, #1
 800b6c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c8:	f7f8 fe8a 	bl	80043e0 <HAL_GetTick>
 800b6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6ce:	e008      	b.n	800b6e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6d0:	f7f8 fe86 	bl	80043e0 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e1bd      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6e2:	4b30      	ldr	r3, [pc, #192]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0f0      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ee:	4b2d      	ldr	r3, [pc, #180]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	4929      	ldr	r1, [pc, #164]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	600b      	str	r3, [r1, #0]
 800b702:	e018      	b.n	800b736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b704:	4b27      	ldr	r3, [pc, #156]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a26      	ldr	r2, [pc, #152]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b70a:	f023 0301 	bic.w	r3, r3, #1
 800b70e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b710:	f7f8 fe66 	bl	80043e0 <HAL_GetTick>
 800b714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b716:	e008      	b.n	800b72a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b718:	f7f8 fe62 	bl	80043e0 <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b02      	cmp	r3, #2
 800b724:	d901      	bls.n	800b72a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e199      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b72a:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1f0      	bne.n	800b718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0308 	and.w	r3, r3, #8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d038      	beq.n	800b7b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d019      	beq.n	800b77e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b74a:	4b16      	ldr	r3, [pc, #88]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b74c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b74e:	4a15      	ldr	r2, [pc, #84]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b750:	f043 0301 	orr.w	r3, r3, #1
 800b754:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b756:	f7f8 fe43 	bl	80043e0 <HAL_GetTick>
 800b75a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b75c:	e008      	b.n	800b770 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b75e:	f7f8 fe3f 	bl	80043e0 <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d901      	bls.n	800b770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e176      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b770:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d0f0      	beq.n	800b75e <HAL_RCC_OscConfig+0x23a>
 800b77c:	e01a      	b.n	800b7b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b77e:	4b09      	ldr	r3, [pc, #36]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b782:	4a08      	ldr	r2, [pc, #32]	@ (800b7a4 <HAL_RCC_OscConfig+0x280>)
 800b784:	f023 0301 	bic.w	r3, r3, #1
 800b788:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b78a:	f7f8 fe29 	bl	80043e0 <HAL_GetTick>
 800b78e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b790:	e00a      	b.n	800b7a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b792:	f7f8 fe25 	bl	80043e0 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d903      	bls.n	800b7a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e15c      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
 800b7a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7a8:	4b91      	ldr	r3, [pc, #580]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1ee      	bne.n	800b792 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80a4 	beq.w	800b90a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7c2:	4b8b      	ldr	r3, [pc, #556]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10d      	bne.n	800b7ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7ce:	4b88      	ldr	r3, [pc, #544]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d2:	4a87      	ldr	r2, [pc, #540]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b7d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7d8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b7da:	4b85      	ldr	r3, [pc, #532]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7e2:	60bb      	str	r3, [r7, #8]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7ea:	4b82      	ldr	r3, [pc, #520]	@ (800b9f4 <HAL_RCC_OscConfig+0x4d0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d118      	bne.n	800b828 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b7f6:	4b7f      	ldr	r3, [pc, #508]	@ (800b9f4 <HAL_RCC_OscConfig+0x4d0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a7e      	ldr	r2, [pc, #504]	@ (800b9f4 <HAL_RCC_OscConfig+0x4d0>)
 800b7fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b802:	f7f8 fded 	bl	80043e0 <HAL_GetTick>
 800b806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b808:	e008      	b.n	800b81c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b80a:	f7f8 fde9 	bl	80043e0 <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	2b64      	cmp	r3, #100	@ 0x64
 800b816:	d901      	bls.n	800b81c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	e120      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b81c:	4b75      	ldr	r3, [pc, #468]	@ (800b9f4 <HAL_RCC_OscConfig+0x4d0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0f0      	beq.n	800b80a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d106      	bne.n	800b83e <HAL_RCC_OscConfig+0x31a>
 800b830:	4b6f      	ldr	r3, [pc, #444]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b834:	4a6e      	ldr	r2, [pc, #440]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b83c:	e02d      	b.n	800b89a <HAL_RCC_OscConfig+0x376>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <HAL_RCC_OscConfig+0x33c>
 800b846:	4b6a      	ldr	r3, [pc, #424]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b84a:	4a69      	ldr	r2, [pc, #420]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	6713      	str	r3, [r2, #112]	@ 0x70
 800b852:	4b67      	ldr	r3, [pc, #412]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b856:	4a66      	ldr	r2, [pc, #408]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b858:	f023 0304 	bic.w	r3, r3, #4
 800b85c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b85e:	e01c      	b.n	800b89a <HAL_RCC_OscConfig+0x376>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	2b05      	cmp	r3, #5
 800b866:	d10c      	bne.n	800b882 <HAL_RCC_OscConfig+0x35e>
 800b868:	4b61      	ldr	r3, [pc, #388]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b86a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b86c:	4a60      	ldr	r2, [pc, #384]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b86e:	f043 0304 	orr.w	r3, r3, #4
 800b872:	6713      	str	r3, [r2, #112]	@ 0x70
 800b874:	4b5e      	ldr	r3, [pc, #376]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b878:	4a5d      	ldr	r2, [pc, #372]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b880:	e00b      	b.n	800b89a <HAL_RCC_OscConfig+0x376>
 800b882:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b886:	4a5a      	ldr	r2, [pc, #360]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b888:	f023 0301 	bic.w	r3, r3, #1
 800b88c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b88e:	4b58      	ldr	r3, [pc, #352]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b892:	4a57      	ldr	r2, [pc, #348]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b894:	f023 0304 	bic.w	r3, r3, #4
 800b898:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d015      	beq.n	800b8ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a2:	f7f8 fd9d 	bl	80043e0 <HAL_GetTick>
 800b8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8a8:	e00a      	b.n	800b8c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8aa:	f7f8 fd99 	bl	80043e0 <HAL_GetTick>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d901      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e0ce      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8c0:	4b4b      	ldr	r3, [pc, #300]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b8c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0ee      	beq.n	800b8aa <HAL_RCC_OscConfig+0x386>
 800b8cc:	e014      	b.n	800b8f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ce:	f7f8 fd87 	bl	80043e0 <HAL_GetTick>
 800b8d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8d4:	e00a      	b.n	800b8ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8d6:	f7f8 fd83 	bl	80043e0 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d901      	bls.n	800b8ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e0b8      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8ec:	4b40      	ldr	r3, [pc, #256]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b8ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8f0:	f003 0302 	and.w	r3, r3, #2
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1ee      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d105      	bne.n	800b90a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8fe:	4b3c      	ldr	r3, [pc, #240]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b902:	4a3b      	ldr	r2, [pc, #236]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b908:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 80a4 	beq.w	800ba5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b914:	4b36      	ldr	r3, [pc, #216]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f003 030c 	and.w	r3, r3, #12
 800b91c:	2b08      	cmp	r3, #8
 800b91e:	d06b      	beq.n	800b9f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d149      	bne.n	800b9bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b928:	4b31      	ldr	r3, [pc, #196]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a30      	ldr	r2, [pc, #192]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b92e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b934:	f7f8 fd54 	bl	80043e0 <HAL_GetTick>
 800b938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b93c:	f7f8 fd50 	bl	80043e0 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b02      	cmp	r3, #2
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e087      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b94e:	4b28      	ldr	r3, [pc, #160]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1f0      	bne.n	800b93c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	69da      	ldr	r2, [r3, #28]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	019b      	lsls	r3, r3, #6
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	3b01      	subs	r3, #1
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	431a      	orrs	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	061b      	lsls	r3, r3, #24
 800b97e:	4313      	orrs	r3, r2
 800b980:	4a1b      	ldr	r2, [pc, #108]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b982:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b986:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b988:	4b19      	ldr	r3, [pc, #100]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a18      	ldr	r2, [pc, #96]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b98e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b994:	f7f8 fd24 	bl	80043e0 <HAL_GetTick>
 800b998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b99a:	e008      	b.n	800b9ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b99c:	f7f8 fd20 	bl	80043e0 <HAL_GetTick>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d901      	bls.n	800b9ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e057      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9ae:	4b10      	ldr	r3, [pc, #64]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0f0      	beq.n	800b99c <HAL_RCC_OscConfig+0x478>
 800b9ba:	e04f      	b.n	800ba5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a0b      	ldr	r2, [pc, #44]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b9c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c8:	f7f8 fd0a 	bl	80043e0 <HAL_GetTick>
 800b9cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9ce:	e008      	b.n	800b9e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9d0:	f7f8 fd06 	bl	80043e0 <HAL_GetTick>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d901      	bls.n	800b9e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e03d      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9e2:	4b03      	ldr	r3, [pc, #12]	@ (800b9f0 <HAL_RCC_OscConfig+0x4cc>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1f0      	bne.n	800b9d0 <HAL_RCC_OscConfig+0x4ac>
 800b9ee:	e035      	b.n	800ba5c <HAL_RCC_OscConfig+0x538>
 800b9f0:	40023800 	.word	0x40023800
 800b9f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b9f8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba68 <HAL_RCC_OscConfig+0x544>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d028      	beq.n	800ba58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d121      	bne.n	800ba58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d11a      	bne.n	800ba58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ba28:	4013      	ands	r3, r2
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ba2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d111      	bne.n	800ba58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	3b01      	subs	r3, #1
 800ba42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d107      	bne.n	800ba58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d001      	beq.n	800ba5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	40023800 	.word	0x40023800

0800ba6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e0d0      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba84:	4b6a      	ldr	r3, [pc, #424]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d910      	bls.n	800bab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba92:	4b67      	ldr	r3, [pc, #412]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f023 020f 	bic.w	r2, r3, #15
 800ba9a:	4965      	ldr	r1, [pc, #404]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800baa2:	4b63      	ldr	r3, [pc, #396]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d001      	beq.n	800bab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e0b8      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0302 	and.w	r3, r3, #2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d020      	beq.n	800bb02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bacc:	4b59      	ldr	r3, [pc, #356]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	4a58      	ldr	r2, [pc, #352]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bad2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800bad6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bae4:	4b53      	ldr	r3, [pc, #332]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	4a52      	ldr	r2, [pc, #328]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800baea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800baee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800baf0:	4b50      	ldr	r3, [pc, #320]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	494d      	ldr	r1, [pc, #308]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d040      	beq.n	800bb90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d107      	bne.n	800bb26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb16:	4b47      	ldr	r3, [pc, #284]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d115      	bne.n	800bb4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e07f      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d107      	bne.n	800bb3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb2e:	4b41      	ldr	r3, [pc, #260]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d109      	bne.n	800bb4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e073      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb3e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 0302 	and.w	r3, r3, #2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e06b      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb4e:	4b39      	ldr	r3, [pc, #228]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f023 0203 	bic.w	r2, r3, #3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	4936      	ldr	r1, [pc, #216]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb60:	f7f8 fc3e 	bl	80043e0 <HAL_GetTick>
 800bb64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb66:	e00a      	b.n	800bb7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb68:	f7f8 fc3a 	bl	80043e0 <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d901      	bls.n	800bb7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e053      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb7e:	4b2d      	ldr	r3, [pc, #180]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f003 020c 	and.w	r2, r3, #12
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d1eb      	bne.n	800bb68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb90:	4b27      	ldr	r3, [pc, #156]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d210      	bcs.n	800bbc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb9e:	4b24      	ldr	r3, [pc, #144]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f023 020f 	bic.w	r2, r3, #15
 800bba6:	4922      	ldr	r1, [pc, #136]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbae:	4b20      	ldr	r3, [pc, #128]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 030f 	and.w	r3, r3, #15
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d001      	beq.n	800bbc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e032      	b.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbcc:	4b19      	ldr	r3, [pc, #100]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	4916      	ldr	r1, [pc, #88]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0308 	and.w	r3, r3, #8
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bbea:	4b12      	ldr	r3, [pc, #72]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	490e      	ldr	r1, [pc, #56]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bbfe:	f000 f821 	bl	800bc44 <HAL_RCC_GetSysClockFreq>
 800bc02:	4602      	mov	r2, r0
 800bc04:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	091b      	lsrs	r3, r3, #4
 800bc0a:	f003 030f 	and.w	r3, r3, #15
 800bc0e:	490a      	ldr	r1, [pc, #40]	@ (800bc38 <HAL_RCC_ClockConfig+0x1cc>)
 800bc10:	5ccb      	ldrb	r3, [r1, r3]
 800bc12:	fa22 f303 	lsr.w	r3, r2, r3
 800bc16:	4a09      	ldr	r2, [pc, #36]	@ (800bc3c <HAL_RCC_ClockConfig+0x1d0>)
 800bc18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bc1a:	4b09      	ldr	r3, [pc, #36]	@ (800bc40 <HAL_RCC_ClockConfig+0x1d4>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f8 f9b0 	bl	8003f84 <HAL_InitTick>

  return HAL_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	40023c00 	.word	0x40023c00
 800bc34:	40023800 	.word	0x40023800
 800bc38:	0801dce4 	.word	0x0801dce4
 800bc3c:	20000000 	.word	0x20000000
 800bc40:	20000004 	.word	0x20000004

0800bc44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc48:	b090      	sub	sp, #64	@ 0x40
 800bc4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc54:	2300      	movs	r3, #0
 800bc56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc5c:	4b59      	ldr	r3, [pc, #356]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f003 030c 	and.w	r3, r3, #12
 800bc64:	2b08      	cmp	r3, #8
 800bc66:	d00d      	beq.n	800bc84 <HAL_RCC_GetSysClockFreq+0x40>
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	f200 80a1 	bhi.w	800bdb0 <HAL_RCC_GetSysClockFreq+0x16c>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_RCC_GetSysClockFreq+0x34>
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d003      	beq.n	800bc7e <HAL_RCC_GetSysClockFreq+0x3a>
 800bc76:	e09b      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc78:	4b53      	ldr	r3, [pc, #332]	@ (800bdc8 <HAL_RCC_GetSysClockFreq+0x184>)
 800bc7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc7c:	e09b      	b.n	800bdb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc7e:	4b53      	ldr	r3, [pc, #332]	@ (800bdcc <HAL_RCC_GetSysClockFreq+0x188>)
 800bc80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc82:	e098      	b.n	800bdb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc84:	4b4f      	ldr	r3, [pc, #316]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bc8e:	4b4d      	ldr	r3, [pc, #308]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d028      	beq.n	800bcec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc9a:	4b4a      	ldr	r3, [pc, #296]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	099b      	lsrs	r3, r3, #6
 800bca0:	2200      	movs	r2, #0
 800bca2:	623b      	str	r3, [r7, #32]
 800bca4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bcac:	2100      	movs	r1, #0
 800bcae:	4b47      	ldr	r3, [pc, #284]	@ (800bdcc <HAL_RCC_GetSysClockFreq+0x188>)
 800bcb0:	fb03 f201 	mul.w	r2, r3, r1
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	fb00 f303 	mul.w	r3, r0, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	4a43      	ldr	r2, [pc, #268]	@ (800bdcc <HAL_RCC_GetSysClockFreq+0x188>)
 800bcbe:	fba0 1202 	umull	r1, r2, r0, r2
 800bcc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcc4:	460a      	mov	r2, r1
 800bcc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bcc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcca:	4413      	add	r3, r2
 800bccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	61bb      	str	r3, [r7, #24]
 800bcd4:	61fa      	str	r2, [r7, #28]
 800bcd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bcda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bcde:	f7f4 ffd3 	bl	8000c88 <__aeabi_uldivmod>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4613      	mov	r3, r2
 800bce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcea:	e053      	b.n	800bd94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcec:	4b35      	ldr	r3, [pc, #212]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	099b      	lsrs	r3, r3, #6
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	613b      	str	r3, [r7, #16]
 800bcf6:	617a      	str	r2, [r7, #20]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bcfe:	f04f 0b00 	mov.w	fp, #0
 800bd02:	4652      	mov	r2, sl
 800bd04:	465b      	mov	r3, fp
 800bd06:	f04f 0000 	mov.w	r0, #0
 800bd0a:	f04f 0100 	mov.w	r1, #0
 800bd0e:	0159      	lsls	r1, r3, #5
 800bd10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bd14:	0150      	lsls	r0, r2, #5
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	ebb2 080a 	subs.w	r8, r2, sl
 800bd1e:	eb63 090b 	sbc.w	r9, r3, fp
 800bd22:	f04f 0200 	mov.w	r2, #0
 800bd26:	f04f 0300 	mov.w	r3, #0
 800bd2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bd2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bd32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bd36:	ebb2 0408 	subs.w	r4, r2, r8
 800bd3a:	eb63 0509 	sbc.w	r5, r3, r9
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	f04f 0300 	mov.w	r3, #0
 800bd46:	00eb      	lsls	r3, r5, #3
 800bd48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd4c:	00e2      	lsls	r2, r4, #3
 800bd4e:	4614      	mov	r4, r2
 800bd50:	461d      	mov	r5, r3
 800bd52:	eb14 030a 	adds.w	r3, r4, sl
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	eb45 030b 	adc.w	r3, r5, fp
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	028b      	lsls	r3, r1, #10
 800bd6e:	4621      	mov	r1, r4
 800bd70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bd74:	4621      	mov	r1, r4
 800bd76:	028a      	lsls	r2, r1, #10
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7e:	2200      	movs	r2, #0
 800bd80:	60bb      	str	r3, [r7, #8]
 800bd82:	60fa      	str	r2, [r7, #12]
 800bd84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd88:	f7f4 ff7e 	bl	8000c88 <__aeabi_uldivmod>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4613      	mov	r3, r2
 800bd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bd94:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <HAL_RCC_GetSysClockFreq+0x180>)
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	f003 0303 	and.w	r3, r3, #3
 800bd9e:	3301      	adds	r3, #1
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bda4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bdae:	e002      	b.n	800bdb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdb0:	4b05      	ldr	r3, [pc, #20]	@ (800bdc8 <HAL_RCC_GetSysClockFreq+0x184>)
 800bdb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bdb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3740      	adds	r7, #64	@ 0x40
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdc2:	bf00      	nop
 800bdc4:	40023800 	.word	0x40023800
 800bdc8:	00f42400 	.word	0x00f42400
 800bdcc:	017d7840 	.word	0x017d7840

0800bdd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bdd4:	4b03      	ldr	r3, [pc, #12]	@ (800bde4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	20000000 	.word	0x20000000

0800bde8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bdec:	f7ff fff0 	bl	800bdd0 <HAL_RCC_GetHCLKFreq>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	4b05      	ldr	r3, [pc, #20]	@ (800be08 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	0a9b      	lsrs	r3, r3, #10
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	4903      	ldr	r1, [pc, #12]	@ (800be0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdfe:	5ccb      	ldrb	r3, [r1, r3]
 800be00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be04:	4618      	mov	r0, r3
 800be06:	bd80      	pop	{r7, pc}
 800be08:	40023800 	.word	0x40023800
 800be0c:	0801dcf4 	.word	0x0801dcf4

0800be10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be14:	f7ff ffdc 	bl	800bdd0 <HAL_RCC_GetHCLKFreq>
 800be18:	4602      	mov	r2, r0
 800be1a:	4b05      	ldr	r3, [pc, #20]	@ (800be30 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	0b5b      	lsrs	r3, r3, #13
 800be20:	f003 0307 	and.w	r3, r3, #7
 800be24:	4903      	ldr	r1, [pc, #12]	@ (800be34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be26:	5ccb      	ldrb	r3, [r1, r3]
 800be28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	40023800 	.word	0x40023800
 800be34:	0801dcf4 	.word	0x0801dcf4

0800be38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	220f      	movs	r2, #15
 800be46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800be48:	4b12      	ldr	r3, [pc, #72]	@ (800be94 <HAL_RCC_GetClockConfig+0x5c>)
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	f003 0203 	and.w	r2, r3, #3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800be54:	4b0f      	ldr	r3, [pc, #60]	@ (800be94 <HAL_RCC_GetClockConfig+0x5c>)
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800be60:	4b0c      	ldr	r3, [pc, #48]	@ (800be94 <HAL_RCC_GetClockConfig+0x5c>)
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800be6c:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <HAL_RCC_GetClockConfig+0x5c>)
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	08db      	lsrs	r3, r3, #3
 800be72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800be7a:	4b07      	ldr	r3, [pc, #28]	@ (800be98 <HAL_RCC_GetClockConfig+0x60>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 020f 	and.w	r2, r3, #15
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	601a      	str	r2, [r3, #0]
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	40023800 	.word	0x40023800
 800be98:	40023c00 	.word	0x40023c00

0800be9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d012      	beq.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bec4:	4b69      	ldr	r3, [pc, #420]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	4a68      	ldr	r2, [pc, #416]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800beca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bece:	6093      	str	r3, [r2, #8]
 800bed0:	4b66      	ldr	r3, [pc, #408]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bed2:	689a      	ldr	r2, [r3, #8]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed8:	4964      	ldr	r1, [pc, #400]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bee6:	2301      	movs	r3, #1
 800bee8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d017      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bef6:	4b5d      	ldr	r3, [pc, #372]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800befc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf04:	4959      	ldr	r1, [pc, #356]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf14:	d101      	bne.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bf16:	2301      	movs	r3, #1
 800bf18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bf22:	2301      	movs	r3, #1
 800bf24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d017      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bf32:	4b4e      	ldr	r3, [pc, #312]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf40:	494a      	ldr	r1, [pc, #296]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf50:	d101      	bne.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bf52:	2301      	movs	r3, #1
 800bf54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 808b 	beq.w	800c096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf80:	4b3a      	ldr	r3, [pc, #232]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf84:	4a39      	ldr	r2, [pc, #228]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf8a:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf8c:	4b37      	ldr	r3, [pc, #220]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf94:	60bb      	str	r3, [r7, #8]
 800bf96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bf98:	4b35      	ldr	r3, [pc, #212]	@ (800c070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a34      	ldr	r2, [pc, #208]	@ (800c070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfa4:	f7f8 fa1c 	bl	80043e0 <HAL_GetTick>
 800bfa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfaa:	e008      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfac:	f7f8 fa18 	bl	80043e0 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b64      	cmp	r3, #100	@ 0x64
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e357      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfbe:	4b2c      	ldr	r3, [pc, #176]	@ (800c070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0f0      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bfca:	4b28      	ldr	r3, [pc, #160]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d035      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d02e      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfe8:	4b20      	ldr	r3, [pc, #128]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bff0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bff2:	4b1e      	ldr	r3, [pc, #120]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bff6:	4a1d      	ldr	r2, [pc, #116]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bffc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bffe:	4b1b      	ldr	r3, [pc, #108]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c002:	4a1a      	ldr	r2, [pc, #104]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c008:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c00a:	4a18      	ldr	r2, [pc, #96]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c010:	4b16      	ldr	r3, [pc, #88]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d114      	bne.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c01c:	f7f8 f9e0 	bl	80043e0 <HAL_GetTick>
 800c020:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c022:	e00a      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c024:	f7f8 f9dc 	bl	80043e0 <HAL_GetTick>
 800c028:	4602      	mov	r2, r0
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c032:	4293      	cmp	r3, r2
 800c034:	d901      	bls.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e319      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c03a:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c03c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03e:	f003 0302 	and.w	r3, r3, #2
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0ee      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c04e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c052:	d111      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c054:	4b05      	ldr	r3, [pc, #20]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c060:	4b04      	ldr	r3, [pc, #16]	@ (800c074 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c062:	400b      	ands	r3, r1
 800c064:	4901      	ldr	r1, [pc, #4]	@ (800c06c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c066:	4313      	orrs	r3, r2
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	e00b      	b.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c06c:	40023800 	.word	0x40023800
 800c070:	40007000 	.word	0x40007000
 800c074:	0ffffcff 	.word	0x0ffffcff
 800c078:	4baa      	ldr	r3, [pc, #680]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	4aa9      	ldr	r2, [pc, #676]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c07e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c082:	6093      	str	r3, [r2, #8]
 800c084:	4ba7      	ldr	r3, [pc, #668]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c086:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c090:	49a4      	ldr	r1, [pc, #656]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c092:	4313      	orrs	r3, r2
 800c094:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0310 	and.w	r3, r3, #16
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d010      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0a2:	4ba0      	ldr	r3, [pc, #640]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0a8:	4a9e      	ldr	r2, [pc, #632]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c0b2:	4b9c      	ldr	r3, [pc, #624]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0bc:	4999      	ldr	r1, [pc, #612]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c0d0:	4b94      	ldr	r3, [pc, #592]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0de:	4991      	ldr	r1, [pc, #580]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c0f2:	4b8c      	ldr	r3, [pc, #560]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c100:	4988      	ldr	r1, [pc, #544]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c102:	4313      	orrs	r3, r2
 800c104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00a      	beq.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c114:	4b83      	ldr	r3, [pc, #524]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c122:	4980      	ldr	r1, [pc, #512]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c124:	4313      	orrs	r3, r2
 800c126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c136:	4b7b      	ldr	r3, [pc, #492]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c13c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c144:	4977      	ldr	r1, [pc, #476]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c146:	4313      	orrs	r3, r2
 800c148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00a      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c158:	4b72      	ldr	r3, [pc, #456]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c15e:	f023 0203 	bic.w	r2, r3, #3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c166:	496f      	ldr	r1, [pc, #444]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c168:	4313      	orrs	r3, r2
 800c16a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c17a:	4b6a      	ldr	r3, [pc, #424]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c180:	f023 020c 	bic.w	r2, r3, #12
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c188:	4966      	ldr	r1, [pc, #408]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00a      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c19c:	4b61      	ldr	r3, [pc, #388]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1aa:	495e      	ldr	r1, [pc, #376]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c1be:	4b59      	ldr	r3, [pc, #356]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1cc:	4955      	ldr	r1, [pc, #340]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00a      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c1e0:	4b50      	ldr	r3, [pc, #320]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ee:	494d      	ldr	r1, [pc, #308]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00a      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c202:	4b48      	ldr	r3, [pc, #288]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c208:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c210:	4944      	ldr	r1, [pc, #272]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c212:	4313      	orrs	r3, r2
 800c214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00a      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c224:	4b3f      	ldr	r3, [pc, #252]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c22a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c232:	493c      	ldr	r1, [pc, #240]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c234:	4313      	orrs	r3, r2
 800c236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00a      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c246:	4b37      	ldr	r3, [pc, #220]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c24c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c254:	4933      	ldr	r1, [pc, #204]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c256:	4313      	orrs	r3, r2
 800c258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00a      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c268:	4b2e      	ldr	r3, [pc, #184]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c26e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c276:	492b      	ldr	r1, [pc, #172]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c278:	4313      	orrs	r3, r2
 800c27a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d011      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c28a:	4b26      	ldr	r3, [pc, #152]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c290:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c298:	4922      	ldr	r1, [pc, #136]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c2a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2a8:	d101      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0308 	and.w	r3, r3, #8
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c2ca:	4b16      	ldr	r3, [pc, #88]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2d8:	4912      	ldr	r1, [pc, #72]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2fc:	4909      	ldr	r1, [pc, #36]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d006      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 80d9 	beq.w	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c318:	4b02      	ldr	r3, [pc, #8]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a01      	ldr	r2, [pc, #4]	@ (800c324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c31e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c322:	e001      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c324:	40023800 	.word	0x40023800
 800c328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c32a:	f7f8 f859 	bl	80043e0 <HAL_GetTick>
 800c32e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c330:	e008      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c332:	f7f8 f855 	bl	80043e0 <HAL_GetTick>
 800c336:	4602      	mov	r2, r0
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	2b64      	cmp	r3, #100	@ 0x64
 800c33e:	d901      	bls.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e194      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c344:	4b6c      	ldr	r3, [pc, #432]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1f0      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d021      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c360:	2b00      	cmp	r3, #0
 800c362:	d11d      	bne.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c364:	4b64      	ldr	r3, [pc, #400]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c36a:	0c1b      	lsrs	r3, r3, #16
 800c36c:	f003 0303 	and.w	r3, r3, #3
 800c370:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c372:	4b61      	ldr	r3, [pc, #388]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c378:	0e1b      	lsrs	r3, r3, #24
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	019a      	lsls	r2, r3, #6
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	041b      	lsls	r3, r3, #16
 800c38a:	431a      	orrs	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	061b      	lsls	r3, r3, #24
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	071b      	lsls	r3, r3, #28
 800c398:	4957      	ldr	r1, [pc, #348]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d004      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3b4:	d00a      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d02e      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3ca:	d129      	bne.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c3cc:	4b4a      	ldr	r3, [pc, #296]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3d2:	0c1b      	lsrs	r3, r3, #16
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c3da:	4b47      	ldr	r3, [pc, #284]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3e0:	0f1b      	lsrs	r3, r3, #28
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	019a      	lsls	r2, r3, #6
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	041b      	lsls	r3, r3, #16
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	061b      	lsls	r3, r3, #24
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	071b      	lsls	r3, r3, #28
 800c400:	493d      	ldr	r1, [pc, #244]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c402:	4313      	orrs	r3, r2
 800c404:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c408:	4b3b      	ldr	r3, [pc, #236]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c40e:	f023 021f 	bic.w	r2, r3, #31
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c416:	3b01      	subs	r3, #1
 800c418:	4937      	ldr	r1, [pc, #220]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01d      	beq.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c42c:	4b32      	ldr	r3, [pc, #200]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c432:	0e1b      	lsrs	r3, r3, #24
 800c434:	f003 030f 	and.w	r3, r3, #15
 800c438:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c43a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c440:	0f1b      	lsrs	r3, r3, #28
 800c442:	f003 0307 	and.w	r3, r3, #7
 800c446:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	019a      	lsls	r2, r3, #6
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	041b      	lsls	r3, r3, #16
 800c454:	431a      	orrs	r2, r3
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	061b      	lsls	r3, r3, #24
 800c45a:	431a      	orrs	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	071b      	lsls	r3, r3, #28
 800c460:	4925      	ldr	r1, [pc, #148]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c462:	4313      	orrs	r3, r2
 800c464:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d011      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	019a      	lsls	r2, r3, #6
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	041b      	lsls	r3, r3, #16
 800c480:	431a      	orrs	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	061b      	lsls	r3, r3, #24
 800c488:	431a      	orrs	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	071b      	lsls	r3, r3, #28
 800c490:	4919      	ldr	r1, [pc, #100]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c492:	4313      	orrs	r3, r2
 800c494:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c498:	4b17      	ldr	r3, [pc, #92]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a16      	ldr	r2, [pc, #88]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c49e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4a4:	f7f7 ff9c 	bl	80043e0 <HAL_GetTick>
 800c4a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4aa:	e008      	b.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c4ac:	f7f7 ff98 	bl	80043e0 <HAL_GetTick>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	2b64      	cmp	r3, #100	@ 0x64
 800c4b8:	d901      	bls.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e0d7      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4be:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0f0      	beq.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	f040 80cd 	bne.w	800c66c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c4d2:	4b09      	ldr	r3, [pc, #36]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a08      	ldr	r2, [pc, #32]	@ (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4de:	f7f7 ff7f 	bl	80043e0 <HAL_GetTick>
 800c4e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4e4:	e00a      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c4e6:	f7f7 ff7b 	bl	80043e0 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	2b64      	cmp	r3, #100	@ 0x64
 800c4f2:	d903      	bls.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e0ba      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c4f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4fc:	4b5e      	ldr	r3, [pc, #376]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c508:	d0ed      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c526:	2b00      	cmp	r3, #0
 800c528:	d02e      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d12a      	bne.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c532:	4b51      	ldr	r3, [pc, #324]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c538:	0c1b      	lsrs	r3, r3, #16
 800c53a:	f003 0303 	and.w	r3, r3, #3
 800c53e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c540:	4b4d      	ldr	r3, [pc, #308]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c546:	0f1b      	lsrs	r3, r3, #28
 800c548:	f003 0307 	and.w	r3, r3, #7
 800c54c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	695b      	ldr	r3, [r3, #20]
 800c552:	019a      	lsls	r2, r3, #6
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	041b      	lsls	r3, r3, #16
 800c558:	431a      	orrs	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	061b      	lsls	r3, r3, #24
 800c560:	431a      	orrs	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	071b      	lsls	r3, r3, #28
 800c566:	4944      	ldr	r1, [pc, #272]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c56e:	4b42      	ldr	r3, [pc, #264]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c574:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	3b01      	subs	r3, #1
 800c57e:	021b      	lsls	r3, r3, #8
 800c580:	493d      	ldr	r1, [pc, #244]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c582:	4313      	orrs	r3, r2
 800c584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d022      	beq.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c59c:	d11d      	bne.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c59e:	4b36      	ldr	r3, [pc, #216]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5a4:	0e1b      	lsrs	r3, r3, #24
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c5ac:	4b32      	ldr	r3, [pc, #200]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5b2:	0f1b      	lsrs	r3, r3, #28
 800c5b4:	f003 0307 	and.w	r3, r3, #7
 800c5b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	019a      	lsls	r2, r3, #6
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	041b      	lsls	r3, r3, #16
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	061b      	lsls	r3, r3, #24
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	071b      	lsls	r3, r3, #28
 800c5d2:	4929      	ldr	r1, [pc, #164]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0308 	and.w	r3, r3, #8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d028      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c5e6:	4b24      	ldr	r3, [pc, #144]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5ec:	0e1b      	lsrs	r3, r3, #24
 800c5ee:	f003 030f 	and.w	r3, r3, #15
 800c5f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c5f4:	4b20      	ldr	r3, [pc, #128]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5fa:	0c1b      	lsrs	r3, r3, #16
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	019a      	lsls	r2, r3, #6
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	041b      	lsls	r3, r3, #16
 800c60c:	431a      	orrs	r2, r3
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	061b      	lsls	r3, r3, #24
 800c612:	431a      	orrs	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	071b      	lsls	r3, r3, #28
 800c61a:	4917      	ldr	r1, [pc, #92]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c622:	4b15      	ldr	r3, [pc, #84]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c628:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c630:	4911      	ldr	r1, [pc, #68]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c632:	4313      	orrs	r3, r2
 800c634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c638:	4b0f      	ldr	r3, [pc, #60]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a0e      	ldr	r2, [pc, #56]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c63e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c644:	f7f7 fecc 	bl	80043e0 <HAL_GetTick>
 800c648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c64a:	e008      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c64c:	f7f7 fec8 	bl	80043e0 <HAL_GetTick>
 800c650:	4602      	mov	r2, r0
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	2b64      	cmp	r3, #100	@ 0x64
 800c658:	d901      	bls.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e007      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c65e:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c66a:	d1ef      	bne.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	40023800 	.word	0x40023800

0800c67c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c69a:	f040 808d 	bne.w	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c69e:	4b93      	ldr	r3, [pc, #588]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c6ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6b4:	d07c      	beq.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6bc:	d87b      	bhi.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d004      	beq.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6ca:	d039      	beq.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c6cc:	e073      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c6ce:	4b87      	ldr	r3, [pc, #540]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d108      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c6da:	4b84      	ldr	r3, [pc, #528]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6e2:	4a83      	ldr	r2, [pc, #524]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e8:	613b      	str	r3, [r7, #16]
 800c6ea:	e007      	b.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c6ec:	4b7f      	ldr	r3, [pc, #508]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6f4:	4a7f      	ldr	r2, [pc, #508]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c6fc:	4b7b      	ldr	r3, [pc, #492]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c702:	0e1b      	lsrs	r3, r3, #24
 800c704:	f003 030f 	and.w	r3, r3, #15
 800c708:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c70a:	4b78      	ldr	r3, [pc, #480]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c710:	099b      	lsrs	r3, r3, #6
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	fb03 f202 	mul.w	r2, r3, r2
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c722:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c724:	4b71      	ldr	r3, [pc, #452]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c72a:	0a1b      	lsrs	r3, r3, #8
 800c72c:	f003 031f 	and.w	r3, r3, #31
 800c730:	3301      	adds	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	fbb2 f3f3 	udiv	r3, r2, r3
 800c73c:	617b      	str	r3, [r7, #20]
        break;
 800c73e:	e03b      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c740:	4b6a      	ldr	r3, [pc, #424]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d108      	bne.n	800c75e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c74c:	4b67      	ldr	r3, [pc, #412]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c754:	4a66      	ldr	r2, [pc, #408]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c756:	fbb2 f3f3 	udiv	r3, r2, r3
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	e007      	b.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c75e:	4b63      	ldr	r3, [pc, #396]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c766:	4a63      	ldr	r2, [pc, #396]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c768:	fbb2 f3f3 	udiv	r3, r2, r3
 800c76c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c76e:	4b5f      	ldr	r3, [pc, #380]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c774:	0e1b      	lsrs	r3, r3, #24
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c77c:	4b5b      	ldr	r3, [pc, #364]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c77e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c782:	099b      	lsrs	r3, r3, #6
 800c784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	fb03 f202 	mul.w	r2, r3, r2
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	fbb2 f3f3 	udiv	r3, r2, r3
 800c794:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c796:	4b55      	ldr	r3, [pc, #340]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c79c:	f003 031f 	and.w	r3, r3, #31
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ac:	617b      	str	r3, [r7, #20]
        break;
 800c7ae:	e003      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7b0:	4b51      	ldr	r3, [pc, #324]	@ (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c7b2:	617b      	str	r3, [r7, #20]
        break;
 800c7b4:	e000      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800c7b6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7be:	f040 808d 	bne.w	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c7c2:	4b4a      	ldr	r3, [pc, #296]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7c8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c7d0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7d8:	d07c      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7e0:	d87b      	bhi.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7ee:	d039      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c7f0:	e073      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c7f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d108      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7fe:	4b3b      	ldr	r3, [pc, #236]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c806:	4a3a      	ldr	r2, [pc, #232]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c808:	fbb2 f3f3 	udiv	r3, r2, r3
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	e007      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c810:	4b36      	ldr	r3, [pc, #216]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c818:	4a36      	ldr	r2, [pc, #216]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c81e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c820:	4b32      	ldr	r3, [pc, #200]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c826:	0e1b      	lsrs	r3, r3, #24
 800c828:	f003 030f 	and.w	r3, r3, #15
 800c82c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c82e:	4b2f      	ldr	r3, [pc, #188]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c834:	099b      	lsrs	r3, r3, #6
 800c836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	fb03 f202 	mul.w	r2, r3, r2
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	fbb2 f3f3 	udiv	r3, r2, r3
 800c846:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c848:	4b28      	ldr	r3, [pc, #160]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c84a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c84e:	0a1b      	lsrs	r3, r3, #8
 800c850:	f003 031f 	and.w	r3, r3, #31
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c860:	617b      	str	r3, [r7, #20]
        break;
 800c862:	e03b      	b.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c864:	4b21      	ldr	r3, [pc, #132]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d108      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c870:	4b1e      	ldr	r3, [pc, #120]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c878:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87e:	613b      	str	r3, [r7, #16]
 800c880:	e007      	b.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c882:	4b1a      	ldr	r3, [pc, #104]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c88a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c890:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c892:	4b16      	ldr	r3, [pc, #88]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c898:	0e1b      	lsrs	r3, r3, #24
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c8a0:	4b12      	ldr	r3, [pc, #72]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8a6:	099b      	lsrs	r3, r3, #6
 800c8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	fb03 f202 	mul.w	r2, r3, r2
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8c0:	f003 031f 	and.w	r3, r3, #31
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d0:	617b      	str	r3, [r7, #20]
        break;
 800c8d2:	e003      	b.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8d4:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c8d6:	617b      	str	r3, [r7, #20]
        break;
 800c8d8:	e000      	b.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800c8da:	bf00      	nop
      }
    }
  }

  return frequency;
 800c8dc:	697b      	ldr	r3, [r7, #20]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	371c      	adds	r7, #28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	40023800 	.word	0x40023800
 800c8f0:	00f42400 	.word	0x00f42400
 800c8f4:	017d7840 	.word	0x017d7840
 800c8f8:	00bb8000 	.word	0x00bb8000

0800c8fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e071      	b.n	800c9f6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7f5b      	ldrb	r3, [r3, #29]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d105      	bne.n	800c928 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7f6 fe9e 	bl	8003664 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	f003 0310 	and.w	r3, r3, #16
 800c938:	2b10      	cmp	r3, #16
 800c93a:	d053      	beq.n	800c9e4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	22ca      	movs	r2, #202	@ 0xca
 800c942:	625a      	str	r2, [r3, #36]	@ 0x24
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2253      	movs	r2, #83	@ 0x53
 800c94a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fac7 	bl	800cee0 <RTC_EnterInitMode>
 800c952:	4603      	mov	r3, r0
 800c954:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d12a      	bne.n	800c9b2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6899      	ldr	r1, [r3, #8]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	4b26      	ldr	r3, [pc, #152]	@ (800ca00 <HAL_RTC_Init+0x104>)
 800c968:	400b      	ands	r3, r1
 800c96a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	6899      	ldr	r1, [r3, #8]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	431a      	orrs	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	431a      	orrs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	68d2      	ldr	r2, [r2, #12]
 800c992:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6919      	ldr	r1, [r3, #16]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	041a      	lsls	r2, r3, #16
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	430a      	orrs	r2, r1
 800c9a6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fad0 	bl	800cf4e <RTC_ExitInitMode>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d110      	bne.n	800c9da <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0208 	bic.w	r2, r2, #8
 800c9c6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	699a      	ldr	r2, [r3, #24]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	22ff      	movs	r2, #255	@ 0xff
 800c9e0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c9e2:	e001      	b.n	800c9e8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d102      	bne.n	800c9f4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	ff8fffbf 	.word	0xff8fffbf

0800ca04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca04:	b590      	push	{r4, r7, lr}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	7f1b      	ldrb	r3, [r3, #28]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d101      	bne.n	800ca20 <HAL_RTC_SetTime+0x1c>
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	e085      	b.n	800cb2c <HAL_RTC_SetTime+0x128>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2201      	movs	r2, #1
 800ca24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2202      	movs	r2, #2
 800ca2a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d126      	bne.n	800ca80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2200      	movs	r2, #0
 800ca44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 faa4 	bl	800cf98 <RTC_ByteToBcd2>
 800ca50:	4603      	mov	r3, r0
 800ca52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f000 fa9d 	bl	800cf98 <RTC_ByteToBcd2>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ca62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	789b      	ldrb	r3, [r3, #2]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 fa95 	bl	800cf98 <RTC_ByteToBcd2>
 800ca6e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca70:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	78db      	ldrb	r3, [r3, #3]
 800ca78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	e018      	b.n	800cab2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2200      	movs	r2, #0
 800ca92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800caa0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800caa6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	78db      	ldrb	r3, [r3, #3]
 800caac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800caae:	4313      	orrs	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	22ca      	movs	r2, #202	@ 0xca
 800cab8:	625a      	str	r2, [r3, #36]	@ 0x24
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2253      	movs	r2, #83	@ 0x53
 800cac0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 fa0c 	bl	800cee0 <RTC_EnterInitMode>
 800cac8:	4603      	mov	r3, r0
 800caca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cacc:	7cfb      	ldrb	r3, [r7, #19]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d11e      	bne.n	800cb10 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	6979      	ldr	r1, [r7, #20]
 800cad8:	4b16      	ldr	r3, [pc, #88]	@ (800cb34 <HAL_RTC_SetTime+0x130>)
 800cada:	400b      	ands	r3, r1
 800cadc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800caec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6899      	ldr	r1, [r3, #8]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	431a      	orrs	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fa21 	bl	800cf4e <RTC_ExitInitMode>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cb10:	7cfb      	ldrb	r3, [r7, #19]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	22ff      	movs	r2, #255	@ 0xff
 800cb22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	771a      	strb	r2, [r3, #28]

  return status;
 800cb2a:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd90      	pop	{r4, r7, pc}
 800cb34:	007f7f7f 	.word	0x007f7f7f

0800cb38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b087      	sub	sp, #28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	7f1b      	ldrb	r3, [r3, #28]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d101      	bne.n	800cb54 <HAL_RTC_SetDate+0x1c>
 800cb50:	2302      	movs	r3, #2
 800cb52:	e06f      	b.n	800cc34 <HAL_RTC_SetDate+0xfc>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2201      	movs	r2, #1
 800cb58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10e      	bne.n	800cb84 <HAL_RTC_SetDate+0x4c>
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	785b      	ldrb	r3, [r3, #1]
 800cb6a:	f003 0310 	and.w	r3, r3, #16
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d008      	beq.n	800cb84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	785b      	ldrb	r3, [r3, #1]
 800cb76:	f023 0310 	bic.w	r3, r3, #16
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	330a      	adds	r3, #10
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d11c      	bne.n	800cbc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	78db      	ldrb	r3, [r3, #3]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 fa02 	bl	800cf98 <RTC_ByteToBcd2>
 800cb94:	4603      	mov	r3, r0
 800cb96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 f9fb 	bl	800cf98 <RTC_ByteToBcd2>
 800cba2:	4603      	mov	r3, r0
 800cba4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cba6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	789b      	ldrb	r3, [r3, #2]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f9f3 	bl	800cf98 <RTC_ByteToBcd2>
 800cbb2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbb4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	e00e      	b.n	800cbe2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	78db      	ldrb	r3, [r3, #3]
 800cbc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbd0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	22ca      	movs	r2, #202	@ 0xca
 800cbe8:	625a      	str	r2, [r3, #36]	@ 0x24
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2253      	movs	r2, #83	@ 0x53
 800cbf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 f974 	bl	800cee0 <RTC_EnterInitMode>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cbfc:	7cfb      	ldrb	r3, [r7, #19]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	6979      	ldr	r1, [r7, #20]
 800cc08:	4b0c      	ldr	r3, [pc, #48]	@ (800cc3c <HAL_RTC_SetDate+0x104>)
 800cc0a:	400b      	ands	r3, r1
 800cc0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f000 f99d 	bl	800cf4e <RTC_ExitInitMode>
 800cc14:	4603      	mov	r3, r0
 800cc16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cc18:	7cfb      	ldrb	r3, [r7, #19]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	22ff      	movs	r2, #255	@ 0xff
 800cc2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	771a      	strb	r2, [r3, #28]

  return status;
 800cc32:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	371c      	adds	r7, #28
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd90      	pop	{r4, r7, pc}
 800cc3c:	00ffff3f 	.word	0x00ffff3f

0800cc40 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cc40:	b590      	push	{r4, r7, lr}
 800cc42:	b089      	sub	sp, #36	@ 0x24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	7f1b      	ldrb	r3, [r3, #28]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_RTC_SetAlarm+0x24>
 800cc60:	2302      	movs	r3, #2
 800cc62:	e113      	b.n	800ce8c <HAL_RTC_SetAlarm+0x24c>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d137      	bne.n	800cce6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2200      	movs	r2, #0
 800cc88:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f982 	bl	800cf98 <RTC_ByteToBcd2>
 800cc94:	4603      	mov	r3, r0
 800cc96:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	785b      	ldrb	r3, [r3, #1]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 f97b 	bl	800cf98 <RTC_ByteToBcd2>
 800cca2:	4603      	mov	r3, r0
 800cca4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cca6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	789b      	ldrb	r3, [r3, #2]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 f973 	bl	800cf98 <RTC_ByteToBcd2>
 800ccb2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ccb4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	78db      	ldrb	r3, [r3, #3]
 800ccbc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ccbe:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 f965 	bl	800cf98 <RTC_ByteToBcd2>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ccd2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ccda:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cce0:	4313      	orrs	r3, r2
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e023      	b.n	800cd2e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	785b      	ldrb	r3, [r3, #1]
 800cd04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cd06:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cd0c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	78db      	ldrb	r3, [r3, #3]
 800cd12:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cd14:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cd1c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cd1e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cd24:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cd36:	4313      	orrs	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	22ca      	movs	r2, #202	@ 0xca
 800cd40:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2253      	movs	r2, #83	@ 0x53
 800cd48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd52:	d148      	bne.n	800cde6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd62:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	689a      	ldr	r2, [r3, #8]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cd72:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800cd84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd86:	f7f7 fb2b 	bl	80043e0 <HAL_GetTick>
 800cd8a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cd8c:	e013      	b.n	800cdb6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd8e:	f7f7 fb27 	bl	80043e0 <HAL_GetTick>
 800cd92:	4602      	mov	r2, r0
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd9c:	d90b      	bls.n	800cdb6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	22ff      	movs	r2, #255	@ 0xff
 800cda4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2203      	movs	r2, #3
 800cdaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e06a      	b.n	800ce8c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0e4      	beq.n	800cd8e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	69fa      	ldr	r2, [r7, #28]
 800cdca:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	689a      	ldr	r2, [r3, #8]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cde2:	609a      	str	r2, [r3, #8]
 800cde4:	e047      	b.n	800ce76 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689a      	ldr	r2, [r3, #8]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cdf4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce04:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ce16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce18:	f7f7 fae2 	bl	80043e0 <HAL_GetTick>
 800ce1c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ce1e:	e013      	b.n	800ce48 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce20:	f7f7 fade 	bl	80043e0 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce2e:	d90b      	bls.n	800ce48 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	22ff      	movs	r2, #255	@ 0xff
 800ce36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e021      	b.n	800ce8c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	f003 0302 	and.w	r3, r3, #2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0e4      	beq.n	800ce20 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	69fa      	ldr	r2, [r7, #28]
 800ce5c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689a      	ldr	r2, [r3, #8]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce74:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	22ff      	movs	r2, #255	@ 0xff
 800ce7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2201      	movs	r2, #1
 800ce82:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3724      	adds	r7, #36	@ 0x24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd90      	pop	{r4, r7, pc}

0800ce94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a0d      	ldr	r2, [pc, #52]	@ (800cedc <HAL_RTC_WaitForSynchro+0x48>)
 800cea6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cea8:	f7f7 fa9a 	bl	80043e0 <HAL_GetTick>
 800ceac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ceae:	e009      	b.n	800cec4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ceb0:	f7f7 fa96 	bl	80043e0 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cebe:	d901      	bls.n	800cec4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e007      	b.n	800ced4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	f003 0320 	and.w	r3, r3, #32
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0ee      	beq.n	800ceb0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	0001ff5f 	.word	0x0001ff5f

0800cee0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d122      	bne.n	800cf44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cf0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf0e:	f7f7 fa67 	bl	80043e0 <HAL_GetTick>
 800cf12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf14:	e00c      	b.n	800cf30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf16:	f7f7 fa63 	bl	80043e0 <HAL_GetTick>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cf24:	d904      	bls.n	800cf30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2204      	movs	r2, #4
 800cf2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <RTC_EnterInitMode+0x64>
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d1e8      	bne.n	800cf16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff ff8b 	bl	800ce94 <HAL_RTC_WaitForSynchro>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d004      	beq.n	800cf8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2204      	movs	r2, #4
 800cf88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800cfa6:	e005      	b.n	800cfb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	3b0a      	subs	r3, #10
 800cfb2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d8f6      	bhi.n	800cfa8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	b2db      	uxtb	r3, r3
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	7f1b      	ldrb	r3, [r3, #28]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d101      	bne.n	800cff0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800cfec:	2302      	movs	r3, #2
 800cfee:	e050      	b.n	800d092 <HAL_RTCEx_SetTimeStamp+0xbe>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2202      	movs	r2, #2
 800cffa:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0206 	bic.w	r2, r2, #6
 800d00a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	430a      	orrs	r2, r1
 800d01a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689a      	ldr	r2, [r3, #8]
 800d022:	4b1f      	ldr	r3, [pc, #124]	@ (800d0a0 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800d024:	4013      	ands	r3, r2
 800d026:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	22ca      	movs	r2, #202	@ 0xca
 800d036:	625a      	str	r2, [r3, #36]	@ 0x24
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2253      	movs	r2, #83	@ 0x53
 800d03e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	697a      	ldr	r2, [r7, #20]
 800d046:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800d058:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	b2da      	uxtb	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800d06a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689a      	ldr	r2, [r3, #8]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d07a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	22ff      	movs	r2, #255	@ 0xff
 800d082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2201      	movs	r2, #1
 800d088:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	371c      	adds	r7, #28
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	fffff7f7 	.word	0xfffff7f7

0800d0a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e156      	b.n	800d370 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7f6 feea 	bl	8003eb0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2202      	movs	r2, #2
 800d0e0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f95b 	bl	800d3a0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d00c      	beq.n	800d10c <HAL_SAI_Init+0x68>
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d80d      	bhi.n	800d112 <HAL_SAI_Init+0x6e>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <HAL_SAI_Init+0x5c>
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d003      	beq.n	800d106 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d0fe:	e008      	b.n	800d112 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	61fb      	str	r3, [r7, #28]
      break;
 800d104:	e006      	b.n	800d114 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d106:	2310      	movs	r3, #16
 800d108:	61fb      	str	r3, [r7, #28]
      break;
 800d10a:	e003      	b.n	800d114 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d10c:	2320      	movs	r3, #32
 800d10e:	61fb      	str	r3, [r7, #28]
      break;
 800d110:	e000      	b.n	800d114 <HAL_SAI_Init+0x70>
      break;
 800d112:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	2b03      	cmp	r3, #3
 800d11a:	d81e      	bhi.n	800d15a <HAL_SAI_Init+0xb6>
 800d11c:	a201      	add	r2, pc, #4	@ (adr r2, 800d124 <HAL_SAI_Init+0x80>)
 800d11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d122:	bf00      	nop
 800d124:	0800d135 	.word	0x0800d135
 800d128:	0800d13b 	.word	0x0800d13b
 800d12c:	0800d143 	.word	0x0800d143
 800d130:	0800d14b 	.word	0x0800d14b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
    }
    break;
 800d138:	e010      	b.n	800d15c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d13e:	617b      	str	r3, [r7, #20]
    }
    break;
 800d140:	e00c      	b.n	800d15c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d146:	617b      	str	r3, [r7, #20]
    }
    break;
 800d148:	e008      	b.n	800d15c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d14a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d14e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	f043 0301 	orr.w	r3, r3, #1
 800d156:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d158:	e000      	b.n	800d15c <HAL_SAI_Init+0xb8>
    default:
      break;
 800d15a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a85      	ldr	r2, [pc, #532]	@ (800d378 <HAL_SAI_Init+0x2d4>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d004      	beq.n	800d170 <HAL_SAI_Init+0xcc>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a84      	ldr	r2, [pc, #528]	@ (800d37c <HAL_SAI_Init+0x2d8>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d103      	bne.n	800d178 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d170:	4a83      	ldr	r2, [pc, #524]	@ (800d380 <HAL_SAI_Init+0x2dc>)
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	e002      	b.n	800d17e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d178:	4a82      	ldr	r2, [pc, #520]	@ (800d384 <HAL_SAI_Init+0x2e0>)
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d04c      	beq.n	800d220 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a7a      	ldr	r2, [pc, #488]	@ (800d378 <HAL_SAI_Init+0x2d4>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d004      	beq.n	800d19e <HAL_SAI_Init+0xfa>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a78      	ldr	r2, [pc, #480]	@ (800d37c <HAL_SAI_Init+0x2d8>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d104      	bne.n	800d1a8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d19e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d1a2:	f7ff fa6b 	bl	800c67c <HAL_RCCEx_GetPeriphCLKFreq>
 800d1a6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a76      	ldr	r2, [pc, #472]	@ (800d388 <HAL_SAI_Init+0x2e4>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d004      	beq.n	800d1bc <HAL_SAI_Init+0x118>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a75      	ldr	r2, [pc, #468]	@ (800d38c <HAL_SAI_Init+0x2e8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d104      	bne.n	800d1c6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d1bc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d1c0:	f7ff fa5c 	bl	800c67c <HAL_RCCEx_GetPeriphCLKFreq>
 800d1c4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d1c6:	693a      	ldr	r2, [r7, #16]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	005b      	lsls	r3, r3, #1
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	025b      	lsls	r3, r3, #9
 800d1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1dc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4a6b      	ldr	r2, [pc, #428]	@ (800d390 <HAL_SAI_Init+0x2ec>)
 800d1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e6:	08da      	lsrs	r2, r3, #3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d1ec:	68f9      	ldr	r1, [r7, #12]
 800d1ee:	4b68      	ldr	r3, [pc, #416]	@ (800d390 <HAL_SAI_Init+0x2ec>)
 800d1f0:	fba3 2301 	umull	r2, r3, r3, r1
 800d1f4:	08da      	lsrs	r2, r3, #3
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	1aca      	subs	r2, r1, r3
 800d200:	2a08      	cmp	r2, #8
 800d202:	d904      	bls.n	800d20e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d212:	2b04      	cmp	r3, #4
 800d214:	d104      	bne.n	800d220 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	085a      	lsrs	r2, r3, #1
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <HAL_SAI_Init+0x18c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d109      	bne.n	800d244 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d234:	2b01      	cmp	r3, #1
 800d236:	d101      	bne.n	800d23c <HAL_SAI_Init+0x198>
 800d238:	2300      	movs	r3, #0
 800d23a:	e001      	b.n	800d240 <HAL_SAI_Init+0x19c>
 800d23c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d240:	61bb      	str	r3, [r7, #24]
 800d242:	e008      	b.n	800d256 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d102      	bne.n	800d252 <HAL_SAI_Init+0x1ae>
 800d24c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d250:	e000      	b.n	800d254 <HAL_SAI_Init+0x1b0>
 800d252:	2300      	movs	r3, #0
 800d254:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6819      	ldr	r1, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	4b4c      	ldr	r3, [pc, #304]	@ (800d394 <HAL_SAI_Init+0x2f0>)
 800d262:	400b      	ands	r3, r1
 800d264:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6819      	ldr	r1, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d274:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d27a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d280:	431a      	orrs	r2, r3
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800d28e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d29a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a1b      	ldr	r3, [r3, #32]
 800d2a0:	051b      	lsls	r3, r3, #20
 800d2a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6859      	ldr	r1, [r3, #4]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b38      	ldr	r3, [pc, #224]	@ (800d398 <HAL_SAI_Init+0x2f4>)
 800d2b8:	400b      	ands	r3, r1
 800d2ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6859      	ldr	r1, [r3, #4]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	699a      	ldr	r2, [r3, #24]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ca:	431a      	orrs	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6899      	ldr	r1, [r3, #8]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	4b2d      	ldr	r3, [pc, #180]	@ (800d39c <HAL_SAI_Init+0x2f8>)
 800d2e6:	400b      	ands	r3, r1
 800d2e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6899      	ldr	r1, [r3, #8]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800d300:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800d306:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d30c:	3b01      	subs	r3, #1
 800d30e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d310:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	430a      	orrs	r2, r1
 800d318:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68d9      	ldr	r1, [r3, #12]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800d328:	400b      	ands	r3, r1
 800d32a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68d9      	ldr	r1, [r3, #12]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d33a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d340:	041b      	lsls	r3, r3, #16
 800d342:	431a      	orrs	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d348:	3b01      	subs	r3, #1
 800d34a:	021b      	lsls	r3, r3, #8
 800d34c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	430a      	orrs	r2, r1
 800d354:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3720      	adds	r7, #32
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	40015804 	.word	0x40015804
 800d37c:	40015824 	.word	0x40015824
 800d380:	40015800 	.word	0x40015800
 800d384:	40015c00 	.word	0x40015c00
 800d388:	40015c04 	.word	0x40015c04
 800d38c:	40015c24 	.word	0x40015c24
 800d390:	cccccccd 	.word	0xcccccccd
 800d394:	ff05c010 	.word	0xff05c010
 800d398:	ffff1ff0 	.word	0xffff1ff0
 800d39c:	fff88000 	.word	0xfff88000

0800d3a0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d3a8:	4b17      	ldr	r3, [pc, #92]	@ (800d408 <SAI_Disable+0x68>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a17      	ldr	r2, [pc, #92]	@ (800d40c <SAI_Disable+0x6c>)
 800d3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b2:	0b1b      	lsrs	r3, r3, #12
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d3ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	1e5a      	subs	r2, r3, #1
 800d3d0:	60fa      	str	r2, [r7, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	72fb      	strb	r3, [r7, #11]
      break;
 800d3ea:	e006      	b.n	800d3fa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1e8      	bne.n	800d3cc <SAI_Disable+0x2c>

  return status;
 800d3fa:	7afb      	ldrb	r3, [r7, #11]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	20000000 	.word	0x20000000
 800d40c:	95cbec1b 	.word	0x95cbec1b

0800d410 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e022      	b.n	800d468 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d105      	bne.n	800d43a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7f6 f943 	bl	80036c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2203      	movs	r2, #3
 800d43e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f814 	bl	800d470 <HAL_SD_InitCard>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e00a      	b.n	800d468 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d470:	b5b0      	push	{r4, r5, r7, lr}
 800d472:	b08e      	sub	sp, #56	@ 0x38
 800d474:	af04      	add	r7, sp, #16
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d478:	2300      	movs	r3, #0
 800d47a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d47c:	2300      	movs	r3, #0
 800d47e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d480:	2300      	movs	r3, #0
 800d482:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d484:	2300      	movs	r3, #0
 800d486:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d488:	2300      	movs	r3, #0
 800d48a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d48c:	2376      	movs	r3, #118	@ 0x76
 800d48e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681d      	ldr	r5, [r3, #0]
 800d494:	466c      	mov	r4, sp
 800d496:	f107 0314 	add.w	r3, r7, #20
 800d49a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d49e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4a2:	f107 0308 	add.w	r3, r7, #8
 800d4a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f003 faed 	bl	8010a88 <SDMMC_Init>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800d4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e059      	b.n	800d574 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d4ce:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f003 fb21 	bl	8010b1c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4e8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d4ea:	2002      	movs	r0, #2
 800d4ec:	f7f6 ff84 	bl	80043f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 ff01 	bl	800e2f8 <SD_PowerON>
 800d4f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4f8:	6a3b      	ldr	r3, [r7, #32]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00b      	beq.n	800d516 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e02e      	b.n	800d574 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fe20 	bl	800e15c <SD_InitCard>
 800d51c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	431a      	orrs	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e01b      	b.n	800d574 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d544:	4618      	mov	r0, r3
 800d546:	f003 fb7b 	bl	8010c40 <SDMMC_CmdBlockLength>
 800d54a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00f      	beq.n	800d572 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a09      	ldr	r2, [pc, #36]	@ (800d57c <HAL_SD_InitCard+0x10c>)
 800d558:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3728      	adds	r7, #40	@ 0x28
 800d578:	46bd      	mov	sp, r7
 800d57a:	bdb0      	pop	{r4, r5, r7, pc}
 800d57c:	004005ff 	.word	0x004005ff

0800d580 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b092      	sub	sp, #72	@ 0x48
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d58e:	f7f6 ff27 	bl	80043e0 <HAL_GetTick>
 800d592:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d107      	bne.n	800d5b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e1bd      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	f040 81b0 	bne.w	800d920 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d5c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	441a      	add	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d907      	bls.n	800d5e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e1a4      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2203      	movs	r2, #3
 800d5e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d002      	beq.n	800d602 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	025b      	lsls	r3, r3, #9
 800d600:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d602:	f04f 33ff 	mov.w	r3, #4294967295
 800d606:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	025b      	lsls	r3, r3, #9
 800d60c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d60e:	2390      	movs	r3, #144	@ 0x90
 800d610:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d612:	2302      	movs	r3, #2
 800d614:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d616:	2300      	movs	r3, #0
 800d618:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d61a:	2301      	movs	r3, #1
 800d61c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f107 0214 	add.w	r2, r7, #20
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f003 fadd 	bl	8010be8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d90a      	bls.n	800d64a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2202      	movs	r2, #2
 800d638:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d640:	4618      	mov	r0, r3
 800d642:	f003 fb41 	bl	8010cc8 <SDMMC_CmdReadMultiBlock>
 800d646:	6478      	str	r0, [r7, #68]	@ 0x44
 800d648:	e009      	b.n	800d65e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2201      	movs	r2, #1
 800d64e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d656:	4618      	mov	r0, r3
 800d658:	f003 fb14 	bl	8010c84 <SDMMC_CmdReadSingleBlock>
 800d65c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d660:	2b00      	cmp	r3, #0
 800d662:	d012      	beq.n	800d68a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a7a      	ldr	r2, [pc, #488]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d66a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d672:	431a      	orrs	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e151      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d68e:	e061      	b.n	800d754 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d03c      	beq.n	800d718 <HAL_SD_ReadBlocks+0x198>
 800d69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d039      	beq.n	800d718 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a8:	e033      	b.n	800d712 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f003 fa16 	bl	8010ae0 <SDMMC_ReadFIFO>
 800d6b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	0a1b      	lsrs	r3, r3, #8
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e2:	0c1b      	lsrs	r3, r3, #16
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f8:	0e1b      	lsrs	r3, r3, #24
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d702:	3301      	adds	r3, #1
 800d704:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d708:	3b01      	subs	r3, #1
 800d70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800d70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d70e:	3301      	adds	r3, #1
 800d710:	643b      	str	r3, [r7, #64]	@ 0x40
 800d712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d714:	2b07      	cmp	r3, #7
 800d716:	d9c8      	bls.n	800d6aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d718:	f7f6 fe62 	bl	80043e0 <HAL_GetTick>
 800d71c:	4602      	mov	r2, r0
 800d71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d724:	429a      	cmp	r2, r3
 800d726:	d902      	bls.n	800d72e <HAL_SD_ReadBlocks+0x1ae>
 800d728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d112      	bne.n	800d754 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a48      	ldr	r2, [pc, #288]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d734:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e0ec      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d75a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d096      	beq.n	800d690 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d022      	beq.n	800d7b6 <HAL_SD_ReadBlocks+0x236>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d91f      	bls.n	800d7b6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d01b      	beq.n	800d7b6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4618      	mov	r0, r3
 800d784:	f003 fb06 	bl	8010d94 <SDMMC_CmdStopTransfer>
 800d788:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d012      	beq.n	800d7b6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a2f      	ldr	r2, [pc, #188]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d796:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d79c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79e:	431a      	orrs	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e0bb      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7bc:	f003 0308 	and.w	r3, r3, #8
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d012      	beq.n	800d7ea <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a22      	ldr	r2, [pc, #136]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d7ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d0:	f043 0208 	orr.w	r2, r3, #8
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e0a1      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d012      	beq.n	800d81e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a15      	ldr	r2, [pc, #84]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d7fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d804:	f043 0202 	orr.w	r2, r3, #2
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e087      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d824:	f003 0320 	and.w	r3, r3, #32
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d064      	beq.n	800d8f6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a08      	ldr	r2, [pc, #32]	@ (800d854 <HAL_SD_ReadBlocks+0x2d4>)
 800d832:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d838:	f043 0220 	orr.w	r2, r3, #32
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e06d      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
 800d852:	bf00      	nop
 800d854:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f003 f93f 	bl	8010ae0 <SDMMC_ReadFIFO>
 800d862:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	b2da      	uxtb	r2, r3
 800d868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	3301      	adds	r3, #1
 800d870:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d874:	3b01      	subs	r3, #1
 800d876:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d880:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d884:	3301      	adds	r3, #1
 800d886:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d88a:	3b01      	subs	r3, #1
 800d88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d890:	0c1b      	lsrs	r3, r3, #16
 800d892:	b2da      	uxtb	r2, r3
 800d894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d896:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89a:	3301      	adds	r3, #1
 800d89c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a6:	0e1b      	lsrs	r3, r3, #24
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d8ba:	f7f6 fd91 	bl	80043e0 <HAL_GetTick>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d902      	bls.n	800d8d0 <HAL_SD_ReadBlocks+0x350>
 800d8ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d112      	bne.n	800d8f6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a18      	ldr	r2, [pc, #96]	@ (800d938 <HAL_SD_ReadBlocks+0x3b8>)
 800d8d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e01b      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <HAL_SD_ReadBlocks+0x38a>
 800d904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1a6      	bne.n	800d858 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d912:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	e006      	b.n	800d92e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d924:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
  }
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3748      	adds	r7, #72	@ 0x48
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	004005ff 	.word	0x004005ff

0800d93c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b092      	sub	sp, #72	@ 0x48
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d94a:	f7f6 fd49 	bl	80043e0 <HAL_GetTick>
 800d94e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d107      	bne.n	800d96e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d962:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e165      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b01      	cmp	r3, #1
 800d978:	f040 8158 	bne.w	800dc2c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	441a      	add	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d907      	bls.n	800d9a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d994:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	e14c      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2203      	movs	r2, #3
 800d9a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d002      	beq.n	800d9be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ba:	025b      	lsls	r3, r3, #9
 800d9bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	025b      	lsls	r3, r3, #9
 800d9c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d9ca:	2390      	movs	r3, #144	@ 0x90
 800d9cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f107 0218 	add.w	r2, r7, #24
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f003 f8ff 	bl	8010be8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d90a      	bls.n	800da06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f003 f9a7 	bl	8010d50 <SDMMC_CmdWriteMultiBlock>
 800da02:	6478      	str	r0, [r7, #68]	@ 0x44
 800da04:	e009      	b.n	800da1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2210      	movs	r2, #16
 800da0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da12:	4618      	mov	r0, r3
 800da14:	f003 f97a 	bl	8010d0c <SDMMC_CmdWriteSingleBlock>
 800da18:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800da1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d012      	beq.n	800da46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a87      	ldr	r2, [pc, #540]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800da26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da2e:	431a      	orrs	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e0f9      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800da4a:	e065      	b.n	800db18 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da56:	2b00      	cmp	r3, #0
 800da58:	d040      	beq.n	800dadc <HAL_SD_WriteBlocks+0x1a0>
 800da5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d03d      	beq.n	800dadc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800da60:	2300      	movs	r3, #0
 800da62:	643b      	str	r3, [r7, #64]	@ 0x40
 800da64:	e037      	b.n	800dad6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800da6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6e:	3301      	adds	r3, #1
 800da70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800da72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da74:	3b01      	subs	r3, #1
 800da76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800da78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	021a      	lsls	r2, r3, #8
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	4313      	orrs	r3, r2
 800da82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800da84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da86:	3301      	adds	r3, #1
 800da88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800da8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da8c:	3b01      	subs	r3, #1
 800da8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800da90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	041a      	lsls	r2, r3, #16
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	4313      	orrs	r3, r2
 800da9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800da9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da9e:	3301      	adds	r3, #1
 800daa0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800daa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa4:	3b01      	subs	r3, #1
 800daa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800daa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	061a      	lsls	r2, r3, #24
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800dab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dab6:	3301      	adds	r3, #1
 800dab8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800daba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dabc:	3b01      	subs	r3, #1
 800dabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f107 0214 	add.w	r2, r7, #20
 800dac8:	4611      	mov	r1, r2
 800daca:	4618      	mov	r0, r3
 800dacc:	f003 f815 	bl	8010afa <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800dad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dad2:	3301      	adds	r3, #1
 800dad4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dad8:	2b07      	cmp	r3, #7
 800dada:	d9c4      	bls.n	800da66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800dadc:	f7f6 fc80 	bl	80043e0 <HAL_GetTick>
 800dae0:	4602      	mov	r2, r0
 800dae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dae8:	429a      	cmp	r2, r3
 800daea:	d902      	bls.n	800daf2 <HAL_SD_WriteBlocks+0x1b6>
 800daec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d112      	bne.n	800db18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a53      	ldr	r2, [pc, #332]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800daf8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dafe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db00:	431a      	orrs	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2201      	movs	r2, #1
 800db0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800db14:	2303      	movs	r3, #3
 800db16:	e090      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800db22:	2b00      	cmp	r3, #0
 800db24:	d092      	beq.n	800da4c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db30:	2b00      	cmp	r3, #0
 800db32:	d022      	beq.n	800db7a <HAL_SD_WriteBlocks+0x23e>
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d91f      	bls.n	800db7a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d01b      	beq.n	800db7a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4618      	mov	r0, r3
 800db48:	f003 f924 	bl	8010d94 <SDMMC_CmdStopTransfer>
 800db4c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800db4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db50:	2b00      	cmp	r3, #0
 800db52:	d012      	beq.n	800db7a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a3a      	ldr	r2, [pc, #232]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800db5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db62:	431a      	orrs	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	e05f      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db80:	f003 0308 	and.w	r3, r3, #8
 800db84:	2b00      	cmp	r3, #0
 800db86:	d012      	beq.n	800dbae <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a2d      	ldr	r2, [pc, #180]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800db8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db94:	f043 0208 	orr.w	r2, r3, #8
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e045      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d012      	beq.n	800dbe2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a20      	ldr	r2, [pc, #128]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800dbc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbc8:	f043 0202 	orr.w	r2, r3, #2
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e02b      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe8:	f003 0310 	and.w	r3, r3, #16
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d012      	beq.n	800dc16 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a13      	ldr	r2, [pc, #76]	@ (800dc44 <HAL_SD_WriteBlocks+0x308>)
 800dbf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbfc:	f043 0210 	orr.w	r2, r3, #16
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e011      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dc1e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e006      	b.n	800dc3a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
  }
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3748      	adds	r7, #72	@ 0x48
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	004005ff 	.word	0x004005ff

0800dc48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc56:	0f9b      	lsrs	r3, r3, #30
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc62:	0e9b      	lsrs	r3, r3, #26
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	f003 030f 	and.w	r3, r3, #15
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc74:	0e1b      	lsrs	r3, r3, #24
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	f003 0303 	and.w	r3, r3, #3
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc86:	0c1b      	lsrs	r3, r3, #16
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc92:	0a1b      	lsrs	r3, r3, #8
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dca8:	0d1b      	lsrs	r3, r3, #20
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcb4:	0c1b      	lsrs	r3, r3, #16
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 030f 	and.w	r3, r3, #15
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcc6:	0bdb      	lsrs	r3, r3, #15
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcd8:	0b9b      	lsrs	r3, r3, #14
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcea:	0b5b      	lsrs	r3, r3, #13
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcfc:	0b1b      	lsrs	r3, r3, #12
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d163      	bne.n	800dde0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd1c:	009a      	lsls	r2, r3, #2
 800dd1e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800dd22:	4013      	ands	r3, r2
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dd28:	0f92      	lsrs	r2, r2, #30
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd34:	0edb      	lsrs	r3, r3, #27
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	f003 0307 	and.w	r3, r3, #7
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd46:	0e1b      	lsrs	r3, r3, #24
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	f003 0307 	and.w	r3, r3, #7
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd58:	0d5b      	lsrs	r3, r3, #21
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0307 	and.w	r3, r3, #7
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd6a:	0c9b      	lsrs	r3, r3, #18
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd7c:	0bdb      	lsrs	r3, r3, #15
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	f003 0307 	and.w	r3, r3, #7
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	7e1b      	ldrb	r3, [r3, #24]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	f003 0307 	and.w	r3, r3, #7
 800dd9e:	3302      	adds	r3, #2
 800dda0:	2201      	movs	r2, #1
 800dda2:	fa02 f303 	lsl.w	r3, r2, r3
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ddaa:	fb03 f202 	mul.w	r2, r3, r2
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	7a1b      	ldrb	r3, [r3, #8]
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	409a      	lsls	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ddcc:	0a52      	lsrs	r2, r2, #9
 800ddce:	fb03 f202 	mul.w	r2, r3, r2
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dddc:	661a      	str	r2, [r3, #96]	@ 0x60
 800ddde:	e031      	b.n	800de44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d11d      	bne.n	800de24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ddec:	041b      	lsls	r3, r3, #16
 800ddee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddf6:	0c1b      	lsrs	r3, r3, #16
 800ddf8:	431a      	orrs	r2, r3
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	3301      	adds	r3, #1
 800de04:	029a      	lsls	r2, r3, #10
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de18:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	661a      	str	r2, [r3, #96]	@ 0x60
 800de22:	e00f      	b.n	800de44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a58      	ldr	r2, [pc, #352]	@ (800df8c <HAL_SD_GetCardCSD+0x344>)
 800de2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	e09d      	b.n	800df80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de48:	0b9b      	lsrs	r3, r3, #14
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	b2da      	uxtb	r2, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de5a:	09db      	lsrs	r3, r3, #7
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de62:	b2da      	uxtb	r2, r3
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de72:	b2da      	uxtb	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de7c:	0fdb      	lsrs	r3, r3, #31
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de88:	0f5b      	lsrs	r3, r3, #29
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f003 0303 	and.w	r3, r3, #3
 800de90:	b2da      	uxtb	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de9a:	0e9b      	lsrs	r3, r3, #26
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deac:	0d9b      	lsrs	r3, r3, #22
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f003 030f 	and.w	r3, r3, #15
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800debe:	0d5b      	lsrs	r3, r3, #21
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deda:	0c1b      	lsrs	r3, r3, #16
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deee:	0bdb      	lsrs	r3, r3, #15
 800def0:	b2db      	uxtb	r3, r3
 800def2:	f003 0301 	and.w	r3, r3, #1
 800def6:	b2da      	uxtb	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df02:	0b9b      	lsrs	r3, r3, #14
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df16:	0b5b      	lsrs	r3, r3, #13
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2a:	0b1b      	lsrs	r3, r3, #12
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0301 	and.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df3e:	0a9b      	lsrs	r3, r3, #10
 800df40:	b2db      	uxtb	r3, r3
 800df42:	f003 0303 	and.w	r3, r3, #3
 800df46:	b2da      	uxtb	r2, r3
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df52:	0a1b      	lsrs	r3, r3, #8
 800df54:	b2db      	uxtb	r3, r3
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df66:	085b      	lsrs	r3, r3, #1
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	2201      	movs	r2, #1
 800df7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	004005ff 	.word	0x004005ff

0800df90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dfe8:	b5b0      	push	{r4, r5, r7, lr}
 800dfea:	b08e      	sub	sp, #56	@ 0x38
 800dfec:	af04      	add	r7, sp, #16
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2203      	movs	r2, #3
 800dffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e004:	2b03      	cmp	r3, #3
 800e006:	d02e      	beq.n	800e066 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e00e:	d106      	bne.n	800e01e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e014:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	639a      	str	r2, [r3, #56]	@ 0x38
 800e01c:	e029      	b.n	800e072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e024:	d10a      	bne.n	800e03c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa1c 	bl	800e464 <SD_WideBus_Enable>
 800e02c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	639a      	str	r2, [r3, #56]	@ 0x38
 800e03a:	e01a      	b.n	800e072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10a      	bne.n	800e058 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa59 	bl	800e4fa <SD_WideBus_Disable>
 800e048:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	431a      	orrs	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	639a      	str	r2, [r3, #56]	@ 0x38
 800e056:	e00c      	b.n	800e072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e05c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	639a      	str	r2, [r3, #56]	@ 0x38
 800e064:	e005      	b.n	800e072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e06a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00b      	beq.n	800e092 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a26      	ldr	r2, [pc, #152]	@ (800e118 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e080:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e090:	e01f      	b.n	800e0d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681d      	ldr	r5, [r3, #0]
 800e0b8:	466c      	mov	r4, sp
 800e0ba:	f107 0314 	add.w	r3, r7, #20
 800e0be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f002 fcdb 	bl	8010a88 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f002 fdb0 	bl	8010c40 <SDMMC_CmdBlockLength>
 800e0e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00c      	beq.n	800e102 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a0a      	ldr	r2, [pc, #40]	@ (800e118 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e0ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800e10a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3728      	adds	r7, #40	@ 0x28
 800e112:	46bd      	mov	sp, r7
 800e114:	bdb0      	pop	{r4, r5, r7, pc}
 800e116:	bf00      	nop
 800e118:	004005ff 	.word	0x004005ff

0800e11c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e128:	f107 030c 	add.w	r3, r7, #12
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f970 	bl	800e414 <SD_SendStatus>
 800e134:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d005      	beq.n	800e148 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	431a      	orrs	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	0a5b      	lsrs	r3, r3, #9
 800e14c:	f003 030f 	and.w	r3, r3, #15
 800e150:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e152:	693b      	ldr	r3, [r7, #16]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e15c:	b5b0      	push	{r4, r5, r7, lr}
 800e15e:	b094      	sub	sp, #80	@ 0x50
 800e160:	af04      	add	r7, sp, #16
 800e162:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e164:	2301      	movs	r3, #1
 800e166:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f002 fce3 	bl	8010b38 <SDMMC_GetPowerState>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e178:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e17c:	e0b8      	b.n	800e2f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e182:	2b03      	cmp	r3, #3
 800e184:	d02f      	beq.n	800e1e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f002 ff0d 	bl	8010faa <SDMMC_CmdSendCID>
 800e190:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <SD_InitCard+0x40>
    {
      return errorstate;
 800e198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e19a:	e0a9      	b.n	800e2f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f002 fd0d 	bl	8010bc2 <SDMMC_GetResponse>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f002 fd04 	bl	8010bc2 <SDMMC_GetResponse>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2108      	movs	r1, #8
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f002 fcfb 	bl	8010bc2 <SDMMC_GetResponse>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	210c      	movs	r1, #12
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f002 fcf2 	bl	8010bc2 <SDMMC_GetResponse>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d00d      	beq.n	800e20a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f107 020e 	add.w	r2, r7, #14
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f002 ff13 	bl	8011024 <SDMMC_CmdSetRelAdd>
 800e1fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <SD_InitCard+0xae>
    {
      return errorstate;
 800e206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e208:	e072      	b.n	800e2f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d036      	beq.n	800e280 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e212:	89fb      	ldrh	r3, [r7, #14]
 800e214:	461a      	mov	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e222:	041b      	lsls	r3, r3, #16
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f002 fedd 	bl	8010fe6 <SDMMC_CmdSendCSD>
 800e22c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e236:	e05b      	b.n	800e2f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2100      	movs	r1, #0
 800e23e:	4618      	mov	r0, r3
 800e240:	f002 fcbf 	bl	8010bc2 <SDMMC_GetResponse>
 800e244:	4602      	mov	r2, r0
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2104      	movs	r1, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f002 fcb6 	bl	8010bc2 <SDMMC_GetResponse>
 800e256:	4602      	mov	r2, r0
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2108      	movs	r1, #8
 800e262:	4618      	mov	r0, r3
 800e264:	f002 fcad 	bl	8010bc2 <SDMMC_GetResponse>
 800e268:	4602      	mov	r2, r0
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	210c      	movs	r1, #12
 800e274:	4618      	mov	r0, r3
 800e276:	f002 fca4 	bl	8010bc2 <SDMMC_GetResponse>
 800e27a:	4602      	mov	r2, r0
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2104      	movs	r1, #4
 800e286:	4618      	mov	r0, r3
 800e288:	f002 fc9b 	bl	8010bc2 <SDMMC_GetResponse>
 800e28c:	4603      	mov	r3, r0
 800e28e:	0d1a      	lsrs	r2, r3, #20
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e294:	f107 0310 	add.w	r3, r7, #16
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fcd4 	bl	800dc48 <HAL_SD_GetCardCSD>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e2aa:	e021      	b.n	800e2f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6819      	ldr	r1, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b4:	041b      	lsls	r3, r3, #16
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	461c      	mov	r4, r3
 800e2ba:	4615      	mov	r5, r2
 800e2bc:	4622      	mov	r2, r4
 800e2be:	462b      	mov	r3, r5
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	f002 fd89 	bl	8010dd8 <SDMMC_CmdSelDesel>
 800e2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <SD_InitCard+0x176>
  {
    return errorstate;
 800e2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2d0:	e00e      	b.n	800e2f0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681d      	ldr	r5, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	466c      	mov	r4, sp
 800e2da:	f103 0210 	add.w	r2, r3, #16
 800e2de:	ca07      	ldmia	r2, {r0, r1, r2}
 800e2e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f002 fbcd 	bl	8010a88 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3740      	adds	r7, #64	@ 0x40
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bdb0      	pop	{r4, r5, r7, pc}

0800e2f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	617b      	str	r3, [r7, #20]
 800e308:	2300      	movs	r3, #0
 800e30a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4618      	mov	r0, r3
 800e312:	f002 fd84 	bl	8010e1e <SDMMC_CmdGoIdleState>
 800e316:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	e072      	b.n	800e408 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4618      	mov	r0, r3
 800e328:	f002 fd97 	bl	8010e5a <SDMMC_CmdOperCond>
 800e32c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00d      	beq.n	800e350 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4618      	mov	r0, r3
 800e340:	f002 fd6d 	bl	8010e1e <SDMMC_CmdGoIdleState>
 800e344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	e05b      	b.n	800e408 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d137      	bne.n	800e3ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f002 fd97 	bl	8010e98 <SDMMC_CmdAppCommand>
 800e36a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d02d      	beq.n	800e3ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e372:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e376:	e047      	b.n	800e408 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2100      	movs	r1, #0
 800e37e:	4618      	mov	r0, r3
 800e380:	f002 fd8a 	bl	8010e98 <SDMMC_CmdAppCommand>
 800e384:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d001      	beq.n	800e390 <SD_PowerON+0x98>
    {
      return errorstate;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	e03b      	b.n	800e408 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	491e      	ldr	r1, [pc, #120]	@ (800e410 <SD_PowerON+0x118>)
 800e396:	4618      	mov	r0, r3
 800e398:	f002 fda0 	bl	8010edc <SDMMC_CmdAppOperCommand>
 800e39c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e3a8:	e02e      	b.n	800e408 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f002 fc06 	bl	8010bc2 <SDMMC_GetResponse>
 800e3b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	0fdb      	lsrs	r3, r3, #31
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d101      	bne.n	800e3c4 <SD_PowerON+0xcc>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e000      	b.n	800e3c6 <SD_PowerON+0xce>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	613b      	str	r3, [r7, #16]

    count++;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d802      	bhi.n	800e3de <SD_PowerON+0xe6>
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0cc      	beq.n	800e378 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d902      	bls.n	800e3ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e3e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3ec:	e00c      	b.n	800e408 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d003      	beq.n	800e400 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	645a      	str	r2, [r3, #68]	@ 0x44
 800e3fe:	e002      	b.n	800e406 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	c1100000 	.word	0xc1100000

0800e414 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d102      	bne.n	800e42a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e424:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e428:	e018      	b.n	800e45c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e432:	041b      	lsls	r3, r3, #16
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f002 fe15 	bl	8011066 <SDMMC_CmdSendStatus>
 800e43c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	e009      	b.n	800e45c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2100      	movs	r1, #0
 800e44e:	4618      	mov	r0, r3
 800e450:	f002 fbb7 	bl	8010bc2 <SDMMC_GetResponse>
 800e454:	4602      	mov	r2, r0
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e45a:	2300      	movs	r3, #0
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e46c:	2300      	movs	r3, #0
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	2300      	movs	r3, #0
 800e472:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2100      	movs	r1, #0
 800e47a:	4618      	mov	r0, r3
 800e47c:	f002 fba1 	bl	8010bc2 <SDMMC_GetResponse>
 800e480:	4603      	mov	r3, r0
 800e482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e48a:	d102      	bne.n	800e492 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e48c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e490:	e02f      	b.n	800e4f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e492:	f107 030c 	add.w	r3, r7, #12
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f879 	bl	800e590 <SD_FindSCR>
 800e49e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	e023      	b.n	800e4f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d01c      	beq.n	800e4ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4bc:	041b      	lsls	r3, r3, #16
 800e4be:	4619      	mov	r1, r3
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	f002 fce9 	bl	8010e98 <SDMMC_CmdAppCommand>
 800e4c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	e00f      	b.n	800e4f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2102      	movs	r1, #2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fd23 	bl	8010f24 <SDMMC_CmdBusWidth>
 800e4de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	e003      	b.n	800e4f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	e001      	b.n	800e4f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3718      	adds	r7, #24
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b086      	sub	sp, #24
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2100      	movs	r1, #0
 800e510:	4618      	mov	r0, r3
 800e512:	f002 fb56 	bl	8010bc2 <SDMMC_GetResponse>
 800e516:	4603      	mov	r3, r0
 800e518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e51c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e520:	d102      	bne.n	800e528 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e526:	e02f      	b.n	800e588 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e528:	f107 030c 	add.w	r3, r7, #12
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 f82e 	bl	800e590 <SD_FindSCR>
 800e534:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	e023      	b.n	800e588 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e546:	2b00      	cmp	r3, #0
 800e548:	d01c      	beq.n	800e584 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e552:	041b      	lsls	r3, r3, #16
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	f002 fc9e 	bl	8010e98 <SDMMC_CmdAppCommand>
 800e55c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	e00f      	b.n	800e588 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2100      	movs	r1, #0
 800e56e:	4618      	mov	r0, r3
 800e570:	f002 fcd8 	bl	8010f24 <SDMMC_CmdBusWidth>
 800e574:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	e003      	b.n	800e588 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e580:	2300      	movs	r3, #0
 800e582:	e001      	b.n	800e588 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e584:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e590:	b590      	push	{r4, r7, lr}
 800e592:	b08f      	sub	sp, #60	@ 0x3c
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e59a:	f7f5 ff21 	bl	80043e0 <HAL_GetTick>
 800e59e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60bb      	str	r3, [r7, #8]
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2108      	movs	r1, #8
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f002 fb42 	bl	8010c40 <SDMMC_CmdBlockLength>
 800e5bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c6:	e0b2      	b.n	800e72e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5d0:	041b      	lsls	r3, r3, #16
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f002 fc5f 	bl	8010e98 <SDMMC_CmdAppCommand>
 800e5da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e4:	e0a3      	b.n	800e72e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e5ec:	2308      	movs	r3, #8
 800e5ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e5f0:	2330      	movs	r3, #48	@ 0x30
 800e5f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f107 0210 	add.w	r2, r7, #16
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f002 faec 	bl	8010be8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4618      	mov	r0, r3
 800e616:	f002 fca7 	bl	8010f68 <SDMMC_CmdSendSCR>
 800e61a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d02a      	beq.n	800e678 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e624:	e083      	b.n	800e72e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e62c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00f      	beq.n	800e654 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6819      	ldr	r1, [r3, #0]
 800e638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	f107 0208 	add.w	r2, r7, #8
 800e640:	18d4      	adds	r4, r2, r3
 800e642:	4608      	mov	r0, r1
 800e644:	f002 fa4c 	bl	8010ae0 <SDMMC_ReadFIFO>
 800e648:	4603      	mov	r3, r0
 800e64a:	6023      	str	r3, [r4, #0]
      index++;
 800e64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64e:	3301      	adds	r3, #1
 800e650:	637b      	str	r3, [r7, #52]	@ 0x34
 800e652:	e006      	b.n	800e662 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e65a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d012      	beq.n	800e688 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e662:	f7f5 febd 	bl	80043e0 <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e670:	d102      	bne.n	800e678 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e672:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e676:	e05a      	b.n	800e72e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e67e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800e682:	2b00      	cmp	r3, #0
 800e684:	d0cf      	beq.n	800e626 <SD_FindSCR+0x96>
 800e686:	e000      	b.n	800e68a <SD_FindSCR+0xfa>
      break;
 800e688:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e690:	f003 0308 	and.w	r3, r3, #8
 800e694:	2b00      	cmp	r3, #0
 800e696:	d005      	beq.n	800e6a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2208      	movs	r2, #8
 800e69e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	e044      	b.n	800e72e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d005      	beq.n	800e6be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	e037      	b.n	800e72e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6c4:	f003 0320 	and.w	r3, r3, #32
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2220      	movs	r2, #32
 800e6d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e6d4:	2320      	movs	r3, #32
 800e6d6:	e02a      	b.n	800e72e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800e6e0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	061a      	lsls	r2, r3, #24
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	021b      	lsls	r3, r3, #8
 800e6ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e6ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	0a1b      	lsrs	r3, r3, #8
 800e6f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e6f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	0e1b      	lsrs	r3, r3, #24
 800e6fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e702:	601a      	str	r2, [r3, #0]
    scr++;
 800e704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e706:	3304      	adds	r3, #4
 800e708:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	061a      	lsls	r2, r3, #24
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e716:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	0a1b      	lsrs	r3, r3, #8
 800e71c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e720:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	0e1b      	lsrs	r3, r3, #24
 800e726:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	373c      	adds	r7, #60	@ 0x3c
 800e732:	46bd      	mov	sp, r7
 800e734:	bd90      	pop	{r4, r7, pc}

0800e736 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e025      	b.n	800e796 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f5 fb9c 	bl	8003e9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2202      	movs	r2, #2
 800e768:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f002 f8c0 	bl	80108fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	461a      	mov	r2, r3
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	f002 f914 	bl	80109b4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
	...

0800e7a0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e04c      	b.n	800e84c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7f4 ffdc 	bl	8003784 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f022 0203 	bic.w	r2, r2, #3
 800e7e2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	4b19      	ldr	r3, [pc, #100]	@ (800e854 <HAL_SPDIFRX_Init+0xb4>)
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e7fc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e802:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e808:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e80e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e814:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e81a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e820:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800e826:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800e82c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e82e:	68fa      	ldr	r2, [r7, #12]
 800e830:	4313      	orrs	r3, r2
 800e832:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	fff88407 	.word	0xfff88407

0800e858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d101      	bne.n	800e86a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e866:	2301      	movs	r3, #1
 800e868:	e09d      	b.n	800e9a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d108      	bne.n	800e884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e87a:	d009      	beq.n	800e890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	61da      	str	r2, [r3, #28]
 800e882:	e005      	b.n	800e890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d106      	bne.n	800e8b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7f4 ffce 	bl	800384c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e8d0:	d902      	bls.n	800e8d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e002      	b.n	800e8de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e8d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e8e6:	d007      	beq.n	800e8f8 <HAL_SPI_Init+0xa0>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e8f0:	d002      	beq.n	800e8f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e908:	431a      	orrs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	431a      	orrs	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	431a      	orrs	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e926:	431a      	orrs	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	69db      	ldr	r3, [r3, #28]
 800e92c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e930:	431a      	orrs	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e93a:	ea42 0103 	orr.w	r1, r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e942:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	430a      	orrs	r2, r1
 800e94c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	0c1b      	lsrs	r3, r3, #16
 800e954:	f003 0204 	and.w	r2, r3, #4
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e95c:	f003 0310 	and.w	r3, r3, #16
 800e960:	431a      	orrs	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e966:	f003 0308 	and.w	r3, r3, #8
 800e96a:	431a      	orrs	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e974:	ea42 0103 	orr.w	r1, r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	430a      	orrs	r2, r1
 800e984:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	69da      	ldr	r2, [r3, #28]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e994:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e049      	b.n	800ea54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d106      	bne.n	800e9da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7f4 ffe7 	bl	80039a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2202      	movs	r2, #2
 800e9de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3304      	adds	r3, #4
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	f000 fd05 	bl	800f3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d001      	beq.n	800ea74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e054      	b.n	800eb1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2202      	movs	r2, #2
 800ea78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68da      	ldr	r2, [r3, #12]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f042 0201 	orr.w	r2, r2, #1
 800ea8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a26      	ldr	r2, [pc, #152]	@ (800eb2c <HAL_TIM_Base_Start_IT+0xd0>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d022      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea9e:	d01d      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a22      	ldr	r2, [pc, #136]	@ (800eb30 <HAL_TIM_Base_Start_IT+0xd4>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d018      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a21      	ldr	r2, [pc, #132]	@ (800eb34 <HAL_TIM_Base_Start_IT+0xd8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d013      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a1f      	ldr	r2, [pc, #124]	@ (800eb38 <HAL_TIM_Base_Start_IT+0xdc>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00e      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a1e      	ldr	r2, [pc, #120]	@ (800eb3c <HAL_TIM_Base_Start_IT+0xe0>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d009      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a1c      	ldr	r2, [pc, #112]	@ (800eb40 <HAL_TIM_Base_Start_IT+0xe4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d004      	beq.n	800eadc <HAL_TIM_Base_Start_IT+0x80>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb44 <HAL_TIM_Base_Start_IT+0xe8>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d115      	bne.n	800eb08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	4b19      	ldr	r3, [pc, #100]	@ (800eb48 <HAL_TIM_Base_Start_IT+0xec>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b06      	cmp	r3, #6
 800eaec:	d015      	beq.n	800eb1a <HAL_TIM_Base_Start_IT+0xbe>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eaf4:	d011      	beq.n	800eb1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f042 0201 	orr.w	r2, r2, #1
 800eb04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb06:	e008      	b.n	800eb1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f042 0201 	orr.w	r2, r2, #1
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	e000      	b.n	800eb1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3714      	adds	r7, #20
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	40010000 	.word	0x40010000
 800eb30:	40000400 	.word	0x40000400
 800eb34:	40000800 	.word	0x40000800
 800eb38:	40000c00 	.word	0x40000c00
 800eb3c:	40010400 	.word	0x40010400
 800eb40:	40014000 	.word	0x40014000
 800eb44:	40001800 	.word	0x40001800
 800eb48:	00010007 	.word	0x00010007

0800eb4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d101      	bne.n	800eb5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e049      	b.n	800ebf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7f4 ff72 	bl	8003a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4610      	mov	r0, r2
 800eb8c:	f000 fc36 	bl	800f3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e049      	b.n	800eca0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d106      	bne.n	800ec26 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7f4 fe75 	bl	8003910 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2202      	movs	r2, #2
 800ec2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3304      	adds	r3, #4
 800ec36:	4619      	mov	r1, r3
 800ec38:	4610      	mov	r0, r2
 800ec3a:	f000 fbdf 	bl	800f3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2201      	movs	r2, #1
 800ec62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2201      	movs	r2, #1
 800ec92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f003 0302 	and.w	r3, r3, #2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d020      	beq.n	800ed0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f003 0302 	and.w	r3, r3, #2
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d01b      	beq.n	800ed0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f06f 0202 	mvn.w	r2, #2
 800ecdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	f003 0303 	and.w	r3, r3, #3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d003      	beq.n	800ecfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 fb64 	bl	800f3c0 <HAL_TIM_IC_CaptureCallback>
 800ecf8:	e005      	b.n	800ed06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 fb56 	bl	800f3ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fb67 	bl	800f3d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	f003 0304 	and.w	r3, r3, #4
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d020      	beq.n	800ed58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f003 0304 	and.w	r3, r3, #4
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d01b      	beq.n	800ed58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f06f 0204 	mvn.w	r2, #4
 800ed28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d003      	beq.n	800ed46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fb3e 	bl	800f3c0 <HAL_TIM_IC_CaptureCallback>
 800ed44:	e005      	b.n	800ed52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fb30 	bl	800f3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fb41 	bl	800f3d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	f003 0308 	and.w	r3, r3, #8
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d020      	beq.n	800eda4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f003 0308 	and.w	r3, r3, #8
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d01b      	beq.n	800eda4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f06f 0208 	mvn.w	r2, #8
 800ed74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2204      	movs	r2, #4
 800ed7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	f003 0303 	and.w	r3, r3, #3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fb18 	bl	800f3c0 <HAL_TIM_IC_CaptureCallback>
 800ed90:	e005      	b.n	800ed9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fb0a 	bl	800f3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fb1b 	bl	800f3d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f003 0310 	and.w	r3, r3, #16
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d020      	beq.n	800edf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f003 0310 	and.w	r3, r3, #16
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d01b      	beq.n	800edf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f06f 0210 	mvn.w	r2, #16
 800edc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2208      	movs	r2, #8
 800edc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	69db      	ldr	r3, [r3, #28]
 800edce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d003      	beq.n	800edde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 faf2 	bl	800f3c0 <HAL_TIM_IC_CaptureCallback>
 800eddc:	e005      	b.n	800edea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 fae4 	bl	800f3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 faf5 	bl	800f3d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00c      	beq.n	800ee14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d007      	beq.n	800ee14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f06f 0201 	mvn.w	r2, #1
 800ee0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7f3 ff36 	bl	8002c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d104      	bne.n	800ee28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00c      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d007      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ee3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f001 f843 	bl	800fec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00c      	beq.n	800ee66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d007      	beq.n	800ee66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ee5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f001 f83b 	bl	800fedc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00c      	beq.n	800ee8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d007      	beq.n	800ee8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ee82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 faaf 	bl	800f3e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	f003 0320 	and.w	r3, r3, #32
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00c      	beq.n	800eeae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f003 0320 	and.w	r3, r3, #32
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d007      	beq.n	800eeae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f06f 0220 	mvn.w	r2, #32
 800eea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f001 f803 	bl	800feb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b086      	sub	sp, #24
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d101      	bne.n	800eed4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800eed0:	2302      	movs	r3, #2
 800eed2:	e088      	b.n	800efe6 <HAL_TIM_IC_ConfigChannel+0x130>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2201      	movs	r2, #1
 800eed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d11b      	bne.n	800ef1a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800eef2:	f000 fd8d 	bl	800fa10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	699a      	ldr	r2, [r3, #24]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f022 020c 	bic.w	r2, r2, #12
 800ef04:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6999      	ldr	r1, [r3, #24]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	689a      	ldr	r2, [r3, #8]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	619a      	str	r2, [r3, #24]
 800ef18:	e060      	b.n	800efdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d11c      	bne.n	800ef5a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ef30:	f000 fe11 	bl	800fb56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ef42:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6999      	ldr	r1, [r3, #24]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	021a      	lsls	r2, r3, #8
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	430a      	orrs	r2, r1
 800ef56:	619a      	str	r2, [r3, #24]
 800ef58:	e040      	b.n	800efdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b08      	cmp	r3, #8
 800ef5e:	d11b      	bne.n	800ef98 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ef70:	f000 fe5e 	bl	800fc30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	69da      	ldr	r2, [r3, #28]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f022 020c 	bic.w	r2, r2, #12
 800ef82:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	69d9      	ldr	r1, [r3, #28]
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	689a      	ldr	r2, [r3, #8]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	61da      	str	r2, [r3, #28]
 800ef96:	e021      	b.n	800efdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b0c      	cmp	r3, #12
 800ef9c:	d11c      	bne.n	800efd8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800efae:	f000 fe7b 	bl	800fca8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	69da      	ldr	r2, [r3, #28]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800efc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	69d9      	ldr	r1, [r3, #28]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	021a      	lsls	r2, r3, #8
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	61da      	str	r2, [r3, #28]
 800efd6:	e001      	b.n	800efdc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800efe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
	...

0800eff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f006:	2b01      	cmp	r3, #1
 800f008:	d101      	bne.n	800f00e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f00a:	2302      	movs	r3, #2
 800f00c:	e0ff      	b.n	800f20e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b14      	cmp	r3, #20
 800f01a:	f200 80f0 	bhi.w	800f1fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f01e:	a201      	add	r2, pc, #4	@ (adr r2, 800f024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f024:	0800f079 	.word	0x0800f079
 800f028:	0800f1ff 	.word	0x0800f1ff
 800f02c:	0800f1ff 	.word	0x0800f1ff
 800f030:	0800f1ff 	.word	0x0800f1ff
 800f034:	0800f0b9 	.word	0x0800f0b9
 800f038:	0800f1ff 	.word	0x0800f1ff
 800f03c:	0800f1ff 	.word	0x0800f1ff
 800f040:	0800f1ff 	.word	0x0800f1ff
 800f044:	0800f0fb 	.word	0x0800f0fb
 800f048:	0800f1ff 	.word	0x0800f1ff
 800f04c:	0800f1ff 	.word	0x0800f1ff
 800f050:	0800f1ff 	.word	0x0800f1ff
 800f054:	0800f13b 	.word	0x0800f13b
 800f058:	0800f1ff 	.word	0x0800f1ff
 800f05c:	0800f1ff 	.word	0x0800f1ff
 800f060:	0800f1ff 	.word	0x0800f1ff
 800f064:	0800f17d 	.word	0x0800f17d
 800f068:	0800f1ff 	.word	0x0800f1ff
 800f06c:	0800f1ff 	.word	0x0800f1ff
 800f070:	0800f1ff 	.word	0x0800f1ff
 800f074:	0800f1bd 	.word	0x0800f1bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	4618      	mov	r0, r3
 800f080:	f000 fa68 	bl	800f554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	699a      	ldr	r2, [r3, #24]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f042 0208 	orr.w	r2, r2, #8
 800f092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	699a      	ldr	r2, [r3, #24]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f022 0204 	bic.w	r2, r2, #4
 800f0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	6999      	ldr	r1, [r3, #24]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	691a      	ldr	r2, [r3, #16]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	619a      	str	r2, [r3, #24]
      break;
 800f0b6:	e0a5      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 faba 	bl	800f638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	699a      	ldr	r2, [r3, #24]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	699a      	ldr	r2, [r3, #24]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	6999      	ldr	r1, [r3, #24]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	021a      	lsls	r2, r3, #8
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	619a      	str	r2, [r3, #24]
      break;
 800f0f8:	e084      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68b9      	ldr	r1, [r7, #8]
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fb11 	bl	800f728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	69da      	ldr	r2, [r3, #28]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f042 0208 	orr.w	r2, r2, #8
 800f114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	69da      	ldr	r2, [r3, #28]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f022 0204 	bic.w	r2, r2, #4
 800f124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	69d9      	ldr	r1, [r3, #28]
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	691a      	ldr	r2, [r3, #16]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	61da      	str	r2, [r3, #28]
      break;
 800f138:	e064      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 fb67 	bl	800f814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	69da      	ldr	r2, [r3, #28]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	69da      	ldr	r2, [r3, #28]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	69d9      	ldr	r1, [r3, #28]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	021a      	lsls	r2, r3, #8
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	430a      	orrs	r2, r1
 800f178:	61da      	str	r2, [r3, #28]
      break;
 800f17a:	e043      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f000 fb9e 	bl	800f8c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f042 0208 	orr.w	r2, r2, #8
 800f196:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f022 0204 	bic.w	r2, r2, #4
 800f1a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	691a      	ldr	r2, [r3, #16]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	430a      	orrs	r2, r1
 800f1b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f1ba:	e023      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68b9      	ldr	r1, [r7, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 fbd0 	bl	800f968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	021a      	lsls	r2, r3, #8
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	430a      	orrs	r2, r1
 800f1fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f1fc:	e002      	b.n	800f204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	75fb      	strb	r3, [r7, #23]
      break;
 800f202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop

0800f218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f222:	2300      	movs	r3, #0
 800f224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d101      	bne.n	800f234 <HAL_TIM_ConfigClockSource+0x1c>
 800f230:	2302      	movs	r3, #2
 800f232:	e0b4      	b.n	800f39e <HAL_TIM_ConfigClockSource+0x186>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	4b56      	ldr	r3, [pc, #344]	@ (800f3a8 <HAL_TIM_ConfigClockSource+0x190>)
 800f250:	4013      	ands	r3, r2
 800f252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f25a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f26c:	d03e      	beq.n	800f2ec <HAL_TIM_ConfigClockSource+0xd4>
 800f26e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f272:	f200 8087 	bhi.w	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f27a:	f000 8086 	beq.w	800f38a <HAL_TIM_ConfigClockSource+0x172>
 800f27e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f282:	d87f      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f284:	2b70      	cmp	r3, #112	@ 0x70
 800f286:	d01a      	beq.n	800f2be <HAL_TIM_ConfigClockSource+0xa6>
 800f288:	2b70      	cmp	r3, #112	@ 0x70
 800f28a:	d87b      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f28c:	2b60      	cmp	r3, #96	@ 0x60
 800f28e:	d050      	beq.n	800f332 <HAL_TIM_ConfigClockSource+0x11a>
 800f290:	2b60      	cmp	r3, #96	@ 0x60
 800f292:	d877      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f294:	2b50      	cmp	r3, #80	@ 0x50
 800f296:	d03c      	beq.n	800f312 <HAL_TIM_ConfigClockSource+0xfa>
 800f298:	2b50      	cmp	r3, #80	@ 0x50
 800f29a:	d873      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f29c:	2b40      	cmp	r3, #64	@ 0x40
 800f29e:	d058      	beq.n	800f352 <HAL_TIM_ConfigClockSource+0x13a>
 800f2a0:	2b40      	cmp	r3, #64	@ 0x40
 800f2a2:	d86f      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f2a4:	2b30      	cmp	r3, #48	@ 0x30
 800f2a6:	d064      	beq.n	800f372 <HAL_TIM_ConfigClockSource+0x15a>
 800f2a8:	2b30      	cmp	r3, #48	@ 0x30
 800f2aa:	d86b      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f2ac:	2b20      	cmp	r3, #32
 800f2ae:	d060      	beq.n	800f372 <HAL_TIM_ConfigClockSource+0x15a>
 800f2b0:	2b20      	cmp	r3, #32
 800f2b2:	d867      	bhi.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d05c      	beq.n	800f372 <HAL_TIM_ConfigClockSource+0x15a>
 800f2b8:	2b10      	cmp	r3, #16
 800f2ba:	d05a      	beq.n	800f372 <HAL_TIM_ConfigClockSource+0x15a>
 800f2bc:	e062      	b.n	800f384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f2ce:	f000 fd43 	bl	800fd58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f2e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	609a      	str	r2, [r3, #8]
      break;
 800f2ea:	e04f      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f2fc:	f000 fd2c 	bl	800fd58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	689a      	ldr	r2, [r3, #8]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f30e:	609a      	str	r2, [r3, #8]
      break;
 800f310:	e03c      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f31e:	461a      	mov	r2, r3
 800f320:	f000 fbea 	bl	800faf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2150      	movs	r1, #80	@ 0x50
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 fcf9 	bl	800fd22 <TIM_ITRx_SetConfig>
      break;
 800f330:	e02c      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f33e:	461a      	mov	r2, r3
 800f340:	f000 fc46 	bl	800fbd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2160      	movs	r1, #96	@ 0x60
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fce9 	bl	800fd22 <TIM_ITRx_SetConfig>
      break;
 800f350:	e01c      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f35e:	461a      	mov	r2, r3
 800f360:	f000 fbca 	bl	800faf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2140      	movs	r1, #64	@ 0x40
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 fcd9 	bl	800fd22 <TIM_ITRx_SetConfig>
      break;
 800f370:	e00c      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4619      	mov	r1, r3
 800f37c:	4610      	mov	r0, r2
 800f37e:	f000 fcd0 	bl	800fd22 <TIM_ITRx_SetConfig>
      break;
 800f382:	e003      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	73fb      	strb	r3, [r7, #15]
      break;
 800f388:	e000      	b.n	800f38c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f38a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	fffeff88 	.word	0xfffeff88

0800f3ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f3b4:	bf00      	nop
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a46      	ldr	r2, [pc, #280]	@ (800f528 <TIM_Base_SetConfig+0x12c>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d013      	beq.n	800f43c <TIM_Base_SetConfig+0x40>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f41a:	d00f      	beq.n	800f43c <TIM_Base_SetConfig+0x40>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a43      	ldr	r2, [pc, #268]	@ (800f52c <TIM_Base_SetConfig+0x130>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d00b      	beq.n	800f43c <TIM_Base_SetConfig+0x40>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a42      	ldr	r2, [pc, #264]	@ (800f530 <TIM_Base_SetConfig+0x134>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d007      	beq.n	800f43c <TIM_Base_SetConfig+0x40>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a41      	ldr	r2, [pc, #260]	@ (800f534 <TIM_Base_SetConfig+0x138>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d003      	beq.n	800f43c <TIM_Base_SetConfig+0x40>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a40      	ldr	r2, [pc, #256]	@ (800f538 <TIM_Base_SetConfig+0x13c>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d108      	bne.n	800f44e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	4313      	orrs	r3, r2
 800f44c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a35      	ldr	r2, [pc, #212]	@ (800f528 <TIM_Base_SetConfig+0x12c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d02b      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f45c:	d027      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a32      	ldr	r2, [pc, #200]	@ (800f52c <TIM_Base_SetConfig+0x130>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d023      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a31      	ldr	r2, [pc, #196]	@ (800f530 <TIM_Base_SetConfig+0x134>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d01f      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a30      	ldr	r2, [pc, #192]	@ (800f534 <TIM_Base_SetConfig+0x138>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d01b      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a2f      	ldr	r2, [pc, #188]	@ (800f538 <TIM_Base_SetConfig+0x13c>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d017      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a2e      	ldr	r2, [pc, #184]	@ (800f53c <TIM_Base_SetConfig+0x140>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d013      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a2d      	ldr	r2, [pc, #180]	@ (800f540 <TIM_Base_SetConfig+0x144>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00f      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a2c      	ldr	r2, [pc, #176]	@ (800f544 <TIM_Base_SetConfig+0x148>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d00b      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a2b      	ldr	r2, [pc, #172]	@ (800f548 <TIM_Base_SetConfig+0x14c>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d007      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a2a      	ldr	r2, [pc, #168]	@ (800f54c <TIM_Base_SetConfig+0x150>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d003      	beq.n	800f4ae <TIM_Base_SetConfig+0xb2>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4a29      	ldr	r2, [pc, #164]	@ (800f550 <TIM_Base_SetConfig+0x154>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d108      	bne.n	800f4c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	689a      	ldr	r2, [r3, #8]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a10      	ldr	r2, [pc, #64]	@ (800f528 <TIM_Base_SetConfig+0x12c>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d003      	beq.n	800f4f4 <TIM_Base_SetConfig+0xf8>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a12      	ldr	r2, [pc, #72]	@ (800f538 <TIM_Base_SetConfig+0x13c>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d103      	bne.n	800f4fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	691a      	ldr	r2, [r3, #16]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d105      	bne.n	800f51a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	f023 0201 	bic.w	r2, r3, #1
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	611a      	str	r2, [r3, #16]
  }
}
 800f51a:	bf00      	nop
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	40010000 	.word	0x40010000
 800f52c:	40000400 	.word	0x40000400
 800f530:	40000800 	.word	0x40000800
 800f534:	40000c00 	.word	0x40000c00
 800f538:	40010400 	.word	0x40010400
 800f53c:	40014000 	.word	0x40014000
 800f540:	40014400 	.word	0x40014400
 800f544:	40014800 	.word	0x40014800
 800f548:	40001800 	.word	0x40001800
 800f54c:	40001c00 	.word	0x40001c00
 800f550:	40002000 	.word	0x40002000

0800f554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f554:	b480      	push	{r7}
 800f556:	b087      	sub	sp, #28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a1b      	ldr	r3, [r3, #32]
 800f562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6a1b      	ldr	r3, [r3, #32]
 800f568:	f023 0201 	bic.w	r2, r3, #1
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	4b2b      	ldr	r3, [pc, #172]	@ (800f62c <TIM_OC1_SetConfig+0xd8>)
 800f580:	4013      	ands	r3, r2
 800f582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f023 0303 	bic.w	r3, r3, #3
 800f58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	4313      	orrs	r3, r2
 800f594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	f023 0302 	bic.w	r3, r3, #2
 800f59c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a21      	ldr	r2, [pc, #132]	@ (800f630 <TIM_OC1_SetConfig+0xdc>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d003      	beq.n	800f5b8 <TIM_OC1_SetConfig+0x64>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a20      	ldr	r2, [pc, #128]	@ (800f634 <TIM_OC1_SetConfig+0xe0>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d10c      	bne.n	800f5d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f023 0308 	bic.w	r3, r3, #8
 800f5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	697a      	ldr	r2, [r7, #20]
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	f023 0304 	bic.w	r3, r3, #4
 800f5d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a16      	ldr	r2, [pc, #88]	@ (800f630 <TIM_OC1_SetConfig+0xdc>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d003      	beq.n	800f5e2 <TIM_OC1_SetConfig+0x8e>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a15      	ldr	r2, [pc, #84]	@ (800f634 <TIM_OC1_SetConfig+0xe0>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d111      	bne.n	800f606 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	693a      	ldr	r2, [r7, #16]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	4313      	orrs	r3, r2
 800f604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	693a      	ldr	r2, [r7, #16]
 800f60a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	697a      	ldr	r2, [r7, #20]
 800f61e:	621a      	str	r2, [r3, #32]
}
 800f620:	bf00      	nop
 800f622:	371c      	adds	r7, #28
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	fffeff8f 	.word	0xfffeff8f
 800f630:	40010000 	.word	0x40010000
 800f634:	40010400 	.word	0x40010400

0800f638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6a1b      	ldr	r3, [r3, #32]
 800f64c:	f023 0210 	bic.w	r2, r3, #16
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	699b      	ldr	r3, [r3, #24]
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	4b2e      	ldr	r3, [pc, #184]	@ (800f71c <TIM_OC2_SetConfig+0xe4>)
 800f664:	4013      	ands	r3, r2
 800f666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f66e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	021b      	lsls	r3, r3, #8
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	4313      	orrs	r3, r2
 800f67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	f023 0320 	bic.w	r3, r3, #32
 800f682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	011b      	lsls	r3, r3, #4
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a23      	ldr	r2, [pc, #140]	@ (800f720 <TIM_OC2_SetConfig+0xe8>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d003      	beq.n	800f6a0 <TIM_OC2_SetConfig+0x68>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a22      	ldr	r2, [pc, #136]	@ (800f724 <TIM_OC2_SetConfig+0xec>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d10d      	bne.n	800f6bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	011b      	lsls	r3, r3, #4
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a18      	ldr	r2, [pc, #96]	@ (800f720 <TIM_OC2_SetConfig+0xe8>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d003      	beq.n	800f6cc <TIM_OC2_SetConfig+0x94>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a17      	ldr	r2, [pc, #92]	@ (800f724 <TIM_OC2_SetConfig+0xec>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d113      	bne.n	800f6f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	695b      	ldr	r3, [r3, #20]
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	699b      	ldr	r3, [r3, #24]
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	685a      	ldr	r2, [r3, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	621a      	str	r2, [r3, #32]
}
 800f70e:	bf00      	nop
 800f710:	371c      	adds	r7, #28
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	feff8fff 	.word	0xfeff8fff
 800f720:	40010000 	.word	0x40010000
 800f724:	40010400 	.word	0x40010400

0800f728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f728:	b480      	push	{r7}
 800f72a:	b087      	sub	sp, #28
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	4b2d      	ldr	r3, [pc, #180]	@ (800f808 <TIM_OC3_SetConfig+0xe0>)
 800f754:	4013      	ands	r3, r2
 800f756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f023 0303 	bic.w	r3, r3, #3
 800f75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	4313      	orrs	r3, r2
 800f768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	021b      	lsls	r3, r3, #8
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a22      	ldr	r2, [pc, #136]	@ (800f80c <TIM_OC3_SetConfig+0xe4>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d003      	beq.n	800f78e <TIM_OC3_SetConfig+0x66>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a21      	ldr	r2, [pc, #132]	@ (800f810 <TIM_OC3_SetConfig+0xe8>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d10d      	bne.n	800f7aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	021b      	lsls	r3, r3, #8
 800f79c:	697a      	ldr	r2, [r7, #20]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a17      	ldr	r2, [pc, #92]	@ (800f80c <TIM_OC3_SetConfig+0xe4>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d003      	beq.n	800f7ba <TIM_OC3_SetConfig+0x92>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a16      	ldr	r2, [pc, #88]	@ (800f810 <TIM_OC3_SetConfig+0xe8>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d113      	bne.n	800f7e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f7c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	011b      	lsls	r3, r3, #4
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	011b      	lsls	r3, r3, #4
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	685a      	ldr	r2, [r3, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	621a      	str	r2, [r3, #32]
}
 800f7fc:	bf00      	nop
 800f7fe:	371c      	adds	r7, #28
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	fffeff8f 	.word	0xfffeff8f
 800f80c:	40010000 	.word	0x40010000
 800f810:	40010400 	.word	0x40010400

0800f814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a1b      	ldr	r3, [r3, #32]
 800f828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	69db      	ldr	r3, [r3, #28]
 800f83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	4b1e      	ldr	r3, [pc, #120]	@ (800f8b8 <TIM_OC4_SetConfig+0xa4>)
 800f840:	4013      	ands	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	021b      	lsls	r3, r3, #8
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	4313      	orrs	r3, r2
 800f856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f85e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	031b      	lsls	r3, r3, #12
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	4313      	orrs	r3, r2
 800f86a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a13      	ldr	r2, [pc, #76]	@ (800f8bc <TIM_OC4_SetConfig+0xa8>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d003      	beq.n	800f87c <TIM_OC4_SetConfig+0x68>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a12      	ldr	r2, [pc, #72]	@ (800f8c0 <TIM_OC4_SetConfig+0xac>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d109      	bne.n	800f890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	695b      	ldr	r3, [r3, #20]
 800f888:	019b      	lsls	r3, r3, #6
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	697a      	ldr	r2, [r7, #20]
 800f894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	685a      	ldr	r2, [r3, #4]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	621a      	str	r2, [r3, #32]
}
 800f8aa:	bf00      	nop
 800f8ac:	371c      	adds	r7, #28
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	feff8fff 	.word	0xfeff8fff
 800f8bc:	40010000 	.word	0x40010000
 800f8c0:	40010400 	.word	0x40010400

0800f8c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b087      	sub	sp, #28
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6a1b      	ldr	r3, [r3, #32]
 800f8d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4b1b      	ldr	r3, [pc, #108]	@ (800f95c <TIM_OC5_SetConfig+0x98>)
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	041b      	lsls	r3, r3, #16
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	4313      	orrs	r3, r2
 800f910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a12      	ldr	r2, [pc, #72]	@ (800f960 <TIM_OC5_SetConfig+0x9c>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d003      	beq.n	800f922 <TIM_OC5_SetConfig+0x5e>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4a11      	ldr	r2, [pc, #68]	@ (800f964 <TIM_OC5_SetConfig+0xa0>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d109      	bne.n	800f936 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f928:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	697a      	ldr	r2, [r7, #20]
 800f93a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	685a      	ldr	r2, [r3, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	621a      	str	r2, [r3, #32]
}
 800f950:	bf00      	nop
 800f952:	371c      	adds	r7, #28
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	fffeff8f 	.word	0xfffeff8f
 800f960:	40010000 	.word	0x40010000
 800f964:	40010400 	.word	0x40010400

0800f968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f968:	b480      	push	{r7}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4b1c      	ldr	r3, [pc, #112]	@ (800fa04 <TIM_OC6_SetConfig+0x9c>)
 800f994:	4013      	ands	r3, r2
 800f996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	021b      	lsls	r3, r3, #8
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	051b      	lsls	r3, r3, #20
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4a13      	ldr	r2, [pc, #76]	@ (800fa08 <TIM_OC6_SetConfig+0xa0>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d003      	beq.n	800f9c8 <TIM_OC6_SetConfig+0x60>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a12      	ldr	r2, [pc, #72]	@ (800fa0c <TIM_OC6_SetConfig+0xa4>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d109      	bne.n	800f9dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f9ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	029b      	lsls	r3, r3, #10
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	685a      	ldr	r2, [r3, #4]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	693a      	ldr	r2, [r7, #16]
 800f9f4:	621a      	str	r2, [r3, #32]
}
 800f9f6:	bf00      	nop
 800f9f8:	371c      	adds	r7, #28
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	feff8fff 	.word	0xfeff8fff
 800fa08:	40010000 	.word	0x40010000
 800fa0c:	40010400 	.word	0x40010400

0800fa10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
 800fa1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6a1b      	ldr	r3, [r3, #32]
 800fa28:	f023 0201 	bic.w	r2, r3, #1
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	4a28      	ldr	r2, [pc, #160]	@ (800fadc <TIM_TI1_SetConfig+0xcc>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d01b      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa44:	d017      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4a25      	ldr	r2, [pc, #148]	@ (800fae0 <TIM_TI1_SetConfig+0xd0>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d013      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	4a24      	ldr	r2, [pc, #144]	@ (800fae4 <TIM_TI1_SetConfig+0xd4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d00f      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	4a23      	ldr	r2, [pc, #140]	@ (800fae8 <TIM_TI1_SetConfig+0xd8>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00b      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	4a22      	ldr	r2, [pc, #136]	@ (800faec <TIM_TI1_SetConfig+0xdc>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d007      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	4a21      	ldr	r2, [pc, #132]	@ (800faf0 <TIM_TI1_SetConfig+0xe0>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d003      	beq.n	800fa76 <TIM_TI1_SetConfig+0x66>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4a20      	ldr	r2, [pc, #128]	@ (800faf4 <TIM_TI1_SetConfig+0xe4>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d101      	bne.n	800fa7a <TIM_TI1_SetConfig+0x6a>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <TIM_TI1_SetConfig+0x6c>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d008      	beq.n	800fa92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	f023 0303 	bic.w	r3, r3, #3
 800fa86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	617b      	str	r3, [r7, #20]
 800fa90:	e003      	b.n	800fa9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f043 0301 	orr.w	r3, r3, #1
 800fa98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800faa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	011b      	lsls	r3, r3, #4
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	4313      	orrs	r3, r2
 800faac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	f023 030a 	bic.w	r3, r3, #10
 800fab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	f003 030a 	and.w	r3, r3, #10
 800fabc:	693a      	ldr	r2, [r7, #16]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	693a      	ldr	r2, [r7, #16]
 800facc:	621a      	str	r2, [r3, #32]
}
 800face:	bf00      	nop
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	40010000 	.word	0x40010000
 800fae0:	40000400 	.word	0x40000400
 800fae4:	40000800 	.word	0x40000800
 800fae8:	40000c00 	.word	0x40000c00
 800faec:	40010400 	.word	0x40010400
 800faf0:	40014000 	.word	0x40014000
 800faf4:	40001800 	.word	0x40001800

0800faf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b087      	sub	sp, #28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6a1b      	ldr	r3, [r3, #32]
 800fb08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6a1b      	ldr	r3, [r3, #32]
 800fb0e:	f023 0201 	bic.w	r2, r3, #1
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fb22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	011b      	lsls	r3, r3, #4
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f023 030a 	bic.w	r3, r3, #10
 800fb34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	693a      	ldr	r2, [r7, #16]
 800fb42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	621a      	str	r2, [r3, #32]
}
 800fb4a:	bf00      	nop
 800fb4c:	371c      	adds	r7, #28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b087      	sub	sp, #28
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	60f8      	str	r0, [r7, #12]
 800fb5e:	60b9      	str	r1, [r7, #8]
 800fb60:	607a      	str	r2, [r7, #4]
 800fb62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6a1b      	ldr	r3, [r3, #32]
 800fb6e:	f023 0210 	bic.w	r2, r3, #16
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	699b      	ldr	r3, [r3, #24]
 800fb7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	021b      	lsls	r3, r3, #8
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fb94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	031b      	lsls	r3, r3, #12
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fba8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	011b      	lsls	r3, r3, #4
 800fbae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	621a      	str	r2, [r3, #32]
}
 800fbc4:	bf00      	nop
 800fbc6:	371c      	adds	r7, #28
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b087      	sub	sp, #28
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6a1b      	ldr	r3, [r3, #32]
 800fbe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	f023 0210 	bic.w	r2, r3, #16
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fbfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	031b      	lsls	r3, r3, #12
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	621a      	str	r2, [r3, #32]
}
 800fc24:	bf00      	nop
 800fc26:	371c      	adds	r7, #28
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6a1b      	ldr	r3, [r3, #32]
 800fc48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	69db      	ldr	r3, [r3, #28]
 800fc54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	f023 0303 	bic.w	r3, r3, #3
 800fc5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800fc5e:	693a      	ldr	r2, [r7, #16]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	011b      	lsls	r3, r3, #4
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800fc80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	021b      	lsls	r3, r3, #8
 800fc86:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800fc8a:	697a      	ldr	r2, [r7, #20]
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	621a      	str	r2, [r3, #32]
}
 800fc9c:	bf00      	nop
 800fc9e:	371c      	adds	r7, #28
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6a1b      	ldr	r3, [r3, #32]
 800fcc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	69db      	ldr	r3, [r3, #28]
 800fccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	021b      	lsls	r3, r3, #8
 800fcda:	693a      	ldr	r2, [r7, #16]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fce6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	031b      	lsls	r3, r3, #12
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800fcfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	031b      	lsls	r3, r3, #12
 800fd00:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	621a      	str	r2, [r3, #32]
}
 800fd16:	bf00      	nop
 800fd18:	371c      	adds	r7, #28
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd22:	b480      	push	{r7}
 800fd24:	b085      	sub	sp, #20
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd3a:	683a      	ldr	r2, [r7, #0]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	f043 0307 	orr.w	r3, r3, #7
 800fd44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	68fa      	ldr	r2, [r7, #12]
 800fd4a:	609a      	str	r2, [r3, #8]
}
 800fd4c:	bf00      	nop
 800fd4e:	3714      	adds	r7, #20
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	021a      	lsls	r2, r3, #8
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	697a      	ldr	r2, [r7, #20]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	609a      	str	r2, [r3, #8]
}
 800fd8c:	bf00      	nop
 800fd8e:	371c      	adds	r7, #28
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d101      	bne.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fdac:	2302      	movs	r3, #2
 800fdae:	e06d      	b.n	800fe8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2202      	movs	r2, #2
 800fdbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a30      	ldr	r2, [pc, #192]	@ (800fe98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d004      	beq.n	800fde4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a2f      	ldr	r2, [pc, #188]	@ (800fe9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d108      	bne.n	800fdf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fdea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a20      	ldr	r2, [pc, #128]	@ (800fe98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d022      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe22:	d01d      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a1d      	ldr	r2, [pc, #116]	@ (800fea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d018      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a1c      	ldr	r2, [pc, #112]	@ (800fea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d013      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a1a      	ldr	r2, [pc, #104]	@ (800fea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d00e      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a15      	ldr	r2, [pc, #84]	@ (800fe9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d009      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a16      	ldr	r2, [pc, #88]	@ (800feac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d004      	beq.n	800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a15      	ldr	r2, [pc, #84]	@ (800feb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d10c      	bne.n	800fe7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3714      	adds	r7, #20
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	40010000 	.word	0x40010000
 800fe9c:	40010400 	.word	0x40010400
 800fea0:	40000400 	.word	0x40000400
 800fea4:	40000800 	.word	0x40000800
 800fea8:	40000c00 	.word	0x40000c00
 800feac:	40014000 	.word	0x40014000
 800feb0:	40001800 	.word	0x40001800

0800feb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d101      	bne.n	800ff02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e040      	b.n	800ff84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7f3 fe6a 	bl	8003bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2224      	movs	r2, #36	@ 0x24
 800ff1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f022 0201 	bic.w	r2, r2, #1
 800ff2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 fb16 	bl	8010568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f8af 	bl	80100a0 <UART_SetConfig>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d101      	bne.n	800ff4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e01b      	b.n	800ff84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f042 0201 	orr.w	r2, r2, #1
 800ff7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fb95 	bl	80106ac <UART_CheckIdleState>
 800ff82:	4603      	mov	r3, r0
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b08a      	sub	sp, #40	@ 0x28
 800ff90:	af02      	add	r7, sp, #8
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffa0:	2b20      	cmp	r3, #32
 800ffa2:	d177      	bne.n	8010094 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d002      	beq.n	800ffb0 <HAL_UART_Transmit+0x24>
 800ffaa:	88fb      	ldrh	r3, [r7, #6]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e070      	b.n	8010096 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2221      	movs	r2, #33	@ 0x21
 800ffc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffc2:	f7f4 fa0d 	bl	80043e0 <HAL_GetTick>
 800ffc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	88fa      	ldrh	r2, [r7, #6]
 800ffcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	88fa      	ldrh	r2, [r7, #6]
 800ffd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffe0:	d108      	bne.n	800fff4 <HAL_UART_Transmit+0x68>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	691b      	ldr	r3, [r3, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d104      	bne.n	800fff4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	61bb      	str	r3, [r7, #24]
 800fff2:	e003      	b.n	800fffc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fff8:	2300      	movs	r3, #0
 800fffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fffc:	e02f      	b.n	801005e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2200      	movs	r2, #0
 8010006:	2180      	movs	r1, #128	@ 0x80
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f000 fba6 	bl	801075a <UART_WaitOnFlagUntilTimeout>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d004      	beq.n	801001e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2220      	movs	r2, #32
 8010018:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801001a:	2303      	movs	r3, #3
 801001c:	e03b      	b.n	8010096 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10b      	bne.n	801003c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	461a      	mov	r2, r3
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010032:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	3302      	adds	r3, #2
 8010038:	61bb      	str	r3, [r7, #24]
 801003a:	e007      	b.n	801004c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	781a      	ldrb	r2, [r3, #0]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	3301      	adds	r3, #1
 801004a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010052:	b29b      	uxth	r3, r3
 8010054:	3b01      	subs	r3, #1
 8010056:	b29a      	uxth	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010064:	b29b      	uxth	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1c9      	bne.n	800fffe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	2200      	movs	r2, #0
 8010072:	2140      	movs	r1, #64	@ 0x40
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f000 fb70 	bl	801075a <UART_WaitOnFlagUntilTimeout>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d004      	beq.n	801008a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2220      	movs	r2, #32
 8010084:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e005      	b.n	8010096 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2220      	movs	r2, #32
 801008e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	e000      	b.n	8010096 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010094:	2302      	movs	r3, #2
  }
}
 8010096:	4618      	mov	r0, r3
 8010098:	3720      	adds	r7, #32
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
	...

080100a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b088      	sub	sp, #32
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	689a      	ldr	r2, [r3, #8]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	431a      	orrs	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	431a      	orrs	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	69db      	ldr	r3, [r3, #28]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	4ba6      	ldr	r3, [pc, #664]	@ (8010364 <UART_SetConfig+0x2c4>)
 80100cc:	4013      	ands	r3, r2
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	6812      	ldr	r2, [r2, #0]
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	430b      	orrs	r3, r1
 80100d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	68da      	ldr	r2, [r3, #12]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	430a      	orrs	r2, r1
 80100ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	699b      	ldr	r3, [r3, #24]
 80100f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a1b      	ldr	r3, [r3, #32]
 80100f8:	697a      	ldr	r2, [r7, #20]
 80100fa:	4313      	orrs	r3, r2
 80100fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	430a      	orrs	r2, r1
 8010110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a94      	ldr	r2, [pc, #592]	@ (8010368 <UART_SetConfig+0x2c8>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d120      	bne.n	801015e <UART_SetConfig+0xbe>
 801011c:	4b93      	ldr	r3, [pc, #588]	@ (801036c <UART_SetConfig+0x2cc>)
 801011e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010122:	f003 0303 	and.w	r3, r3, #3
 8010126:	2b03      	cmp	r3, #3
 8010128:	d816      	bhi.n	8010158 <UART_SetConfig+0xb8>
 801012a:	a201      	add	r2, pc, #4	@ (adr r2, 8010130 <UART_SetConfig+0x90>)
 801012c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010130:	08010141 	.word	0x08010141
 8010134:	0801014d 	.word	0x0801014d
 8010138:	08010147 	.word	0x08010147
 801013c:	08010153 	.word	0x08010153
 8010140:	2301      	movs	r3, #1
 8010142:	77fb      	strb	r3, [r7, #31]
 8010144:	e150      	b.n	80103e8 <UART_SetConfig+0x348>
 8010146:	2302      	movs	r3, #2
 8010148:	77fb      	strb	r3, [r7, #31]
 801014a:	e14d      	b.n	80103e8 <UART_SetConfig+0x348>
 801014c:	2304      	movs	r3, #4
 801014e:	77fb      	strb	r3, [r7, #31]
 8010150:	e14a      	b.n	80103e8 <UART_SetConfig+0x348>
 8010152:	2308      	movs	r3, #8
 8010154:	77fb      	strb	r3, [r7, #31]
 8010156:	e147      	b.n	80103e8 <UART_SetConfig+0x348>
 8010158:	2310      	movs	r3, #16
 801015a:	77fb      	strb	r3, [r7, #31]
 801015c:	e144      	b.n	80103e8 <UART_SetConfig+0x348>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a83      	ldr	r2, [pc, #524]	@ (8010370 <UART_SetConfig+0x2d0>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d132      	bne.n	80101ce <UART_SetConfig+0x12e>
 8010168:	4b80      	ldr	r3, [pc, #512]	@ (801036c <UART_SetConfig+0x2cc>)
 801016a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801016e:	f003 030c 	and.w	r3, r3, #12
 8010172:	2b0c      	cmp	r3, #12
 8010174:	d828      	bhi.n	80101c8 <UART_SetConfig+0x128>
 8010176:	a201      	add	r2, pc, #4	@ (adr r2, 801017c <UART_SetConfig+0xdc>)
 8010178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017c:	080101b1 	.word	0x080101b1
 8010180:	080101c9 	.word	0x080101c9
 8010184:	080101c9 	.word	0x080101c9
 8010188:	080101c9 	.word	0x080101c9
 801018c:	080101bd 	.word	0x080101bd
 8010190:	080101c9 	.word	0x080101c9
 8010194:	080101c9 	.word	0x080101c9
 8010198:	080101c9 	.word	0x080101c9
 801019c:	080101b7 	.word	0x080101b7
 80101a0:	080101c9 	.word	0x080101c9
 80101a4:	080101c9 	.word	0x080101c9
 80101a8:	080101c9 	.word	0x080101c9
 80101ac:	080101c3 	.word	0x080101c3
 80101b0:	2300      	movs	r3, #0
 80101b2:	77fb      	strb	r3, [r7, #31]
 80101b4:	e118      	b.n	80103e8 <UART_SetConfig+0x348>
 80101b6:	2302      	movs	r3, #2
 80101b8:	77fb      	strb	r3, [r7, #31]
 80101ba:	e115      	b.n	80103e8 <UART_SetConfig+0x348>
 80101bc:	2304      	movs	r3, #4
 80101be:	77fb      	strb	r3, [r7, #31]
 80101c0:	e112      	b.n	80103e8 <UART_SetConfig+0x348>
 80101c2:	2308      	movs	r3, #8
 80101c4:	77fb      	strb	r3, [r7, #31]
 80101c6:	e10f      	b.n	80103e8 <UART_SetConfig+0x348>
 80101c8:	2310      	movs	r3, #16
 80101ca:	77fb      	strb	r3, [r7, #31]
 80101cc:	e10c      	b.n	80103e8 <UART_SetConfig+0x348>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a68      	ldr	r2, [pc, #416]	@ (8010374 <UART_SetConfig+0x2d4>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d120      	bne.n	801021a <UART_SetConfig+0x17a>
 80101d8:	4b64      	ldr	r3, [pc, #400]	@ (801036c <UART_SetConfig+0x2cc>)
 80101da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80101e2:	2b30      	cmp	r3, #48	@ 0x30
 80101e4:	d013      	beq.n	801020e <UART_SetConfig+0x16e>
 80101e6:	2b30      	cmp	r3, #48	@ 0x30
 80101e8:	d814      	bhi.n	8010214 <UART_SetConfig+0x174>
 80101ea:	2b20      	cmp	r3, #32
 80101ec:	d009      	beq.n	8010202 <UART_SetConfig+0x162>
 80101ee:	2b20      	cmp	r3, #32
 80101f0:	d810      	bhi.n	8010214 <UART_SetConfig+0x174>
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <UART_SetConfig+0x15c>
 80101f6:	2b10      	cmp	r3, #16
 80101f8:	d006      	beq.n	8010208 <UART_SetConfig+0x168>
 80101fa:	e00b      	b.n	8010214 <UART_SetConfig+0x174>
 80101fc:	2300      	movs	r3, #0
 80101fe:	77fb      	strb	r3, [r7, #31]
 8010200:	e0f2      	b.n	80103e8 <UART_SetConfig+0x348>
 8010202:	2302      	movs	r3, #2
 8010204:	77fb      	strb	r3, [r7, #31]
 8010206:	e0ef      	b.n	80103e8 <UART_SetConfig+0x348>
 8010208:	2304      	movs	r3, #4
 801020a:	77fb      	strb	r3, [r7, #31]
 801020c:	e0ec      	b.n	80103e8 <UART_SetConfig+0x348>
 801020e:	2308      	movs	r3, #8
 8010210:	77fb      	strb	r3, [r7, #31]
 8010212:	e0e9      	b.n	80103e8 <UART_SetConfig+0x348>
 8010214:	2310      	movs	r3, #16
 8010216:	77fb      	strb	r3, [r7, #31]
 8010218:	e0e6      	b.n	80103e8 <UART_SetConfig+0x348>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4a56      	ldr	r2, [pc, #344]	@ (8010378 <UART_SetConfig+0x2d8>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d120      	bne.n	8010266 <UART_SetConfig+0x1c6>
 8010224:	4b51      	ldr	r3, [pc, #324]	@ (801036c <UART_SetConfig+0x2cc>)
 8010226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801022a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801022e:	2bc0      	cmp	r3, #192	@ 0xc0
 8010230:	d013      	beq.n	801025a <UART_SetConfig+0x1ba>
 8010232:	2bc0      	cmp	r3, #192	@ 0xc0
 8010234:	d814      	bhi.n	8010260 <UART_SetConfig+0x1c0>
 8010236:	2b80      	cmp	r3, #128	@ 0x80
 8010238:	d009      	beq.n	801024e <UART_SetConfig+0x1ae>
 801023a:	2b80      	cmp	r3, #128	@ 0x80
 801023c:	d810      	bhi.n	8010260 <UART_SetConfig+0x1c0>
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <UART_SetConfig+0x1a8>
 8010242:	2b40      	cmp	r3, #64	@ 0x40
 8010244:	d006      	beq.n	8010254 <UART_SetConfig+0x1b4>
 8010246:	e00b      	b.n	8010260 <UART_SetConfig+0x1c0>
 8010248:	2300      	movs	r3, #0
 801024a:	77fb      	strb	r3, [r7, #31]
 801024c:	e0cc      	b.n	80103e8 <UART_SetConfig+0x348>
 801024e:	2302      	movs	r3, #2
 8010250:	77fb      	strb	r3, [r7, #31]
 8010252:	e0c9      	b.n	80103e8 <UART_SetConfig+0x348>
 8010254:	2304      	movs	r3, #4
 8010256:	77fb      	strb	r3, [r7, #31]
 8010258:	e0c6      	b.n	80103e8 <UART_SetConfig+0x348>
 801025a:	2308      	movs	r3, #8
 801025c:	77fb      	strb	r3, [r7, #31]
 801025e:	e0c3      	b.n	80103e8 <UART_SetConfig+0x348>
 8010260:	2310      	movs	r3, #16
 8010262:	77fb      	strb	r3, [r7, #31]
 8010264:	e0c0      	b.n	80103e8 <UART_SetConfig+0x348>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a44      	ldr	r2, [pc, #272]	@ (801037c <UART_SetConfig+0x2dc>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d125      	bne.n	80102bc <UART_SetConfig+0x21c>
 8010270:	4b3e      	ldr	r3, [pc, #248]	@ (801036c <UART_SetConfig+0x2cc>)
 8010272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801027a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801027e:	d017      	beq.n	80102b0 <UART_SetConfig+0x210>
 8010280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010284:	d817      	bhi.n	80102b6 <UART_SetConfig+0x216>
 8010286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801028a:	d00b      	beq.n	80102a4 <UART_SetConfig+0x204>
 801028c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010290:	d811      	bhi.n	80102b6 <UART_SetConfig+0x216>
 8010292:	2b00      	cmp	r3, #0
 8010294:	d003      	beq.n	801029e <UART_SetConfig+0x1fe>
 8010296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801029a:	d006      	beq.n	80102aa <UART_SetConfig+0x20a>
 801029c:	e00b      	b.n	80102b6 <UART_SetConfig+0x216>
 801029e:	2300      	movs	r3, #0
 80102a0:	77fb      	strb	r3, [r7, #31]
 80102a2:	e0a1      	b.n	80103e8 <UART_SetConfig+0x348>
 80102a4:	2302      	movs	r3, #2
 80102a6:	77fb      	strb	r3, [r7, #31]
 80102a8:	e09e      	b.n	80103e8 <UART_SetConfig+0x348>
 80102aa:	2304      	movs	r3, #4
 80102ac:	77fb      	strb	r3, [r7, #31]
 80102ae:	e09b      	b.n	80103e8 <UART_SetConfig+0x348>
 80102b0:	2308      	movs	r3, #8
 80102b2:	77fb      	strb	r3, [r7, #31]
 80102b4:	e098      	b.n	80103e8 <UART_SetConfig+0x348>
 80102b6:	2310      	movs	r3, #16
 80102b8:	77fb      	strb	r3, [r7, #31]
 80102ba:	e095      	b.n	80103e8 <UART_SetConfig+0x348>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4a2f      	ldr	r2, [pc, #188]	@ (8010380 <UART_SetConfig+0x2e0>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d125      	bne.n	8010312 <UART_SetConfig+0x272>
 80102c6:	4b29      	ldr	r3, [pc, #164]	@ (801036c <UART_SetConfig+0x2cc>)
 80102c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80102d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102d4:	d017      	beq.n	8010306 <UART_SetConfig+0x266>
 80102d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102da:	d817      	bhi.n	801030c <UART_SetConfig+0x26c>
 80102dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102e0:	d00b      	beq.n	80102fa <UART_SetConfig+0x25a>
 80102e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102e6:	d811      	bhi.n	801030c <UART_SetConfig+0x26c>
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d003      	beq.n	80102f4 <UART_SetConfig+0x254>
 80102ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102f0:	d006      	beq.n	8010300 <UART_SetConfig+0x260>
 80102f2:	e00b      	b.n	801030c <UART_SetConfig+0x26c>
 80102f4:	2301      	movs	r3, #1
 80102f6:	77fb      	strb	r3, [r7, #31]
 80102f8:	e076      	b.n	80103e8 <UART_SetConfig+0x348>
 80102fa:	2302      	movs	r3, #2
 80102fc:	77fb      	strb	r3, [r7, #31]
 80102fe:	e073      	b.n	80103e8 <UART_SetConfig+0x348>
 8010300:	2304      	movs	r3, #4
 8010302:	77fb      	strb	r3, [r7, #31]
 8010304:	e070      	b.n	80103e8 <UART_SetConfig+0x348>
 8010306:	2308      	movs	r3, #8
 8010308:	77fb      	strb	r3, [r7, #31]
 801030a:	e06d      	b.n	80103e8 <UART_SetConfig+0x348>
 801030c:	2310      	movs	r3, #16
 801030e:	77fb      	strb	r3, [r7, #31]
 8010310:	e06a      	b.n	80103e8 <UART_SetConfig+0x348>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a1b      	ldr	r2, [pc, #108]	@ (8010384 <UART_SetConfig+0x2e4>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d138      	bne.n	801038e <UART_SetConfig+0x2ee>
 801031c:	4b13      	ldr	r3, [pc, #76]	@ (801036c <UART_SetConfig+0x2cc>)
 801031e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010322:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8010326:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801032a:	d017      	beq.n	801035c <UART_SetConfig+0x2bc>
 801032c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010330:	d82a      	bhi.n	8010388 <UART_SetConfig+0x2e8>
 8010332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010336:	d00b      	beq.n	8010350 <UART_SetConfig+0x2b0>
 8010338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801033c:	d824      	bhi.n	8010388 <UART_SetConfig+0x2e8>
 801033e:	2b00      	cmp	r3, #0
 8010340:	d003      	beq.n	801034a <UART_SetConfig+0x2aa>
 8010342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010346:	d006      	beq.n	8010356 <UART_SetConfig+0x2b6>
 8010348:	e01e      	b.n	8010388 <UART_SetConfig+0x2e8>
 801034a:	2300      	movs	r3, #0
 801034c:	77fb      	strb	r3, [r7, #31]
 801034e:	e04b      	b.n	80103e8 <UART_SetConfig+0x348>
 8010350:	2302      	movs	r3, #2
 8010352:	77fb      	strb	r3, [r7, #31]
 8010354:	e048      	b.n	80103e8 <UART_SetConfig+0x348>
 8010356:	2304      	movs	r3, #4
 8010358:	77fb      	strb	r3, [r7, #31]
 801035a:	e045      	b.n	80103e8 <UART_SetConfig+0x348>
 801035c:	2308      	movs	r3, #8
 801035e:	77fb      	strb	r3, [r7, #31]
 8010360:	e042      	b.n	80103e8 <UART_SetConfig+0x348>
 8010362:	bf00      	nop
 8010364:	efff69f3 	.word	0xefff69f3
 8010368:	40011000 	.word	0x40011000
 801036c:	40023800 	.word	0x40023800
 8010370:	40004400 	.word	0x40004400
 8010374:	40004800 	.word	0x40004800
 8010378:	40004c00 	.word	0x40004c00
 801037c:	40005000 	.word	0x40005000
 8010380:	40011400 	.word	0x40011400
 8010384:	40007800 	.word	0x40007800
 8010388:	2310      	movs	r3, #16
 801038a:	77fb      	strb	r3, [r7, #31]
 801038c:	e02c      	b.n	80103e8 <UART_SetConfig+0x348>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4a72      	ldr	r2, [pc, #456]	@ (801055c <UART_SetConfig+0x4bc>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d125      	bne.n	80103e4 <UART_SetConfig+0x344>
 8010398:	4b71      	ldr	r3, [pc, #452]	@ (8010560 <UART_SetConfig+0x4c0>)
 801039a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801039e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80103a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80103a6:	d017      	beq.n	80103d8 <UART_SetConfig+0x338>
 80103a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80103ac:	d817      	bhi.n	80103de <UART_SetConfig+0x33e>
 80103ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103b2:	d00b      	beq.n	80103cc <UART_SetConfig+0x32c>
 80103b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103b8:	d811      	bhi.n	80103de <UART_SetConfig+0x33e>
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <UART_SetConfig+0x326>
 80103be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80103c2:	d006      	beq.n	80103d2 <UART_SetConfig+0x332>
 80103c4:	e00b      	b.n	80103de <UART_SetConfig+0x33e>
 80103c6:	2300      	movs	r3, #0
 80103c8:	77fb      	strb	r3, [r7, #31]
 80103ca:	e00d      	b.n	80103e8 <UART_SetConfig+0x348>
 80103cc:	2302      	movs	r3, #2
 80103ce:	77fb      	strb	r3, [r7, #31]
 80103d0:	e00a      	b.n	80103e8 <UART_SetConfig+0x348>
 80103d2:	2304      	movs	r3, #4
 80103d4:	77fb      	strb	r3, [r7, #31]
 80103d6:	e007      	b.n	80103e8 <UART_SetConfig+0x348>
 80103d8:	2308      	movs	r3, #8
 80103da:	77fb      	strb	r3, [r7, #31]
 80103dc:	e004      	b.n	80103e8 <UART_SetConfig+0x348>
 80103de:	2310      	movs	r3, #16
 80103e0:	77fb      	strb	r3, [r7, #31]
 80103e2:	e001      	b.n	80103e8 <UART_SetConfig+0x348>
 80103e4:	2310      	movs	r3, #16
 80103e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	69db      	ldr	r3, [r3, #28]
 80103ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103f0:	d15b      	bne.n	80104aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80103f2:	7ffb      	ldrb	r3, [r7, #31]
 80103f4:	2b08      	cmp	r3, #8
 80103f6:	d828      	bhi.n	801044a <UART_SetConfig+0x3aa>
 80103f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010400 <UART_SetConfig+0x360>)
 80103fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fe:	bf00      	nop
 8010400:	08010425 	.word	0x08010425
 8010404:	0801042d 	.word	0x0801042d
 8010408:	08010435 	.word	0x08010435
 801040c:	0801044b 	.word	0x0801044b
 8010410:	0801043b 	.word	0x0801043b
 8010414:	0801044b 	.word	0x0801044b
 8010418:	0801044b 	.word	0x0801044b
 801041c:	0801044b 	.word	0x0801044b
 8010420:	08010443 	.word	0x08010443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010424:	f7fb fce0 	bl	800bde8 <HAL_RCC_GetPCLK1Freq>
 8010428:	61b8      	str	r0, [r7, #24]
        break;
 801042a:	e013      	b.n	8010454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801042c:	f7fb fcf0 	bl	800be10 <HAL_RCC_GetPCLK2Freq>
 8010430:	61b8      	str	r0, [r7, #24]
        break;
 8010432:	e00f      	b.n	8010454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010434:	4b4b      	ldr	r3, [pc, #300]	@ (8010564 <UART_SetConfig+0x4c4>)
 8010436:	61bb      	str	r3, [r7, #24]
        break;
 8010438:	e00c      	b.n	8010454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801043a:	f7fb fc03 	bl	800bc44 <HAL_RCC_GetSysClockFreq>
 801043e:	61b8      	str	r0, [r7, #24]
        break;
 8010440:	e008      	b.n	8010454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010446:	61bb      	str	r3, [r7, #24]
        break;
 8010448:	e004      	b.n	8010454 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801044a:	2300      	movs	r3, #0
 801044c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801044e:	2301      	movs	r3, #1
 8010450:	77bb      	strb	r3, [r7, #30]
        break;
 8010452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d074      	beq.n	8010544 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	005a      	lsls	r2, r3, #1
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	085b      	lsrs	r3, r3, #1
 8010464:	441a      	add	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	fbb2 f3f3 	udiv	r3, r2, r3
 801046e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	2b0f      	cmp	r3, #15
 8010474:	d916      	bls.n	80104a4 <UART_SetConfig+0x404>
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801047c:	d212      	bcs.n	80104a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	b29b      	uxth	r3, r3
 8010482:	f023 030f 	bic.w	r3, r3, #15
 8010486:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	085b      	lsrs	r3, r3, #1
 801048c:	b29b      	uxth	r3, r3
 801048e:	f003 0307 	and.w	r3, r3, #7
 8010492:	b29a      	uxth	r2, r3
 8010494:	89fb      	ldrh	r3, [r7, #14]
 8010496:	4313      	orrs	r3, r2
 8010498:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	89fa      	ldrh	r2, [r7, #14]
 80104a0:	60da      	str	r2, [r3, #12]
 80104a2:	e04f      	b.n	8010544 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	77bb      	strb	r3, [r7, #30]
 80104a8:	e04c      	b.n	8010544 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80104aa:	7ffb      	ldrb	r3, [r7, #31]
 80104ac:	2b08      	cmp	r3, #8
 80104ae:	d828      	bhi.n	8010502 <UART_SetConfig+0x462>
 80104b0:	a201      	add	r2, pc, #4	@ (adr r2, 80104b8 <UART_SetConfig+0x418>)
 80104b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b6:	bf00      	nop
 80104b8:	080104dd 	.word	0x080104dd
 80104bc:	080104e5 	.word	0x080104e5
 80104c0:	080104ed 	.word	0x080104ed
 80104c4:	08010503 	.word	0x08010503
 80104c8:	080104f3 	.word	0x080104f3
 80104cc:	08010503 	.word	0x08010503
 80104d0:	08010503 	.word	0x08010503
 80104d4:	08010503 	.word	0x08010503
 80104d8:	080104fb 	.word	0x080104fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104dc:	f7fb fc84 	bl	800bde8 <HAL_RCC_GetPCLK1Freq>
 80104e0:	61b8      	str	r0, [r7, #24]
        break;
 80104e2:	e013      	b.n	801050c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104e4:	f7fb fc94 	bl	800be10 <HAL_RCC_GetPCLK2Freq>
 80104e8:	61b8      	str	r0, [r7, #24]
        break;
 80104ea:	e00f      	b.n	801050c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80104ec:	4b1d      	ldr	r3, [pc, #116]	@ (8010564 <UART_SetConfig+0x4c4>)
 80104ee:	61bb      	str	r3, [r7, #24]
        break;
 80104f0:	e00c      	b.n	801050c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104f2:	f7fb fba7 	bl	800bc44 <HAL_RCC_GetSysClockFreq>
 80104f6:	61b8      	str	r0, [r7, #24]
        break;
 80104f8:	e008      	b.n	801050c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104fe:	61bb      	str	r3, [r7, #24]
        break;
 8010500:	e004      	b.n	801050c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010502:	2300      	movs	r3, #0
 8010504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010506:	2301      	movs	r3, #1
 8010508:	77bb      	strb	r3, [r7, #30]
        break;
 801050a:	bf00      	nop
    }

    if (pclk != 0U)
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d018      	beq.n	8010544 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	085a      	lsrs	r2, r3, #1
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	441a      	add	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	fbb2 f3f3 	udiv	r3, r2, r3
 8010524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	2b0f      	cmp	r3, #15
 801052a:	d909      	bls.n	8010540 <UART_SetConfig+0x4a0>
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010532:	d205      	bcs.n	8010540 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	b29a      	uxth	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	60da      	str	r2, [r3, #12]
 801053e:	e001      	b.n	8010544 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010540:	2301      	movs	r3, #1
 8010542:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010550:	7fbb      	ldrb	r3, [r7, #30]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3720      	adds	r7, #32
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	40007c00 	.word	0x40007c00
 8010560:	40023800 	.word	0x40023800
 8010564:	00f42400 	.word	0x00f42400

08010568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010574:	f003 0308 	and.w	r3, r3, #8
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00a      	beq.n	8010592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	430a      	orrs	r2, r1
 8010590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00a      	beq.n	80105b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	430a      	orrs	r2, r1
 80105b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b8:	f003 0302 	and.w	r3, r3, #2
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00a      	beq.n	80105d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	430a      	orrs	r2, r1
 80105d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105da:	f003 0304 	and.w	r3, r3, #4
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00a      	beq.n	80105f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	430a      	orrs	r2, r1
 80105f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105fc:	f003 0310 	and.w	r3, r3, #16
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00a      	beq.n	801061a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	430a      	orrs	r2, r1
 8010618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801061e:	f003 0320 	and.w	r3, r3, #32
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00a      	beq.n	801063c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	430a      	orrs	r2, r1
 801063a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010644:	2b00      	cmp	r3, #0
 8010646:	d01a      	beq.n	801067e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	430a      	orrs	r2, r1
 801065c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010666:	d10a      	bne.n	801067e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	430a      	orrs	r2, r1
 801067c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00a      	beq.n	80106a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	430a      	orrs	r2, r1
 801069e:	605a      	str	r2, [r3, #4]
  }
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08c      	sub	sp, #48	@ 0x30
 80106b0:	af02      	add	r7, sp, #8
 80106b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106bc:	f7f3 fe90 	bl	80043e0 <HAL_GetTick>
 80106c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f003 0308 	and.w	r3, r3, #8
 80106cc:	2b08      	cmp	r3, #8
 80106ce:	d12e      	bne.n	801072e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d8:	2200      	movs	r2, #0
 80106da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 f83b 	bl	801075a <UART_WaitOnFlagUntilTimeout>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d021      	beq.n	801072e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	e853 3f00 	ldrex	r3, [r3]
 80106f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106fe:	623b      	str	r3, [r7, #32]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	461a      	mov	r2, r3
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	61fb      	str	r3, [r7, #28]
 801070a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070c:	69b9      	ldr	r1, [r7, #24]
 801070e:	69fa      	ldr	r2, [r7, #28]
 8010710:	e841 2300 	strex	r3, r2, [r1]
 8010714:	617b      	str	r3, [r7, #20]
   return(result);
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1e6      	bne.n	80106ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2220      	movs	r2, #32
 8010720:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	e011      	b.n	8010752 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2220      	movs	r2, #32
 8010732:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2220      	movs	r2, #32
 8010738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3728      	adds	r7, #40	@ 0x28
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b084      	sub	sp, #16
 801075e:	af00      	add	r7, sp, #0
 8010760:	60f8      	str	r0, [r7, #12]
 8010762:	60b9      	str	r1, [r7, #8]
 8010764:	603b      	str	r3, [r7, #0]
 8010766:	4613      	mov	r3, r2
 8010768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801076a:	e04f      	b.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010772:	d04b      	beq.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010774:	f7f3 fe34 	bl	80043e0 <HAL_GetTick>
 8010778:	4602      	mov	r2, r0
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	429a      	cmp	r2, r3
 8010782:	d302      	bcc.n	801078a <UART_WaitOnFlagUntilTimeout+0x30>
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d101      	bne.n	801078e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801078a:	2303      	movs	r3, #3
 801078c:	e04e      	b.n	801082c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b00      	cmp	r3, #0
 801079a:	d037      	beq.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b80      	cmp	r3, #128	@ 0x80
 80107a0:	d034      	beq.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b40      	cmp	r3, #64	@ 0x40
 80107a6:	d031      	beq.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	69db      	ldr	r3, [r3, #28]
 80107ae:	f003 0308 	and.w	r3, r3, #8
 80107b2:	2b08      	cmp	r3, #8
 80107b4:	d110      	bne.n	80107d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2208      	movs	r2, #8
 80107bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107be:	68f8      	ldr	r0, [r7, #12]
 80107c0:	f000 f838 	bl	8010834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2208      	movs	r2, #8
 80107c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80107d4:	2301      	movs	r3, #1
 80107d6:	e029      	b.n	801082c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	69db      	ldr	r3, [r3, #28]
 80107de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107e6:	d111      	bne.n	801080c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80107f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f000 f81e 	bl	8010834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2220      	movs	r2, #32
 80107fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8010808:	2303      	movs	r3, #3
 801080a:	e00f      	b.n	801082c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	69da      	ldr	r2, [r3, #28]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	4013      	ands	r3, r2
 8010816:	68ba      	ldr	r2, [r7, #8]
 8010818:	429a      	cmp	r2, r3
 801081a:	bf0c      	ite	eq
 801081c:	2301      	moveq	r3, #1
 801081e:	2300      	movne	r3, #0
 8010820:	b2db      	uxtb	r3, r3
 8010822:	461a      	mov	r2, r3
 8010824:	79fb      	ldrb	r3, [r7, #7]
 8010826:	429a      	cmp	r2, r3
 8010828:	d0a0      	beq.n	801076c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010834:	b480      	push	{r7}
 8010836:	b095      	sub	sp, #84	@ 0x54
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010844:	e853 3f00 	ldrex	r3, [r3]
 8010848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801084a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801084c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	461a      	mov	r2, r3
 8010858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801085a:	643b      	str	r3, [r7, #64]	@ 0x40
 801085c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010862:	e841 2300 	strex	r3, r2, [r1]
 8010866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1e6      	bne.n	801083c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	3308      	adds	r3, #8
 8010874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	e853 3f00 	ldrex	r3, [r3]
 801087c:	61fb      	str	r3, [r7, #28]
   return(result);
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	f023 0301 	bic.w	r3, r3, #1
 8010884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	3308      	adds	r3, #8
 801088c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801088e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010896:	e841 2300 	strex	r3, r2, [r1]
 801089a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801089c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1e5      	bne.n	801086e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d118      	bne.n	80108dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	e853 3f00 	ldrex	r3, [r3]
 80108b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	f023 0310 	bic.w	r3, r3, #16
 80108be:	647b      	str	r3, [r7, #68]	@ 0x44
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	461a      	mov	r2, r3
 80108c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108c8:	61bb      	str	r3, [r7, #24]
 80108ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108cc:	6979      	ldr	r1, [r7, #20]
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	e841 2300 	strex	r3, r2, [r1]
 80108d4:	613b      	str	r3, [r7, #16]
   return(result);
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1e6      	bne.n	80108aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2220      	movs	r2, #32
 80108e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80108f0:	bf00      	nop
 80108f2:	3754      	adds	r7, #84	@ 0x54
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d121      	bne.n	8010952 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	4b27      	ldr	r3, [pc, #156]	@ (80109b0 <FMC_SDRAM_Init+0xb4>)
 8010914:	4013      	ands	r3, r2
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	6851      	ldr	r1, [r2, #4]
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	6892      	ldr	r2, [r2, #8]
 801091e:	4311      	orrs	r1, r2
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	68d2      	ldr	r2, [r2, #12]
 8010924:	4311      	orrs	r1, r2
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	6912      	ldr	r2, [r2, #16]
 801092a:	4311      	orrs	r1, r2
 801092c:	683a      	ldr	r2, [r7, #0]
 801092e:	6952      	ldr	r2, [r2, #20]
 8010930:	4311      	orrs	r1, r2
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	6992      	ldr	r2, [r2, #24]
 8010936:	4311      	orrs	r1, r2
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	69d2      	ldr	r2, [r2, #28]
 801093c:	4311      	orrs	r1, r2
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	6a12      	ldr	r2, [r2, #32]
 8010942:	4311      	orrs	r1, r2
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010948:	430a      	orrs	r2, r1
 801094a:	431a      	orrs	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	e026      	b.n	80109a0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	69d9      	ldr	r1, [r3, #28]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	6a1b      	ldr	r3, [r3, #32]
 8010962:	4319      	orrs	r1, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010968:	430b      	orrs	r3, r1
 801096a:	431a      	orrs	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	4b0e      	ldr	r3, [pc, #56]	@ (80109b0 <FMC_SDRAM_Init+0xb4>)
 8010976:	4013      	ands	r3, r2
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	6851      	ldr	r1, [r2, #4]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	6892      	ldr	r2, [r2, #8]
 8010980:	4311      	orrs	r1, r2
 8010982:	683a      	ldr	r2, [r7, #0]
 8010984:	68d2      	ldr	r2, [r2, #12]
 8010986:	4311      	orrs	r1, r2
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	6912      	ldr	r2, [r2, #16]
 801098c:	4311      	orrs	r1, r2
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	6952      	ldr	r2, [r2, #20]
 8010992:	4311      	orrs	r1, r2
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	6992      	ldr	r2, [r2, #24]
 8010998:	430a      	orrs	r2, r1
 801099a:	431a      	orrs	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	ffff8000 	.word	0xffff8000

080109b4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d128      	bne.n	8010a18 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	1e59      	subs	r1, r3, #1
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	3b01      	subs	r3, #1
 80109da:	011b      	lsls	r3, r3, #4
 80109dc:	4319      	orrs	r1, r3
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	689b      	ldr	r3, [r3, #8]
 80109e2:	3b01      	subs	r3, #1
 80109e4:	021b      	lsls	r3, r3, #8
 80109e6:	4319      	orrs	r1, r3
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	031b      	lsls	r3, r3, #12
 80109f0:	4319      	orrs	r1, r3
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	041b      	lsls	r3, r3, #16
 80109fa:	4319      	orrs	r1, r3
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	695b      	ldr	r3, [r3, #20]
 8010a00:	3b01      	subs	r3, #1
 8010a02:	051b      	lsls	r3, r3, #20
 8010a04:	4319      	orrs	r1, r3
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	699b      	ldr	r3, [r3, #24]
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	061b      	lsls	r3, r3, #24
 8010a0e:	430b      	orrs	r3, r1
 8010a10:	431a      	orrs	r2, r3
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	609a      	str	r2, [r3, #8]
 8010a16:	e02d      	b.n	8010a74 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	689a      	ldr	r2, [r3, #8]
 8010a1c:	4b19      	ldr	r3, [pc, #100]	@ (8010a84 <FMC_SDRAM_Timing_Init+0xd0>)
 8010a1e:	4013      	ands	r3, r2
 8010a20:	68ba      	ldr	r2, [r7, #8]
 8010a22:	68d2      	ldr	r2, [r2, #12]
 8010a24:	3a01      	subs	r2, #1
 8010a26:	0311      	lsls	r1, r2, #12
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	6952      	ldr	r2, [r2, #20]
 8010a2c:	3a01      	subs	r2, #1
 8010a2e:	0512      	lsls	r2, r2, #20
 8010a30:	430a      	orrs	r2, r1
 8010a32:	431a      	orrs	r2, r3
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	1e59      	subs	r1, r3, #1
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	4319      	orrs	r1, r3
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	021b      	lsls	r3, r3, #8
 8010a58:	4319      	orrs	r1, r3
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	041b      	lsls	r3, r3, #16
 8010a62:	4319      	orrs	r1, r3
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	061b      	lsls	r3, r3, #24
 8010a6c:	430b      	orrs	r3, r1
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	ff0f0fff 	.word	0xff0f0fff

08010a88 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010a88:	b084      	sub	sp, #16
 8010a8a:	b480      	push	{r7}
 8010a8c:	b085      	sub	sp, #20
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	f107 001c 	add.w	r0, r7, #28
 8010a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010a9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010aa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010aa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010aa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010aaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010aae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010ab2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	685a      	ldr	r2, [r3, #4]
 8010abe:	4b07      	ldr	r3, [pc, #28]	@ (8010adc <SDMMC_Init+0x54>)
 8010ac0:	4013      	ands	r3, r2
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	431a      	orrs	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010aca:	2300      	movs	r3, #0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	b004      	add	sp, #16
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	ffff8100 	.word	0xffff8100

08010ae0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	370c      	adds	r7, #12
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010b0e:	2300      	movs	r3, #0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	370c      	adds	r7, #12
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr

08010b1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2203      	movs	r2, #3
 8010b28:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010b2a:	2300      	movs	r3, #0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f003 0303 	and.w	r3, r3, #3
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b72:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010b78:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010b7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	4313      	orrs	r3, r2
 8010b84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	68da      	ldr	r2, [r3, #12]
 8010b8a:	4b06      	ldr	r3, [pc, #24]	@ (8010ba4 <SDMMC_SendCommand+0x50>)
 8010b8c:	4013      	ands	r3, r2
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	431a      	orrs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	fffff000 	.word	0xfffff000

08010ba8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	b2db      	uxtb	r3, r3
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b085      	sub	sp, #20
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	3314      	adds	r3, #20
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
}  
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c0e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010c14:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010c1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c26:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	431a      	orrs	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010c32:	2300      	movs	r3, #0

}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b088      	sub	sp, #32
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010c4e:	2310      	movs	r3, #16
 8010c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c52:	2340      	movs	r3, #64	@ 0x40
 8010c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c56:	2300      	movs	r3, #0
 8010c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c60:	f107 0308 	add.w	r3, r7, #8
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7ff ff74 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c70:	2110      	movs	r1, #16
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 fa1a 	bl	80110ac <SDMMC_GetCmdResp1>
 8010c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7a:	69fb      	ldr	r3, [r7, #28]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3720      	adds	r7, #32
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b088      	sub	sp, #32
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010c92:	2311      	movs	r3, #17
 8010c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c96:	2340      	movs	r3, #64	@ 0x40
 8010c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ca4:	f107 0308 	add.w	r3, r7, #8
 8010ca8:	4619      	mov	r1, r3
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7ff ff52 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cb4:	2111      	movs	r1, #17
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f9f8 	bl	80110ac <SDMMC_GetCmdResp1>
 8010cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cbe:	69fb      	ldr	r3, [r7, #28]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3720      	adds	r7, #32
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b088      	sub	sp, #32
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010cd6:	2312      	movs	r3, #18
 8010cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cda:	2340      	movs	r3, #64	@ 0x40
 8010cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ce8:	f107 0308 	add.w	r3, r7, #8
 8010cec:	4619      	mov	r1, r3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f7ff ff30 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cf8:	2112      	movs	r1, #18
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 f9d6 	bl	80110ac <SDMMC_GetCmdResp1>
 8010d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d02:	69fb      	ldr	r3, [r7, #28]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3720      	adds	r7, #32
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b088      	sub	sp, #32
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010d1a:	2318      	movs	r3, #24
 8010d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d1e:	2340      	movs	r3, #64	@ 0x40
 8010d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d22:	2300      	movs	r3, #0
 8010d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d2c:	f107 0308 	add.w	r3, r7, #8
 8010d30:	4619      	mov	r1, r3
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff ff0e 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d3c:	2118      	movs	r1, #24
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	f000 f9b4 	bl	80110ac <SDMMC_GetCmdResp1>
 8010d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d46:	69fb      	ldr	r3, [r7, #28]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3720      	adds	r7, #32
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010d5e:	2319      	movs	r3, #25
 8010d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d62:	2340      	movs	r3, #64	@ 0x40
 8010d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d66:	2300      	movs	r3, #0
 8010d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d70:	f107 0308 	add.w	r3, r7, #8
 8010d74:	4619      	mov	r1, r3
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f7ff feec 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d80:	2119      	movs	r1, #25
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 f992 	bl	80110ac <SDMMC_GetCmdResp1>
 8010d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d8a:	69fb      	ldr	r3, [r7, #28]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3720      	adds	r7, #32
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b088      	sub	sp, #32
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010da0:	230c      	movs	r3, #12
 8010da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010da4:	2340      	movs	r3, #64	@ 0x40
 8010da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010da8:	2300      	movs	r3, #0
 8010daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010db0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010db2:	f107 0308 	add.w	r3, r7, #8
 8010db6:	4619      	mov	r1, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff fecb 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010dbe:	4a05      	ldr	r2, [pc, #20]	@ (8010dd4 <SDMMC_CmdStopTransfer+0x40>)
 8010dc0:	210c      	movs	r1, #12
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f972 	bl	80110ac <SDMMC_GetCmdResp1>
 8010dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dca:	69fb      	ldr	r3, [r7, #28]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3720      	adds	r7, #32
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	05f5e100 	.word	0x05f5e100

08010dd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08a      	sub	sp, #40	@ 0x28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010de8:	2307      	movs	r3, #7
 8010dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dec:	2340      	movs	r3, #64	@ 0x40
 8010dee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010df0:	2300      	movs	r3, #0
 8010df2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010df8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dfa:	f107 0310 	add.w	r3, r7, #16
 8010dfe:	4619      	mov	r1, r3
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f7ff fea7 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e0a:	2107      	movs	r1, #7
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f000 f94d 	bl	80110ac <SDMMC_GetCmdResp1>
 8010e12:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3728      	adds	r7, #40	@ 0x28
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b088      	sub	sp, #32
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010e26:	2300      	movs	r3, #0
 8010e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e32:	2300      	movs	r3, #0
 8010e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e3c:	f107 0308 	add.w	r3, r7, #8
 8010e40:	4619      	mov	r1, r3
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff fe86 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fb67 	bl	801151c <SDMMC_GetCmdError>
 8010e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e50:	69fb      	ldr	r3, [r7, #28]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3720      	adds	r7, #32
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b088      	sub	sp, #32
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010e62:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010e68:	2308      	movs	r3, #8
 8010e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e6c:	2340      	movs	r3, #64	@ 0x40
 8010e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e70:	2300      	movs	r3, #0
 8010e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e7a:	f107 0308 	add.w	r3, r7, #8
 8010e7e:	4619      	mov	r1, r3
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff fe67 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fafa 	bl	8011480 <SDMMC_GetCmdResp7>
 8010e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3720      	adds	r7, #32
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b088      	sub	sp, #32
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ea6:	2337      	movs	r3, #55	@ 0x37
 8010ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eaa:	2340      	movs	r3, #64	@ 0x40
 8010eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eb8:	f107 0308 	add.w	r3, r7, #8
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff fe48 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ec8:	2137      	movs	r1, #55	@ 0x37
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f8ee 	bl	80110ac <SDMMC_GetCmdResp1>
 8010ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ed2:	69fb      	ldr	r3, [r7, #28]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3720      	adds	r7, #32
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8010f20 <SDMMC_CmdAppOperCommand+0x44>)
 8010eea:	4313      	orrs	r3, r2
 8010eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010eee:	2329      	movs	r3, #41	@ 0x29
 8010ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ef2:	2340      	movs	r3, #64	@ 0x40
 8010ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f00:	f107 0308 	add.w	r3, r7, #8
 8010f04:	4619      	mov	r1, r3
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f7ff fe24 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f000 fa03 	bl	8011318 <SDMMC_GetCmdResp3>
 8010f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f14:	69fb      	ldr	r3, [r7, #28]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	80100000 	.word	0x80100000

08010f24 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b088      	sub	sp, #32
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010f32:	2306      	movs	r3, #6
 8010f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f36:	2340      	movs	r3, #64	@ 0x40
 8010f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f44:	f107 0308 	add.w	r3, r7, #8
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff fe02 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f54:	2106      	movs	r1, #6
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 f8a8 	bl	80110ac <SDMMC_GetCmdResp1>
 8010f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f5e:	69fb      	ldr	r3, [r7, #28]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3720      	adds	r7, #32
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b088      	sub	sp, #32
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f70:	2300      	movs	r3, #0
 8010f72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f74:	2333      	movs	r3, #51	@ 0x33
 8010f76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f78:	2340      	movs	r3, #64	@ 0x40
 8010f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f86:	f107 0308 	add.w	r3, r7, #8
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff fde1 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f96:	2133      	movs	r1, #51	@ 0x33
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f887 	bl	80110ac <SDMMC_GetCmdResp1>
 8010f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3720      	adds	r7, #32
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b088      	sub	sp, #32
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010fb6:	2302      	movs	r3, #2
 8010fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010fba:	23c0      	movs	r3, #192	@ 0xc0
 8010fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fc8:	f107 0308 	add.w	r3, r7, #8
 8010fcc:	4619      	mov	r1, r3
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7ff fdc0 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f000 f957 	bl	8011288 <SDMMC_GetCmdResp2>
 8010fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3720      	adds	r7, #32
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b088      	sub	sp, #32
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010ff4:	2309      	movs	r3, #9
 8010ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010ff8:	23c0      	movs	r3, #192	@ 0xc0
 8010ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011006:	f107 0308 	add.w	r3, r7, #8
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f7ff fda1 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f938 	bl	8011288 <SDMMC_GetCmdResp2>
 8011018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801101a:	69fb      	ldr	r3, [r7, #28]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3720      	adds	r7, #32
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801102e:	2300      	movs	r3, #0
 8011030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011032:	2303      	movs	r3, #3
 8011034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011036:	2340      	movs	r3, #64	@ 0x40
 8011038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801103a:	2300      	movs	r3, #0
 801103c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011044:	f107 0308 	add.w	r3, r7, #8
 8011048:	4619      	mov	r1, r3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7ff fd82 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	2103      	movs	r1, #3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f99d 	bl	8011394 <SDMMC_GetCmdResp6>
 801105a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801105c:	69fb      	ldr	r3, [r7, #28]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3720      	adds	r7, #32
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b088      	sub	sp, #32
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011074:	230d      	movs	r3, #13
 8011076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011078:	2340      	movs	r3, #64	@ 0x40
 801107a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801107c:	2300      	movs	r3, #0
 801107e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011086:	f107 0308 	add.w	r3, r7, #8
 801108a:	4619      	mov	r1, r3
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7ff fd61 	bl	8010b54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011096:	210d      	movs	r1, #13
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 f807 	bl	80110ac <SDMMC_GetCmdResp1>
 801109e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a0:	69fb      	ldr	r3, [r7, #28]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3720      	adds	r7, #32
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
	...

080110ac <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b088      	sub	sp, #32
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	460b      	mov	r3, r1
 80110b6:	607a      	str	r2, [r7, #4]
 80110b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80110ba:	4b70      	ldr	r3, [pc, #448]	@ (801127c <SDMMC_GetCmdResp1+0x1d0>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4a70      	ldr	r2, [pc, #448]	@ (8011280 <SDMMC_GetCmdResp1+0x1d4>)
 80110c0:	fba2 2303 	umull	r2, r3, r2, r3
 80110c4:	0a5a      	lsrs	r2, r3, #9
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	fb02 f303 	mul.w	r3, r2, r3
 80110cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	1e5a      	subs	r2, r3, #1
 80110d2:	61fa      	str	r2, [r7, #28]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d102      	bne.n	80110de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110dc:	e0c9      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d0ef      	beq.n	80110ce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1ea      	bne.n	80110ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110fc:	f003 0304 	and.w	r3, r3, #4
 8011100:	2b00      	cmp	r3, #0
 8011102:	d004      	beq.n	801110e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2204      	movs	r2, #4
 8011108:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801110a:	2304      	movs	r3, #4
 801110c:	e0b1      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011112:	f003 0301 	and.w	r3, r3, #1
 8011116:	2b00      	cmp	r3, #0
 8011118:	d004      	beq.n	8011124 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2201      	movs	r2, #1
 801111e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011120:	2301      	movs	r3, #1
 8011122:	e0a6      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	22c5      	movs	r2, #197	@ 0xc5
 8011128:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f7ff fd3c 	bl	8010ba8 <SDMMC_GetCommandResponse>
 8011130:	4603      	mov	r3, r0
 8011132:	461a      	mov	r2, r3
 8011134:	7afb      	ldrb	r3, [r7, #11]
 8011136:	4293      	cmp	r3, r2
 8011138:	d001      	beq.n	801113e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801113a:	2301      	movs	r3, #1
 801113c:	e099      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801113e:	2100      	movs	r1, #0
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7ff fd3e 	bl	8010bc2 <SDMMC_GetResponse>
 8011146:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011148:	697a      	ldr	r2, [r7, #20]
 801114a:	4b4e      	ldr	r3, [pc, #312]	@ (8011284 <SDMMC_GetCmdResp1+0x1d8>)
 801114c:	4013      	ands	r3, r2
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011152:	2300      	movs	r3, #0
 8011154:	e08d      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	2b00      	cmp	r3, #0
 801115a:	da02      	bge.n	8011162 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801115c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011160:	e087      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801116c:	2340      	movs	r3, #64	@ 0x40
 801116e:	e080      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801117a:	2380      	movs	r3, #128	@ 0x80
 801117c:	e079      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801118c:	e071      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011194:	2b00      	cmp	r3, #0
 8011196:	d002      	beq.n	801119e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801119c:	e069      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d002      	beq.n	80111ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80111a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111ac:	e061      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80111b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80111bc:	e059      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d002      	beq.n	80111ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80111c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80111cc:	e051      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80111d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80111dc:	e049      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80111e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80111ec:	e041      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80111f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111fc:	e039      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011204:	2b00      	cmp	r3, #0
 8011206:	d002      	beq.n	801120e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801120c:	e031      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011214:	2b00      	cmp	r3, #0
 8011216:	d002      	beq.n	801121e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011218:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801121c:	e029      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011224:	2b00      	cmp	r3, #0
 8011226:	d002      	beq.n	801122e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011228:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801122c:	e021      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011238:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801123c:	e019      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011248:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801124c:	e011      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011254:	2b00      	cmp	r3, #0
 8011256:	d002      	beq.n	801125e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011258:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801125c:	e009      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f003 0308 	and.w	r3, r3, #8
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011268:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801126c:	e001      	b.n	8011272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801126e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011272:	4618      	mov	r0, r3
 8011274:	3720      	adds	r7, #32
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	20000000 	.word	0x20000000
 8011280:	10624dd3 	.word	0x10624dd3
 8011284:	fdffe008 	.word	0xfdffe008

08011288 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011290:	4b1f      	ldr	r3, [pc, #124]	@ (8011310 <SDMMC_GetCmdResp2+0x88>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4a1f      	ldr	r2, [pc, #124]	@ (8011314 <SDMMC_GetCmdResp2+0x8c>)
 8011296:	fba2 2303 	umull	r2, r3, r2, r3
 801129a:	0a5b      	lsrs	r3, r3, #9
 801129c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112a0:	fb02 f303 	mul.w	r3, r2, r3
 80112a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	1e5a      	subs	r2, r3, #1
 80112aa:	60fa      	str	r2, [r7, #12]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d102      	bne.n	80112b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80112b4:	e026      	b.n	8011304 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d0ef      	beq.n	80112a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d1ea      	bne.n	80112a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112d4:	f003 0304 	and.w	r3, r3, #4
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2204      	movs	r2, #4
 80112e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112e2:	2304      	movs	r3, #4
 80112e4:	e00e      	b.n	8011304 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d004      	beq.n	80112fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2201      	movs	r2, #1
 80112f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112f8:	2301      	movs	r3, #1
 80112fa:	e003      	b.n	8011304 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	22c5      	movs	r2, #197	@ 0xc5
 8011300:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3714      	adds	r7, #20
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr
 8011310:	20000000 	.word	0x20000000
 8011314:	10624dd3 	.word	0x10624dd3

08011318 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011320:	4b1a      	ldr	r3, [pc, #104]	@ (801138c <SDMMC_GetCmdResp3+0x74>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a1a      	ldr	r2, [pc, #104]	@ (8011390 <SDMMC_GetCmdResp3+0x78>)
 8011326:	fba2 2303 	umull	r2, r3, r2, r3
 801132a:	0a5b      	lsrs	r3, r3, #9
 801132c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011330:	fb02 f303 	mul.w	r3, r2, r3
 8011334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	1e5a      	subs	r2, r3, #1
 801133a:	60fa      	str	r2, [r7, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d102      	bne.n	8011346 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011344:	e01b      	b.n	801137e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801134a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011352:	2b00      	cmp	r3, #0
 8011354:	d0ef      	beq.n	8011336 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801135c:	2b00      	cmp	r3, #0
 801135e:	d1ea      	bne.n	8011336 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011364:	f003 0304 	and.w	r3, r3, #4
 8011368:	2b00      	cmp	r3, #0
 801136a:	d004      	beq.n	8011376 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2204      	movs	r2, #4
 8011370:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011372:	2304      	movs	r3, #4
 8011374:	e003      	b.n	801137e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	22c5      	movs	r2, #197	@ 0xc5
 801137a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3714      	adds	r7, #20
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	20000000 	.word	0x20000000
 8011390:	10624dd3 	.word	0x10624dd3

08011394 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b088      	sub	sp, #32
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	460b      	mov	r3, r1
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80113a2:	4b35      	ldr	r3, [pc, #212]	@ (8011478 <SDMMC_GetCmdResp6+0xe4>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a35      	ldr	r2, [pc, #212]	@ (801147c <SDMMC_GetCmdResp6+0xe8>)
 80113a8:	fba2 2303 	umull	r2, r3, r2, r3
 80113ac:	0a5b      	lsrs	r3, r3, #9
 80113ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113b2:	fb02 f303 	mul.w	r3, r2, r3
 80113b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	1e5a      	subs	r2, r3, #1
 80113bc:	61fa      	str	r2, [r7, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d102      	bne.n	80113c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80113c6:	e052      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d0ef      	beq.n	80113b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1ea      	bne.n	80113b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113e6:	f003 0304 	and.w	r3, r3, #4
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d004      	beq.n	80113f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2204      	movs	r2, #4
 80113f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113f4:	2304      	movs	r3, #4
 80113f6:	e03a      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113fc:	f003 0301 	and.w	r3, r3, #1
 8011400:	2b00      	cmp	r3, #0
 8011402:	d004      	beq.n	801140e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2201      	movs	r2, #1
 8011408:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801140a:	2301      	movs	r3, #1
 801140c:	e02f      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f7ff fbca 	bl	8010ba8 <SDMMC_GetCommandResponse>
 8011414:	4603      	mov	r3, r0
 8011416:	461a      	mov	r2, r3
 8011418:	7afb      	ldrb	r3, [r7, #11]
 801141a:	4293      	cmp	r3, r2
 801141c:	d001      	beq.n	8011422 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801141e:	2301      	movs	r3, #1
 8011420:	e025      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	22c5      	movs	r2, #197	@ 0xc5
 8011426:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011428:	2100      	movs	r1, #0
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7ff fbc9 	bl	8010bc2 <SDMMC_GetResponse>
 8011430:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011438:	2b00      	cmp	r3, #0
 801143a:	d106      	bne.n	801144a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	0c1b      	lsrs	r3, r3, #16
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011446:	2300      	movs	r3, #0
 8011448:	e011      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011450:	2b00      	cmp	r3, #0
 8011452:	d002      	beq.n	801145a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011458:	e009      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d002      	beq.n	801146a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011468:	e001      	b.n	801146e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801146a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801146e:	4618      	mov	r0, r3
 8011470:	3720      	adds	r7, #32
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	20000000 	.word	0x20000000
 801147c:	10624dd3 	.word	0x10624dd3

08011480 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011488:	4b22      	ldr	r3, [pc, #136]	@ (8011514 <SDMMC_GetCmdResp7+0x94>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a22      	ldr	r2, [pc, #136]	@ (8011518 <SDMMC_GetCmdResp7+0x98>)
 801148e:	fba2 2303 	umull	r2, r3, r2, r3
 8011492:	0a5b      	lsrs	r3, r3, #9
 8011494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011498:	fb02 f303 	mul.w	r3, r2, r3
 801149c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	1e5a      	subs	r2, r3, #1
 80114a2:	60fa      	str	r2, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80114ac:	e02c      	b.n	8011508 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d0ef      	beq.n	801149e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d1ea      	bne.n	801149e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114cc:	f003 0304 	and.w	r3, r3, #4
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d004      	beq.n	80114de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2204      	movs	r2, #4
 80114d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114da:	2304      	movs	r3, #4
 80114dc:	e014      	b.n	8011508 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114e2:	f003 0301 	and.w	r3, r3, #1
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d004      	beq.n	80114f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2201      	movs	r2, #1
 80114ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114f0:	2301      	movs	r3, #1
 80114f2:	e009      	b.n	8011508 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d002      	beq.n	8011506 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2240      	movs	r2, #64	@ 0x40
 8011504:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011506:	2300      	movs	r3, #0
  
}
 8011508:	4618      	mov	r0, r3
 801150a:	3714      	adds	r7, #20
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	20000000 	.word	0x20000000
 8011518:	10624dd3 	.word	0x10624dd3

0801151c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801151c:	b480      	push	{r7}
 801151e:	b085      	sub	sp, #20
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011524:	4b11      	ldr	r3, [pc, #68]	@ (801156c <SDMMC_GetCmdError+0x50>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4a11      	ldr	r2, [pc, #68]	@ (8011570 <SDMMC_GetCmdError+0x54>)
 801152a:	fba2 2303 	umull	r2, r3, r2, r3
 801152e:	0a5b      	lsrs	r3, r3, #9
 8011530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011534:	fb02 f303 	mul.w	r3, r2, r3
 8011538:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	1e5a      	subs	r2, r3, #1
 801153e:	60fa      	str	r2, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d102      	bne.n	801154a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011544:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011548:	e009      	b.n	801155e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801154e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0f1      	beq.n	801153a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	22c5      	movs	r2, #197	@ 0xc5
 801155a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 801155c:	2300      	movs	r3, #0
}
 801155e:	4618      	mov	r0, r3
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	20000000 	.word	0x20000000
 8011570:	10624dd3 	.word	0x10624dd3

08011574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011574:	b084      	sub	sp, #16
 8011576:	b580      	push	{r7, lr}
 8011578:	b084      	sub	sp, #16
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	f107 001c 	add.w	r0, r7, #28
 8011582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011586:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801158a:	2b01      	cmp	r3, #1
 801158c:	d121      	bne.n	80115d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011592:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	68da      	ldr	r2, [r3, #12]
 801159e:	4b21      	ldr	r3, [pc, #132]	@ (8011624 <USB_CoreInit+0xb0>)
 80115a0:	4013      	ands	r3, r2
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80115b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d105      	bne.n	80115c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f000 f9d4 	bl	8011974 <USB_CoreReset>
 80115cc:	4603      	mov	r3, r0
 80115ce:	73fb      	strb	r3, [r7, #15]
 80115d0:	e010      	b.n	80115f4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 f9c8 	bl	8011974 <USB_CoreReset>
 80115e4:	4603      	mov	r3, r0
 80115e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80115f4:	7fbb      	ldrb	r3, [r7, #30]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d10b      	bne.n	8011612 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	689b      	ldr	r3, [r3, #8]
 80115fe:	f043 0206 	orr.w	r2, r3, #6
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	f043 0220 	orr.w	r2, r3, #32
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011612:	7bfb      	ldrb	r3, [r7, #15]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801161e:	b004      	add	sp, #16
 8011620:	4770      	bx	lr
 8011622:	bf00      	nop
 8011624:	ffbdffbf 	.word	0xffbdffbf

08011628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	f043 0201 	orr.w	r2, r3, #1
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	370c      	adds	r7, #12
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr

0801164a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801164a:	b480      	push	{r7}
 801164c:	b083      	sub	sp, #12
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	689b      	ldr	r3, [r3, #8]
 8011656:	f023 0201 	bic.w	r2, r3, #1
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801165e:	2300      	movs	r3, #0
}
 8011660:	4618      	mov	r0, r3
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr

0801166c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	460b      	mov	r3, r1
 8011676:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011678:	2300      	movs	r3, #0
 801167a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011688:	78fb      	ldrb	r3, [r7, #3]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d115      	bne.n	80116ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801169a:	200a      	movs	r0, #10
 801169c:	f7f2 feac 	bl	80043f8 <HAL_Delay>
      ms += 10U;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	330a      	adds	r3, #10
 80116a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f956 	bl	8011958 <USB_GetMode>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d01e      	beq.n	80116f0 <USB_SetCurrentMode+0x84>
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80116b6:	d9f0      	bls.n	801169a <USB_SetCurrentMode+0x2e>
 80116b8:	e01a      	b.n	80116f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d115      	bne.n	80116ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116cc:	200a      	movs	r0, #10
 80116ce:	f7f2 fe93 	bl	80043f8 <HAL_Delay>
      ms += 10U;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	330a      	adds	r3, #10
 80116d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 f93d 	bl	8011958 <USB_GetMode>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d005      	beq.n	80116f0 <USB_SetCurrentMode+0x84>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80116e8:	d9f0      	bls.n	80116cc <USB_SetCurrentMode+0x60>
 80116ea:	e001      	b.n	80116f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	e005      	b.n	80116fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80116f4:	d101      	bne.n	80116fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80116f6:	2301      	movs	r3, #1
 80116f8:	e000      	b.n	80116fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3301      	adds	r3, #1
 8011716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801171e:	d901      	bls.n	8011724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	e01b      	b.n	801175c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	daf2      	bge.n	8011712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801172c:	2300      	movs	r3, #0
 801172e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	019b      	lsls	r3, r3, #6
 8011734:	f043 0220 	orr.w	r2, r3, #32
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	3301      	adds	r3, #1
 8011740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011748:	d901      	bls.n	801174e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801174a:	2303      	movs	r3, #3
 801174c:	e006      	b.n	801175c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	f003 0320 	and.w	r3, r3, #32
 8011756:	2b20      	cmp	r3, #32
 8011758:	d0f0      	beq.n	801173c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011770:	2300      	movs	r3, #0
 8011772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	3301      	adds	r3, #1
 8011778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011780:	d901      	bls.n	8011786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011782:	2303      	movs	r3, #3
 8011784:	e018      	b.n	80117b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	691b      	ldr	r3, [r3, #16]
 801178a:	2b00      	cmp	r3, #0
 801178c:	daf2      	bge.n	8011774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801178e:	2300      	movs	r3, #0
 8011790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2210      	movs	r2, #16
 8011796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	3301      	adds	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80117a4:	d901      	bls.n	80117aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80117a6:	2303      	movs	r3, #3
 80117a8:	e006      	b.n	80117b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	691b      	ldr	r3, [r3, #16]
 80117ae:	f003 0310 	and.w	r3, r3, #16
 80117b2:	2b10      	cmp	r3, #16
 80117b4:	d0f0      	beq.n	8011798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b089      	sub	sp, #36	@ 0x24
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	4611      	mov	r1, r2
 80117d0:	461a      	mov	r2, r3
 80117d2:	460b      	mov	r3, r1
 80117d4:	71fb      	strb	r3, [r7, #7]
 80117d6:	4613      	mov	r3, r2
 80117d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80117e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d123      	bne.n	8011832 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80117ea:	88bb      	ldrh	r3, [r7, #4]
 80117ec:	3303      	adds	r3, #3
 80117ee:	089b      	lsrs	r3, r3, #2
 80117f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80117f2:	2300      	movs	r3, #0
 80117f4:	61bb      	str	r3, [r7, #24]
 80117f6:	e018      	b.n	801182a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80117f8:	79fb      	ldrb	r3, [r7, #7]
 80117fa:	031a      	lsls	r2, r3, #12
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	4413      	add	r3, r2
 8011800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011804:	461a      	mov	r2, r3
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	3301      	adds	r3, #1
 8011810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011812:	69fb      	ldr	r3, [r7, #28]
 8011814:	3301      	adds	r3, #1
 8011816:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	3301      	adds	r3, #1
 801181c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	3301      	adds	r3, #1
 8011822:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	3301      	adds	r3, #1
 8011828:	61bb      	str	r3, [r7, #24]
 801182a:	69ba      	ldr	r2, [r7, #24]
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	429a      	cmp	r2, r3
 8011830:	d3e2      	bcc.n	80117f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011832:	2300      	movs	r3, #0
}
 8011834:	4618      	mov	r0, r3
 8011836:	3724      	adds	r7, #36	@ 0x24
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011840:	b480      	push	{r7}
 8011842:	b08b      	sub	sp, #44	@ 0x2c
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	4613      	mov	r3, r2
 801184c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011856:	88fb      	ldrh	r3, [r7, #6]
 8011858:	089b      	lsrs	r3, r3, #2
 801185a:	b29b      	uxth	r3, r3
 801185c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801185e:	88fb      	ldrh	r3, [r7, #6]
 8011860:	f003 0303 	and.w	r3, r3, #3
 8011864:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011866:	2300      	movs	r3, #0
 8011868:	623b      	str	r3, [r7, #32]
 801186a:	e014      	b.n	8011896 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011876:	601a      	str	r2, [r3, #0]
    pDest++;
 8011878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187a:	3301      	adds	r3, #1
 801187c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011880:	3301      	adds	r3, #1
 8011882:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011886:	3301      	adds	r3, #1
 8011888:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188c:	3301      	adds	r3, #1
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011890:	6a3b      	ldr	r3, [r7, #32]
 8011892:	3301      	adds	r3, #1
 8011894:	623b      	str	r3, [r7, #32]
 8011896:	6a3a      	ldr	r2, [r7, #32]
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	429a      	cmp	r2, r3
 801189c:	d3e6      	bcc.n	801186c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801189e:	8bfb      	ldrh	r3, [r7, #30]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d01e      	beq.n	80118e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80118a4:	2300      	movs	r3, #0
 80118a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80118a8:	69bb      	ldr	r3, [r7, #24]
 80118aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80118ae:	461a      	mov	r2, r3
 80118b0:	f107 0310 	add.w	r3, r7, #16
 80118b4:	6812      	ldr	r2, [r2, #0]
 80118b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80118b8:	693a      	ldr	r2, [r7, #16]
 80118ba:	6a3b      	ldr	r3, [r7, #32]
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	fa22 f303 	lsr.w	r3, r2, r3
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c8:	701a      	strb	r2, [r3, #0]
      i++;
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	3301      	adds	r3, #1
 80118ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80118d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d2:	3301      	adds	r3, #1
 80118d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80118d6:	8bfb      	ldrh	r3, [r7, #30]
 80118d8:	3b01      	subs	r3, #1
 80118da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80118dc:	8bfb      	ldrh	r3, [r7, #30]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d1ea      	bne.n	80118b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80118e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	372c      	adds	r7, #44	@ 0x2c
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b085      	sub	sp, #20
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	699b      	ldr	r3, [r3, #24]
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	4013      	ands	r3, r2
 8011906:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011908:	68fb      	ldr	r3, [r7, #12]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011916:	b480      	push	{r7}
 8011918:	b085      	sub	sp, #20
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	460b      	mov	r3, r1
 8011920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011926:	78fb      	ldrb	r3, [r7, #3]
 8011928:	015a      	lsls	r2, r3, #5
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	4413      	add	r3, r2
 801192e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011936:	78fb      	ldrb	r3, [r7, #3]
 8011938:	015a      	lsls	r2, r3, #5
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	4413      	add	r3, r2
 801193e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	68ba      	ldr	r2, [r7, #8]
 8011946:	4013      	ands	r3, r2
 8011948:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801194a:	68bb      	ldr	r3, [r7, #8]
}
 801194c:	4618      	mov	r0, r3
 801194e:	3714      	adds	r7, #20
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	695b      	ldr	r3, [r3, #20]
 8011964:	f003 0301 	and.w	r3, r3, #1
}
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011974:	b480      	push	{r7}
 8011976:	b085      	sub	sp, #20
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	3301      	adds	r3, #1
 8011984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801198c:	d901      	bls.n	8011992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801198e:	2303      	movs	r3, #3
 8011990:	e01b      	b.n	80119ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	daf2      	bge.n	8011980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801199a:	2300      	movs	r3, #0
 801199c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	691b      	ldr	r3, [r3, #16]
 80119a2:	f043 0201 	orr.w	r2, r3, #1
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	3301      	adds	r3, #1
 80119ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119b6:	d901      	bls.n	80119bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80119b8:	2303      	movs	r3, #3
 80119ba:	e006      	b.n	80119ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	f003 0301 	and.w	r3, r3, #1
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d0f0      	beq.n	80119aa <USB_CoreReset+0x36>

  return HAL_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3714      	adds	r7, #20
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
	...

080119d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119d8:	b084      	sub	sp, #16
 80119da:	b580      	push	{r7, lr}
 80119dc:	b086      	sub	sp, #24
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
 80119e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80119e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80119ea:	2300      	movs	r3, #0
 80119ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80119f8:	461a      	mov	r2, r3
 80119fa:	2300      	movs	r3, #0
 80119fc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d119      	bne.n	8011a4a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d10a      	bne.n	8011a34 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a2c:	f043 0304 	orr.w	r3, r3, #4
 8011a30:	6013      	str	r3, [r2, #0]
 8011a32:	e014      	b.n	8011a5e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	68fa      	ldr	r2, [r7, #12]
 8011a3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a42:	f023 0304 	bic.w	r3, r3, #4
 8011a46:	6013      	str	r3, [r2, #0]
 8011a48:	e009      	b.n	8011a5e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68fa      	ldr	r2, [r7, #12]
 8011a54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a58:	f023 0304 	bic.w	r3, r3, #4
 8011a5c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011a5e:	2110      	movs	r1, #16
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff fe4f 	bl	8011704 <USB_FlushTxFifo>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d001      	beq.n	8011a70 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff fe79 	bl	8011768 <USB_FlushRxFifo>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d001      	beq.n	8011a80 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011a80:	2300      	movs	r3, #0
 8011a82:	613b      	str	r3, [r7, #16]
 8011a84:	e015      	b.n	8011ab2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	015a      	lsls	r2, r3, #5
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a92:	461a      	mov	r2, r3
 8011a94:	f04f 33ff 	mov.w	r3, #4294967295
 8011a98:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	015a      	lsls	r2, r3, #5
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	613b      	str	r3, [r7, #16]
 8011ab2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d3e3      	bcc.n	8011a86 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aca:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a18      	ldr	r2, [pc, #96]	@ (8011b30 <USB_HostInit+0x158>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d10b      	bne.n	8011aec <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ada:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4a15      	ldr	r2, [pc, #84]	@ (8011b34 <USB_HostInit+0x15c>)
 8011ae0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4a14      	ldr	r2, [pc, #80]	@ (8011b38 <USB_HostInit+0x160>)
 8011ae6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8011aea:	e009      	b.n	8011b00 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2280      	movs	r2, #128	@ 0x80
 8011af0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4a11      	ldr	r2, [pc, #68]	@ (8011b3c <USB_HostInit+0x164>)
 8011af6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4a11      	ldr	r2, [pc, #68]	@ (8011b40 <USB_HostInit+0x168>)
 8011afc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d105      	bne.n	8011b14 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	f043 0210 	orr.w	r2, r3, #16
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	699a      	ldr	r2, [r3, #24]
 8011b18:	4b0a      	ldr	r3, [pc, #40]	@ (8011b44 <USB_HostInit+0x16c>)
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8011b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3718      	adds	r7, #24
 8011b26:	46bd      	mov	sp, r7
 8011b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b2c:	b004      	add	sp, #16
 8011b2e:	4770      	bx	lr
 8011b30:	40040000 	.word	0x40040000
 8011b34:	01000200 	.word	0x01000200
 8011b38:	00e00300 	.word	0x00e00300
 8011b3c:	00600080 	.word	0x00600080
 8011b40:	004000e0 	.word	0x004000e0
 8011b44:	a3200008 	.word	0xa3200008

08011b48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011b66:	f023 0303 	bic.w	r3, r3, #3
 8011b6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	78fb      	ldrb	r3, [r7, #3]
 8011b76:	f003 0303 	and.w	r3, r3, #3
 8011b7a:	68f9      	ldr	r1, [r7, #12]
 8011b7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011b80:	4313      	orrs	r3, r2
 8011b82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011b84:	78fb      	ldrb	r3, [r7, #3]
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d107      	bne.n	8011b9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b90:	461a      	mov	r2, r3
 8011b92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011b96:	6053      	str	r3, [r2, #4]
 8011b98:	e00c      	b.n	8011bb4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011b9a:	78fb      	ldrb	r3, [r7, #3]
 8011b9c:	2b02      	cmp	r3, #2
 8011b9e:	d107      	bne.n	8011bb0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011bac:	6053      	str	r3, [r2, #4]
 8011bae:	e001      	b.n	8011bb4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e000      	b.n	8011bb6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011bc2:	b480      	push	{r7}
 8011bc4:	b085      	sub	sp, #20
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	460b      	mov	r3, r1
 8011bcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011be6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d109      	bne.n	8011c06 <USB_DriveVbus+0x44>
 8011bf2:	78fb      	ldrb	r3, [r7, #3]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d106      	bne.n	8011c06 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011c04:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c10:	d109      	bne.n	8011c26 <USB_DriveVbus+0x64>
 8011c12:	78fb      	ldrb	r3, [r7, #3]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d106      	bne.n	8011c26 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c24:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b085      	sub	sp, #20
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011c40:	2300      	movs	r3, #0
 8011c42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	0c5b      	lsrs	r3, r3, #17
 8011c52:	f003 0303 	and.w	r3, r3, #3
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3714      	adds	r7, #20
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8011c62:	b480      	push	{r7}
 8011c64:	b085      	sub	sp, #20
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011c74:	689b      	ldr	r3, [r3, #8]
 8011c76:	b29b      	uxth	r3, r3
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3714      	adds	r7, #20
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c82:	4770      	bx	lr

08011c84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b088      	sub	sp, #32
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	4611      	mov	r1, r2
 8011c90:	461a      	mov	r2, r3
 8011c92:	4603      	mov	r3, r0
 8011c94:	70fb      	strb	r3, [r7, #3]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70bb      	strb	r3, [r7, #2]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8011ca6:	78fb      	ldrb	r3, [r7, #3]
 8011ca8:	015a      	lsls	r2, r3, #5
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	4413      	add	r3, r2
 8011cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011cba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011cbe:	2b03      	cmp	r3, #3
 8011cc0:	d87c      	bhi.n	8011dbc <USB_HC_Init+0x138>
 8011cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc8 <USB_HC_Init+0x44>)
 8011cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc8:	08011cd9 	.word	0x08011cd9
 8011ccc:	08011d7f 	.word	0x08011d7f
 8011cd0:	08011cd9 	.word	0x08011cd9
 8011cd4:	08011d41 	.word	0x08011d41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011cd8:	78fb      	ldrb	r3, [r7, #3]
 8011cda:	015a      	lsls	r2, r3, #5
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	4413      	add	r3, r2
 8011ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8011cea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011cec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	da10      	bge.n	8011d16 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011cf4:	78fb      	ldrb	r3, [r7, #3]
 8011cf6:	015a      	lsls	r2, r3, #5
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	78fa      	ldrb	r2, [r7, #3]
 8011d04:	0151      	lsls	r1, r2, #5
 8011d06:	693a      	ldr	r2, [r7, #16]
 8011d08:	440a      	add	r2, r1
 8011d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d12:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8011d14:	e055      	b.n	8011dc2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4a6f      	ldr	r2, [pc, #444]	@ (8011ed8 <USB_HC_Init+0x254>)
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	d151      	bne.n	8011dc2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011d1e:	78fb      	ldrb	r3, [r7, #3]
 8011d20:	015a      	lsls	r2, r3, #5
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	4413      	add	r3, r2
 8011d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	78fa      	ldrb	r2, [r7, #3]
 8011d2e:	0151      	lsls	r1, r2, #5
 8011d30:	693a      	ldr	r2, [r7, #16]
 8011d32:	440a      	add	r2, r1
 8011d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d38:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011d3c:	60d3      	str	r3, [r2, #12]
      break;
 8011d3e:	e040      	b.n	8011dc2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d40:	78fb      	ldrb	r3, [r7, #3]
 8011d42:	015a      	lsls	r2, r3, #5
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	4413      	add	r3, r2
 8011d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8011d52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	da34      	bge.n	8011dc6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011d5c:	78fb      	ldrb	r3, [r7, #3]
 8011d5e:	015a      	lsls	r2, r3, #5
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	4413      	add	r3, r2
 8011d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	78fa      	ldrb	r2, [r7, #3]
 8011d6c:	0151      	lsls	r1, r2, #5
 8011d6e:	693a      	ldr	r2, [r7, #16]
 8011d70:	440a      	add	r2, r1
 8011d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011d7c:	e023      	b.n	8011dc6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d7e:	78fb      	ldrb	r3, [r7, #3]
 8011d80:	015a      	lsls	r2, r3, #5
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	4413      	add	r3, r2
 8011d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	f240 2325 	movw	r3, #549	@ 0x225
 8011d90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011d92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	da17      	bge.n	8011dca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011d9a:	78fb      	ldrb	r3, [r7, #3]
 8011d9c:	015a      	lsls	r2, r3, #5
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	4413      	add	r3, r2
 8011da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	78fa      	ldrb	r2, [r7, #3]
 8011daa:	0151      	lsls	r1, r2, #5
 8011dac:	693a      	ldr	r2, [r7, #16]
 8011dae:	440a      	add	r2, r1
 8011db0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011db4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011db8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011dba:	e006      	b.n	8011dca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	77fb      	strb	r3, [r7, #31]
      break;
 8011dc0:	e004      	b.n	8011dcc <USB_HC_Init+0x148>
      break;
 8011dc2:	bf00      	nop
 8011dc4:	e002      	b.n	8011dcc <USB_HC_Init+0x148>
      break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <USB_HC_Init+0x148>
      break;
 8011dca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011dcc:	78fb      	ldrb	r3, [r7, #3]
 8011dce:	015a      	lsls	r2, r3, #5
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dd8:	461a      	mov	r2, r3
 8011dda:	2300      	movs	r3, #0
 8011ddc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8011dde:	78fb      	ldrb	r3, [r7, #3]
 8011de0:	015a      	lsls	r2, r3, #5
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	4413      	add	r3, r2
 8011de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	78fa      	ldrb	r2, [r7, #3]
 8011dee:	0151      	lsls	r1, r2, #5
 8011df0:	693a      	ldr	r2, [r7, #16]
 8011df2:	440a      	add	r2, r1
 8011df4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011df8:	f043 0302 	orr.w	r3, r3, #2
 8011dfc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011e04:	699a      	ldr	r2, [r3, #24]
 8011e06:	78fb      	ldrb	r3, [r7, #3]
 8011e08:	f003 030f 	and.w	r3, r3, #15
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e12:	6939      	ldr	r1, [r7, #16]
 8011e14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011e18:	4313      	orrs	r3, r2
 8011e1a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	699b      	ldr	r3, [r3, #24]
 8011e20:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	da03      	bge.n	8011e38 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e34:	61bb      	str	r3, [r7, #24]
 8011e36:	e001      	b.n	8011e3c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7ff fef9 	bl	8011c34 <USB_GetHostSpeed>
 8011e42:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011e44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d106      	bne.n	8011e5a <USB_HC_Init+0x1d6>
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d003      	beq.n	8011e5a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011e56:	617b      	str	r3, [r7, #20]
 8011e58:	e001      	b.n	8011e5e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e5e:	787b      	ldrb	r3, [r7, #1]
 8011e60:	059b      	lsls	r3, r3, #22
 8011e62:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011e66:	78bb      	ldrb	r3, [r7, #2]
 8011e68:	02db      	lsls	r3, r3, #11
 8011e6a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e6e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011e70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011e74:	049b      	lsls	r3, r3, #18
 8011e76:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011e7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8011e7c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011e82:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	431a      	orrs	r2, r3
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e8c:	78fa      	ldrb	r2, [r7, #3]
 8011e8e:	0151      	lsls	r1, r2, #5
 8011e90:	693a      	ldr	r2, [r7, #16]
 8011e92:	440a      	add	r2, r1
 8011e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e9c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8011e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d003      	beq.n	8011eae <USB_HC_Init+0x22a>
 8011ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d10f      	bne.n	8011ece <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011eae:	78fb      	ldrb	r3, [r7, #3]
 8011eb0:	015a      	lsls	r2, r3, #5
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	78fa      	ldrb	r2, [r7, #3]
 8011ebe:	0151      	lsls	r1, r2, #5
 8011ec0:	693a      	ldr	r2, [r7, #16]
 8011ec2:	440a      	add	r2, r1
 8011ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011ec8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011ecc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3720      	adds	r7, #32
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	40040000 	.word	0x40040000

08011edc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b08c      	sub	sp, #48	@ 0x30
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	785b      	ldrb	r3, [r3, #1]
 8011ef2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8011ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011ef8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	4a5d      	ldr	r2, [pc, #372]	@ (8012074 <USB_HC_StartXfer+0x198>)
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d12f      	bne.n	8011f62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8011f02:	79fb      	ldrb	r3, [r7, #7]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d11c      	bne.n	8011f42 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	7c9b      	ldrb	r3, [r3, #18]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d003      	beq.n	8011f18 <USB_HC_StartXfer+0x3c>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	7c9b      	ldrb	r3, [r3, #18]
 8011f14:	2b02      	cmp	r3, #2
 8011f16:	d124      	bne.n	8011f62 <USB_HC_StartXfer+0x86>
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	799b      	ldrb	r3, [r3, #6]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d120      	bne.n	8011f62 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	015a      	lsls	r2, r3, #5
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	4413      	add	r3, r2
 8011f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	69fa      	ldr	r2, [r7, #28]
 8011f30:	0151      	lsls	r1, r2, #5
 8011f32:	6a3a      	ldr	r2, [r7, #32]
 8011f34:	440a      	add	r2, r1
 8011f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f3e:	60d3      	str	r3, [r2, #12]
 8011f40:	e00f      	b.n	8011f62 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	791b      	ldrb	r3, [r3, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10b      	bne.n	8011f62 <USB_HC_StartXfer+0x86>
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	795b      	ldrb	r3, [r3, #5]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d107      	bne.n	8011f62 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	785b      	ldrb	r3, [r3, #1]
 8011f56:	4619      	mov	r1, r3
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	f000 fb6b 	bl	8012634 <USB_DoPing>
        return HAL_OK;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	e232      	b.n	80123c8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	799b      	ldrb	r3, [r3, #6]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d158      	bne.n	801201c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	78db      	ldrb	r3, [r3, #3]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d007      	beq.n	8011f86 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011f76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f78:	68ba      	ldr	r2, [r7, #8]
 8011f7a:	8a92      	ldrh	r2, [r2, #20]
 8011f7c:	fb03 f202 	mul.w	r2, r3, r2
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	61da      	str	r2, [r3, #28]
 8011f84:	e07c      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	7c9b      	ldrb	r3, [r3, #18]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d130      	bne.n	8011ff0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	6a1b      	ldr	r3, [r3, #32]
 8011f92:	2bbc      	cmp	r3, #188	@ 0xbc
 8011f94:	d918      	bls.n	8011fc8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	8a9b      	ldrh	r3, [r3, #20]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	69da      	ldr	r2, [r3, #28]
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d003      	beq.n	8011fb8 <USB_HC_StartXfer+0xdc>
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d103      	bne.n	8011fc0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	60da      	str	r2, [r3, #12]
 8011fbe:	e05f      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	60da      	str	r2, [r3, #12]
 8011fc6:	e05b      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	6a1a      	ldr	r2, [r3, #32]
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d007      	beq.n	8011fe8 <USB_HC_StartXfer+0x10c>
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d003      	beq.n	8011fe8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	2204      	movs	r2, #4
 8011fe4:	60da      	str	r2, [r3, #12]
 8011fe6:	e04b      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2203      	movs	r2, #3
 8011fec:	60da      	str	r2, [r3, #12]
 8011fee:	e047      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8011ff0:	79fb      	ldrb	r3, [r7, #7]
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d10d      	bne.n	8012012 <USB_HC_StartXfer+0x136>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	68ba      	ldr	r2, [r7, #8]
 8011ffc:	8a92      	ldrh	r2, [r2, #20]
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d907      	bls.n	8012012 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012004:	68ba      	ldr	r2, [r7, #8]
 8012006:	8a92      	ldrh	r2, [r2, #20]
 8012008:	fb03 f202 	mul.w	r2, r3, r2
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	61da      	str	r2, [r3, #28]
 8012010:	e036      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	6a1a      	ldr	r2, [r3, #32]
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	61da      	str	r2, [r3, #28]
 801201a:	e031      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	6a1b      	ldr	r3, [r3, #32]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d018      	beq.n	8012056 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	6a1b      	ldr	r3, [r3, #32]
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	8a92      	ldrh	r2, [r2, #20]
 801202c:	4413      	add	r3, r2
 801202e:	3b01      	subs	r3, #1
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	8a92      	ldrh	r2, [r2, #20]
 8012034:	fbb3 f3f2 	udiv	r3, r3, r2
 8012038:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 801203a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801203c:	8b7b      	ldrh	r3, [r7, #26]
 801203e:	429a      	cmp	r2, r3
 8012040:	d90b      	bls.n	801205a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8012042:	8b7b      	ldrh	r3, [r7, #26]
 8012044:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012046:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012048:	68ba      	ldr	r2, [r7, #8]
 801204a:	8a92      	ldrh	r2, [r2, #20]
 801204c:	fb03 f202 	mul.w	r2, r3, r2
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	61da      	str	r2, [r3, #28]
 8012054:	e001      	b.n	801205a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8012056:	2301      	movs	r3, #1
 8012058:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	78db      	ldrb	r3, [r3, #3]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00a      	beq.n	8012078 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012062:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	8a92      	ldrh	r2, [r2, #20]
 8012068:	fb03 f202 	mul.w	r2, r3, r2
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	61da      	str	r2, [r3, #28]
 8012070:	e006      	b.n	8012080 <USB_HC_StartXfer+0x1a4>
 8012072:	bf00      	nop
 8012074:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	6a1a      	ldr	r2, [r3, #32]
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012088:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801208a:	04d9      	lsls	r1, r3, #19
 801208c:	4ba3      	ldr	r3, [pc, #652]	@ (801231c <USB_HC_StartXfer+0x440>)
 801208e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012090:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	7d9b      	ldrb	r3, [r3, #22]
 8012096:	075b      	lsls	r3, r3, #29
 8012098:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801209c:	69f9      	ldr	r1, [r7, #28]
 801209e:	0148      	lsls	r0, r1, #5
 80120a0:	6a39      	ldr	r1, [r7, #32]
 80120a2:	4401      	add	r1, r0
 80120a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80120a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80120aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80120ac:	79fb      	ldrb	r3, [r7, #7]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	6999      	ldr	r1, [r3, #24]
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	015a      	lsls	r2, r3, #5
 80120ba:	6a3b      	ldr	r3, [r7, #32]
 80120bc:	4413      	add	r3, r2
 80120be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120c2:	460a      	mov	r2, r1
 80120c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80120c6:	6a3b      	ldr	r3, [r7, #32]
 80120c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	f003 0301 	and.w	r3, r3, #1
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bf0c      	ite	eq
 80120d6:	2301      	moveq	r3, #1
 80120d8:	2300      	movne	r3, #0
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	015a      	lsls	r2, r3, #5
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	4413      	add	r3, r2
 80120e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	69fa      	ldr	r2, [r7, #28]
 80120ee:	0151      	lsls	r1, r2, #5
 80120f0:	6a3a      	ldr	r2, [r7, #32]
 80120f2:	440a      	add	r2, r1
 80120f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80120f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80120fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	015a      	lsls	r2, r3, #5
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	4413      	add	r3, r2
 8012106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	7e7b      	ldrb	r3, [r7, #25]
 801210e:	075b      	lsls	r3, r3, #29
 8012110:	69f9      	ldr	r1, [r7, #28]
 8012112:	0148      	lsls	r0, r1, #5
 8012114:	6a39      	ldr	r1, [r7, #32]
 8012116:	4401      	add	r1, r0
 8012118:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 801211c:	4313      	orrs	r3, r2
 801211e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	799b      	ldrb	r3, [r3, #6]
 8012124:	2b01      	cmp	r3, #1
 8012126:	f040 80c3 	bne.w	80122b0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	7c5b      	ldrb	r3, [r3, #17]
 801212e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012130:	68ba      	ldr	r2, [r7, #8]
 8012132:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8012134:	4313      	orrs	r3, r2
 8012136:	69fa      	ldr	r2, [r7, #28]
 8012138:	0151      	lsls	r1, r2, #5
 801213a:	6a3a      	ldr	r2, [r7, #32]
 801213c:	440a      	add	r2, r1
 801213e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8012146:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	015a      	lsls	r2, r3, #5
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	4413      	add	r3, r2
 8012150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	69fa      	ldr	r2, [r7, #28]
 8012158:	0151      	lsls	r1, r2, #5
 801215a:	6a3a      	ldr	r2, [r7, #32]
 801215c:	440a      	add	r2, r1
 801215e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8012166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	79db      	ldrb	r3, [r3, #7]
 801216c:	2b01      	cmp	r3, #1
 801216e:	d123      	bne.n	80121b8 <USB_HC_StartXfer+0x2dc>
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	78db      	ldrb	r3, [r3, #3]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d11f      	bne.n	80121b8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	015a      	lsls	r2, r3, #5
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	4413      	add	r3, r2
 8012180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	69fa      	ldr	r2, [r7, #28]
 8012188:	0151      	lsls	r1, r2, #5
 801218a:	6a3a      	ldr	r2, [r7, #32]
 801218c:	440a      	add	r2, r1
 801218e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012196:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	015a      	lsls	r2, r3, #5
 801219c:	6a3b      	ldr	r3, [r7, #32]
 801219e:	4413      	add	r3, r2
 80121a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	69fa      	ldr	r2, [r7, #28]
 80121a8:	0151      	lsls	r1, r2, #5
 80121aa:	6a3a      	ldr	r2, [r7, #32]
 80121ac:	440a      	add	r2, r1
 80121ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121b6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	7c9b      	ldrb	r3, [r3, #18]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d003      	beq.n	80121c8 <USB_HC_StartXfer+0x2ec>
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	7c9b      	ldrb	r3, [r3, #18]
 80121c4:	2b03      	cmp	r3, #3
 80121c6:	d117      	bne.n	80121f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d113      	bne.n	80121f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	78db      	ldrb	r3, [r3, #3]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d10f      	bne.n	80121f8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	015a      	lsls	r2, r3, #5
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	4413      	add	r3, r2
 80121e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	0151      	lsls	r1, r2, #5
 80121ea:	6a3a      	ldr	r2, [r7, #32]
 80121ec:	440a      	add	r2, r1
 80121ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80121f6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	7c9b      	ldrb	r3, [r3, #18]
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d162      	bne.n	80122c6 <USB_HC_StartXfer+0x3ea>
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	78db      	ldrb	r3, [r3, #3]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d15e      	bne.n	80122c6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	3b01      	subs	r3, #1
 801220e:	2b03      	cmp	r3, #3
 8012210:	d858      	bhi.n	80122c4 <USB_HC_StartXfer+0x3e8>
 8012212:	a201      	add	r2, pc, #4	@ (adr r2, 8012218 <USB_HC_StartXfer+0x33c>)
 8012214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012218:	08012229 	.word	0x08012229
 801221c:	0801224b 	.word	0x0801224b
 8012220:	0801226d 	.word	0x0801226d
 8012224:	0801228f 	.word	0x0801228f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	4413      	add	r3, r2
 8012230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	69fa      	ldr	r2, [r7, #28]
 8012238:	0151      	lsls	r1, r2, #5
 801223a:	6a3a      	ldr	r2, [r7, #32]
 801223c:	440a      	add	r2, r1
 801223e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012246:	6053      	str	r3, [r2, #4]
          break;
 8012248:	e03d      	b.n	80122c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	015a      	lsls	r2, r3, #5
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	4413      	add	r3, r2
 8012252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	69fa      	ldr	r2, [r7, #28]
 801225a:	0151      	lsls	r1, r2, #5
 801225c:	6a3a      	ldr	r2, [r7, #32]
 801225e:	440a      	add	r2, r1
 8012260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012264:	f043 030e 	orr.w	r3, r3, #14
 8012268:	6053      	str	r3, [r2, #4]
          break;
 801226a:	e02c      	b.n	80122c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	015a      	lsls	r2, r3, #5
 8012270:	6a3b      	ldr	r3, [r7, #32]
 8012272:	4413      	add	r3, r2
 8012274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	69fa      	ldr	r2, [r7, #28]
 801227c:	0151      	lsls	r1, r2, #5
 801227e:	6a3a      	ldr	r2, [r7, #32]
 8012280:	440a      	add	r2, r1
 8012282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801228a:	6053      	str	r3, [r2, #4]
          break;
 801228c:	e01b      	b.n	80122c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	015a      	lsls	r2, r3, #5
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	4413      	add	r3, r2
 8012296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	69fa      	ldr	r2, [r7, #28]
 801229e:	0151      	lsls	r1, r2, #5
 80122a0:	6a3a      	ldr	r2, [r7, #32]
 80122a2:	440a      	add	r2, r1
 80122a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80122ac:	6053      	str	r3, [r2, #4]
          break;
 80122ae:	e00a      	b.n	80122c6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	015a      	lsls	r2, r3, #5
 80122b4:	6a3b      	ldr	r3, [r7, #32]
 80122b6:	4413      	add	r3, r2
 80122b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122bc:	461a      	mov	r2, r3
 80122be:	2300      	movs	r3, #0
 80122c0:	6053      	str	r3, [r2, #4]
 80122c2:	e000      	b.n	80122c6 <USB_HC_StartXfer+0x3ea>
          break;
 80122c4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	015a      	lsls	r2, r3, #5
 80122ca:	6a3b      	ldr	r3, [r7, #32]
 80122cc:	4413      	add	r3, r2
 80122ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80122dc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	78db      	ldrb	r3, [r3, #3]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d004      	beq.n	80122f0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80122ec:	613b      	str	r3, [r7, #16]
 80122ee:	e003      	b.n	80122f8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80122f6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80122fe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	015a      	lsls	r2, r3, #5
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	4413      	add	r3, r2
 8012308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801230c:	461a      	mov	r2, r3
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d003      	beq.n	8012320 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8012318:	2300      	movs	r3, #0
 801231a:	e055      	b.n	80123c8 <USB_HC_StartXfer+0x4ec>
 801231c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	78db      	ldrb	r3, [r3, #3]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d14e      	bne.n	80123c6 <USB_HC_StartXfer+0x4ea>
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	6a1b      	ldr	r3, [r3, #32]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d04a      	beq.n	80123c6 <USB_HC_StartXfer+0x4ea>
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	79db      	ldrb	r3, [r3, #7]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d146      	bne.n	80123c6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	7c9b      	ldrb	r3, [r3, #18]
 801233c:	2b03      	cmp	r3, #3
 801233e:	d831      	bhi.n	80123a4 <USB_HC_StartXfer+0x4c8>
 8012340:	a201      	add	r2, pc, #4	@ (adr r2, 8012348 <USB_HC_StartXfer+0x46c>)
 8012342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012346:	bf00      	nop
 8012348:	08012359 	.word	0x08012359
 801234c:	0801237d 	.word	0x0801237d
 8012350:	08012359 	.word	0x08012359
 8012354:	0801237d 	.word	0x0801237d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	6a1b      	ldr	r3, [r3, #32]
 801235c:	3303      	adds	r3, #3
 801235e:	089b      	lsrs	r3, r3, #2
 8012360:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012362:	8afa      	ldrh	r2, [r7, #22]
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012368:	b29b      	uxth	r3, r3
 801236a:	429a      	cmp	r2, r3
 801236c:	d91c      	bls.n	80123a8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	699b      	ldr	r3, [r3, #24]
 8012372:	f043 0220 	orr.w	r2, r3, #32
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	619a      	str	r2, [r3, #24]
        }
        break;
 801237a:	e015      	b.n	80123a8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	6a1b      	ldr	r3, [r3, #32]
 8012380:	3303      	adds	r3, #3
 8012382:	089b      	lsrs	r3, r3, #2
 8012384:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012386:	8afa      	ldrh	r2, [r7, #22]
 8012388:	6a3b      	ldr	r3, [r7, #32]
 801238a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	b29b      	uxth	r3, r3
 8012392:	429a      	cmp	r2, r3
 8012394:	d90a      	bls.n	80123ac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	699b      	ldr	r3, [r3, #24]
 801239a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80123a2:	e003      	b.n	80123ac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80123a4:	bf00      	nop
 80123a6:	e002      	b.n	80123ae <USB_HC_StartXfer+0x4d2>
        break;
 80123a8:	bf00      	nop
 80123aa:	e000      	b.n	80123ae <USB_HC_StartXfer+0x4d2>
        break;
 80123ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	6999      	ldr	r1, [r3, #24]
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	785a      	ldrb	r2, [r3, #1]
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	6a1b      	ldr	r3, [r3, #32]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	2000      	movs	r0, #0
 80123be:	9000      	str	r0, [sp, #0]
 80123c0:	68f8      	ldr	r0, [r7, #12]
 80123c2:	f7ff f9ff 	bl	80117c4 <USB_WritePacket>
  }

  return HAL_OK;
 80123c6:	2300      	movs	r3, #0
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3728      	adds	r7, #40	@ 0x28
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b085      	sub	sp, #20
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80123e2:	695b      	ldr	r3, [r3, #20]
 80123e4:	b29b      	uxth	r3, r3
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80123f2:	b480      	push	{r7}
 80123f4:	b089      	sub	sp, #36	@ 0x24
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	460b      	mov	r3, r1
 80123fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8012402:	78fb      	ldrb	r3, [r7, #3]
 8012404:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8012406:	2300      	movs	r3, #0
 8012408:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	015a      	lsls	r2, r3, #5
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	4413      	add	r3, r2
 8012412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	0c9b      	lsrs	r3, r3, #18
 801241a:	f003 0303 	and.w	r3, r3, #3
 801241e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	015a      	lsls	r2, r3, #5
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	4413      	add	r3, r2
 8012428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	0fdb      	lsrs	r3, r3, #31
 8012430:	f003 0301 	and.w	r3, r3, #1
 8012434:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	015a      	lsls	r2, r3, #5
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	4413      	add	r3, r2
 801243e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	0fdb      	lsrs	r3, r3, #31
 8012446:	f003 0301 	and.w	r3, r3, #1
 801244a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	f003 0320 	and.w	r3, r3, #32
 8012454:	2b20      	cmp	r3, #32
 8012456:	d10d      	bne.n	8012474 <USB_HC_Halt+0x82>
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d10a      	bne.n	8012474 <USB_HC_Halt+0x82>
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d005      	beq.n	8012470 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d002      	beq.n	8012470 <USB_HC_Halt+0x7e>
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2b03      	cmp	r3, #3
 801246e:	d101      	bne.n	8012474 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8012470:	2300      	movs	r3, #0
 8012472:	e0d8      	b.n	8012626 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <USB_HC_Halt+0x8e>
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d173      	bne.n	8012568 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	015a      	lsls	r2, r3, #5
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	4413      	add	r3, r2
 8012488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	69ba      	ldr	r2, [r7, #24]
 8012490:	0151      	lsls	r1, r2, #5
 8012492:	69fa      	ldr	r2, [r7, #28]
 8012494:	440a      	add	r2, r1
 8012496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801249a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801249e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	f003 0320 	and.w	r3, r3, #32
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d14a      	bne.n	8012542 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d133      	bne.n	8012520 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	015a      	lsls	r2, r3, #5
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	4413      	add	r3, r2
 80124c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	69ba      	ldr	r2, [r7, #24]
 80124c8:	0151      	lsls	r1, r2, #5
 80124ca:	69fa      	ldr	r2, [r7, #28]
 80124cc:	440a      	add	r2, r1
 80124ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80124d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80124d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	015a      	lsls	r2, r3, #5
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	4413      	add	r3, r2
 80124e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	69ba      	ldr	r2, [r7, #24]
 80124e8:	0151      	lsls	r1, r2, #5
 80124ea:	69fa      	ldr	r2, [r7, #28]
 80124ec:	440a      	add	r2, r1
 80124ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80124f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80124f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	3301      	adds	r3, #1
 80124fc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012504:	d82e      	bhi.n	8012564 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	015a      	lsls	r2, r3, #5
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	4413      	add	r3, r2
 801250e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801251c:	d0ec      	beq.n	80124f8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801251e:	e081      	b.n	8012624 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	015a      	lsls	r2, r3, #5
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	4413      	add	r3, r2
 8012528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	69ba      	ldr	r2, [r7, #24]
 8012530:	0151      	lsls	r1, r2, #5
 8012532:	69fa      	ldr	r2, [r7, #28]
 8012534:	440a      	add	r2, r1
 8012536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801253a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801253e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012540:	e070      	b.n	8012624 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	015a      	lsls	r2, r3, #5
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	4413      	add	r3, r2
 801254a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	69ba      	ldr	r2, [r7, #24]
 8012552:	0151      	lsls	r1, r2, #5
 8012554:	69fa      	ldr	r2, [r7, #28]
 8012556:	440a      	add	r2, r1
 8012558:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801255c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012560:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012562:	e05f      	b.n	8012624 <USB_HC_Halt+0x232>
            break;
 8012564:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012566:	e05d      	b.n	8012624 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	015a      	lsls	r2, r3, #5
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	4413      	add	r3, r2
 8012570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	69ba      	ldr	r2, [r7, #24]
 8012578:	0151      	lsls	r1, r2, #5
 801257a:	69fa      	ldr	r2, [r7, #28]
 801257c:	440a      	add	r2, r1
 801257e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012586:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012594:	2b00      	cmp	r3, #0
 8012596:	d133      	bne.n	8012600 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	015a      	lsls	r2, r3, #5
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	4413      	add	r3, r2
 80125a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	69ba      	ldr	r2, [r7, #24]
 80125a8:	0151      	lsls	r1, r2, #5
 80125aa:	69fa      	ldr	r2, [r7, #28]
 80125ac:	440a      	add	r2, r1
 80125ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80125b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	015a      	lsls	r2, r3, #5
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	4413      	add	r3, r2
 80125c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	69ba      	ldr	r2, [r7, #24]
 80125c8:	0151      	lsls	r1, r2, #5
 80125ca:	69fa      	ldr	r2, [r7, #28]
 80125cc:	440a      	add	r2, r1
 80125ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80125d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	3301      	adds	r3, #1
 80125dc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80125e4:	d81d      	bhi.n	8012622 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	015a      	lsls	r2, r3, #5
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	4413      	add	r3, r2
 80125ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80125f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80125fc:	d0ec      	beq.n	80125d8 <USB_HC_Halt+0x1e6>
 80125fe:	e011      	b.n	8012624 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	015a      	lsls	r2, r3, #5
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	4413      	add	r3, r2
 8012608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	0151      	lsls	r1, r2, #5
 8012612:	69fa      	ldr	r2, [r7, #28]
 8012614:	440a      	add	r2, r1
 8012616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801261a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801261e:	6013      	str	r3, [r2, #0]
 8012620:	e000      	b.n	8012624 <USB_HC_Halt+0x232>
          break;
 8012622:	bf00      	nop
    }
  }

  return HAL_OK;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3724      	adds	r7, #36	@ 0x24
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
	...

08012634 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012634:	b480      	push	{r7}
 8012636:	b087      	sub	sp, #28
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012648:	2301      	movs	r3, #1
 801264a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	04da      	lsls	r2, r3, #19
 8012650:	4b15      	ldr	r3, [pc, #84]	@ (80126a8 <USB_DoPing+0x74>)
 8012652:	4013      	ands	r3, r2
 8012654:	693a      	ldr	r2, [r7, #16]
 8012656:	0151      	lsls	r1, r2, #5
 8012658:	697a      	ldr	r2, [r7, #20]
 801265a:	440a      	add	r2, r1
 801265c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012660:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012664:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	015a      	lsls	r2, r3, #5
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	4413      	add	r3, r2
 801266e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801267c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012684:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	015a      	lsls	r2, r3, #5
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	4413      	add	r3, r2
 801268e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012692:	461a      	mov	r2, r3
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012698:	2300      	movs	r3, #0
}
 801269a:	4618      	mov	r0, r3
 801269c:	371c      	adds	r7, #28
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop
 80126a8:	1ff80000 	.word	0x1ff80000

080126ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b088      	sub	sp, #32
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80126b4:	2300      	movs	r3, #0
 80126b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80126bc:	2300      	movs	r3, #0
 80126be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7fe ffc2 	bl	801164a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80126c6:	2110      	movs	r1, #16
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7ff f81b 	bl	8011704 <USB_FlushTxFifo>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ff f845 	bl	8011768 <USB_FlushRxFifo>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d001      	beq.n	80126e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80126e8:	2300      	movs	r3, #0
 80126ea:	61bb      	str	r3, [r7, #24]
 80126ec:	e01f      	b.n	801272e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	015a      	lsls	r2, r3, #5
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	4413      	add	r3, r2
 80126f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012704:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801270c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012714:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	015a      	lsls	r2, r3, #5
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	4413      	add	r3, r2
 801271e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012722:	461a      	mov	r2, r3
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	3301      	adds	r3, #1
 801272c:	61bb      	str	r3, [r7, #24]
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	2b0f      	cmp	r3, #15
 8012732:	d9dc      	bls.n	80126ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012734:	2300      	movs	r3, #0
 8012736:	61bb      	str	r3, [r7, #24]
 8012738:	e034      	b.n	80127a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	015a      	lsls	r2, r3, #5
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	4413      	add	r3, r2
 8012742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012750:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012758:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012760:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	015a      	lsls	r2, r3, #5
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	4413      	add	r3, r2
 801276a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801276e:	461a      	mov	r2, r3
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3301      	adds	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012780:	d80c      	bhi.n	801279c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	015a      	lsls	r2, r3, #5
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	4413      	add	r3, r2
 801278a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012798:	d0ec      	beq.n	8012774 <USB_StopHost+0xc8>
 801279a:	e000      	b.n	801279e <USB_StopHost+0xf2>
        break;
 801279c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	3301      	adds	r3, #1
 80127a2:	61bb      	str	r3, [r7, #24]
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	2b0f      	cmp	r3, #15
 80127a8:	d9c7      	bls.n	801273a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80127b0:	461a      	mov	r2, r3
 80127b2:	f04f 33ff 	mov.w	r3, #4294967295
 80127b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f04f 32ff 	mov.w	r2, #4294967295
 80127be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7fe ff31 	bl	8011628 <USB_EnableGlobalInt>

  return ret;
 80127c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3720      	adds	r7, #32
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80127da:	edd7 7a01 	vldr	s15, [r7, #4]
 80127de:	eef0 7ae7 	vabs.f32	s15, s15
 80127e2:	eeb0 0a67 	vmov.f32	s0, s15
 80127e6:	370c      	adds	r7, #12
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr

080127f0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80127fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80127fe:	f007 fb3b 	bl	8019e78 <sqrtf>
 8012802:	eef0 7a40 	vmov.f32	s15, s0
 8012806:	eeb0 0a67 	vmov.f32	s0, s15
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZN15ExtKalmanFilterC1EfPfS0_ff>:
 * @param phi_bias   Initial bias for phi and its corresponding process noise entry.
 * @param theta_bias Initial bias for theta and its corresponding process noise entry.
 *
 * @pre Q_var != nullptr and R_var != nullptr with the lengths stated above.
 */
ExtKalmanFilter::ExtKalmanFilter(float Pinit, float *Q_var, float *R_var, float phi_bias, float theta_bias) {
 8012810:	b480      	push	{r7}
 8012812:	b089      	sub	sp, #36	@ 0x24
 8012814:	af00      	add	r7, sp, #0
 8012816:	6178      	str	r0, [r7, #20]
 8012818:	ed87 0a04 	vstr	s0, [r7, #16]
 801281c:	60f9      	str	r1, [r7, #12]
 801281e:	60ba      	str	r2, [r7, #8]
 8012820:	edc7 0a01 	vstr	s1, [r7, #4]
 8012824:	ed87 1a00 	vstr	s2, [r7]
    // state estimates
	state.phi_rad= 0.0f;
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f04f 0200 	mov.w	r2, #0
 801282e:	601a      	str	r2, [r3, #0]
	state.theta_rad = 0.0f; // value of phi and theta
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	f04f 0200 	mov.w	r2, #0
 8012836:	605a      	str	r2, [r3, #4]
	state.bias_phi = phi_bias;
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	609a      	str	r2, [r3, #8]
	state.bias_theta = theta_bias;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	60da      	str	r2, [r3, #12]

	// a priori covariance matrix
	for (int i = 0; i < 16; ++i) {
 8012844:	2300      	movs	r3, #0
 8012846:	61fb      	str	r3, [r7, #28]
 8012848:	e00b      	b.n	8012862 <_ZN15ExtKalmanFilterC1EfPfS0_ff+0x52>
	    state.P[i] = 0.0f;
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	330a      	adds	r3, #10
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	4413      	add	r3, r2
 8012854:	3304      	adds	r3, #4
 8012856:	f04f 0200 	mov.w	r2, #0
 801285a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; ++i) {
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	3301      	adds	r3, #1
 8012860:	61fb      	str	r3, [r7, #28]
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	2b0f      	cmp	r3, #15
 8012866:	ddf0      	ble.n	801284a <_ZN15ExtKalmanFilterC1EfPfS0_ff+0x3a>
	}

	state.P[0]  = Pinit; // P[0][0]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	693a      	ldr	r2, [r7, #16]
 801286c:	62da      	str	r2, [r3, #44]	@ 0x2c
	state.P[5]  = Pinit; // P[1][1]
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	693a      	ldr	r2, [r7, #16]
 8012872:	641a      	str	r2, [r3, #64]	@ 0x40
	state.P[10] = Pinit; // P[2][2]
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	693a      	ldr	r2, [r7, #16]
 8012878:	655a      	str	r2, [r3, #84]	@ 0x54
	state.P[15] = Pinit; // P[3][3]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	693a      	ldr	r2, [r7, #16]
 801287e:	669a      	str	r2, [r3, #104]	@ 0x68

	// process noise covariance matrix (prediction error/ uncertainty of the matrix)
	state.Q[0] = Q_var[0];
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	611a      	str	r2, [r3, #16]
	state.Q[1] = (phi_bias);
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	615a      	str	r2, [r3, #20]
	state.Q[2] = Q_var[1];
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	685a      	ldr	r2, [r3, #4]
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	619a      	str	r2, [r3, #24]
	state.Q[3] = (theta_bias);
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	61da      	str	r2, [r3, #28]

	//covariance measurement ( uncertainty of the accelerometer / measurement error)
	state.R[0] = R_var[0];
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	621a      	str	r2, [r3, #32]
	state.R[1] = R_var[1];
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	685a      	ldr	r2, [r3, #4]
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	625a      	str	r2, [r3, #36]	@ 0x24
	state.R[2] = R_var[2];
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	689a      	ldr	r2, [r3, #8]
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	4618      	mov	r0, r3
 80128b8:	3724      	adds	r7, #36	@ 0x24
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
	...

080128c4 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf>:
 *
 * @post Updates state.phi_rad, state.theta_rad, and the 4x4 covariance state.P in place.
 *       Uses state.Q as process noise.
 * @note cos(phi) and cos(theta) are clamped away from zero to avoid singularities.
 */
void ExtKalmanFilter::predict(const MPU6050Data& gyro, float dt) {
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b0b0      	sub	sp, #192	@ 0xc0
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	ed87 0a01 	vstr	s0, [r7, #4]
	float p = gyro.gyroX;
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float q = gyro.gyroY;
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	691b      	ldr	r3, [r3, #16]
 80128de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float r = gyro.gyroZ;
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	695b      	ldr	r3, [r3, #20]
 80128e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	float sp = sinf(state.phi_rad);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	edd3 7a00 	vldr	s15, [r3]
 80128f0:	eeb0 0a67 	vmov.f32	s0, s15
 80128f4:	f007 fb22 	bl	8019f3c <sinf>
 80128f8:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	float cp = cosf(state.phi_rad);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	edd3 7a00 	vldr	s15, [r3]
 8012902:	eeb0 0a67 	vmov.f32	s0, s15
 8012906:	f007 fad5 	bl	8019eb4 <cosf>
 801290a:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
	if (fabs(cp) < 1e-6f) cp = 1e-6f; // clamps
 801290e:	ed97 0a2f 	vldr	s0, [r7, #188]	@ 0xbc
 8012912:	f7ff ff5d 	bl	80127d0 <_ZSt4fabsf>
 8012916:	eef0 7a40 	vmov.f32	s15, s0
 801291a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8012a84 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c0>
 801291e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012926:	bf4c      	ite	mi
 8012928:	2301      	movmi	r3, #1
 801292a:	2300      	movpl	r3, #0
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d002      	beq.n	8012938 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x74>
 8012932:	4b55      	ldr	r3, [pc, #340]	@ (8012a88 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c4>)
 8012934:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	float tt = tanf(state.theta_rad);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	edd3 7a01 	vldr	s15, [r3, #4]
 801293e:	eeb0 0a67 	vmov.f32	s0, s15
 8012942:	f007 fb41 	bl	8019fc8 <tanf>
 8012946:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0

	// state transition x = x + T * f(x,u)
	// calculating phi_dot and theta_dot
	float phi_dot = p + tt * (q * sp + r * cp);
 801294a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 801294e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8012952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012956:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 801295a:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 801295e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012966:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 801296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801296e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8012972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012976:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float theta_dot = q * cp - r * sp;
 801297a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 801297e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8012982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012986:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 801298a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 801298e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012996:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

	// updating phi_rad and theta_rad, the state matrix
	state.phi_rad += dt * (phi_dot  - state.bias_phi);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	ed93 7a00 	vldr	s14, [r3]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80129a6:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 80129aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80129ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80129b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	edc3 7a00 	vstr	s15, [r3]
	state.theta_rad += dt * (theta_dot - state.bias_theta );
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80129cc:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80129d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80129d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80129d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	edc3 7a01 	vstr	s15, [r3, #4]

	// Jacobian of f(x,u)
	sp = sinf(state.phi_rad);
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	edd3 7a00 	vldr	s15, [r3]
 80129ec:	eeb0 0a67 	vmov.f32	s0, s15
 80129f0:	f007 faa4 	bl	8019f3c <sinf>
 80129f4:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	cp = cosf(state.phi_rad);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	edd3 7a00 	vldr	s15, [r3]
 80129fe:	eeb0 0a67 	vmov.f32	s0, s15
 8012a02:	f007 fa57 	bl	8019eb4 <cosf>
 8012a06:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
	if (fabs(cp) < 1e-6f) cp = 1e-6f;
 8012a0a:	ed97 0a2f 	vldr	s0, [r7, #188]	@ 0xbc
 8012a0e:	f7ff fedf 	bl	80127d0 <_ZSt4fabsf>
 8012a12:	eef0 7a40 	vmov.f32	s15, s0
 8012a16:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8012a84 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c0>
 8012a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a22:	bf4c      	ite	mi
 8012a24:	2301      	movmi	r3, #1
 8012a26:	2300      	movpl	r3, #0
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d002      	beq.n	8012a34 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x170>
 8012a2e:	4b16      	ldr	r3, [pc, #88]	@ (8012a88 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c4>)
 8012a30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	float st = sinf(state.theta_rad);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8012a3e:	f007 fa7d 	bl	8019f3c <sinf>
 8012a42:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
	float ct = cosf(state.theta_rad);
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8012a50:	f007 fa30 	bl	8019eb4 <cosf>
 8012a54:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
	if (fabs(ct) < 1e-6f) ct = 1e-6f;
 8012a58:	ed97 0a2e 	vldr	s0, [r7, #184]	@ 0xb8
 8012a5c:	f7ff feb8 	bl	80127d0 <_ZSt4fabsf>
 8012a60:	eef0 7a40 	vmov.f32	s15, s0
 8012a64:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8012a84 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c0>
 8012a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a70:	bf4c      	ite	mi
 8012a72:	2301      	movmi	r3, #1
 8012a74:	2300      	movpl	r3, #0
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d007      	beq.n	8012a8c <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c8>
 8012a7c:	4b02      	ldr	r3, [pc, #8]	@ (8012a88 <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c4>)
 8012a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012a82:	e003      	b.n	8012a8c <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0x1c8>
 8012a84:	358637bd 	.word	0x358637bd
 8012a88:	358637bd 	.word	0x358637bd
	tt = st / ct;
 8012a8c:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8012a90:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8012a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a98:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0

	float A[16] = {
 8012a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8012aa0:	2240      	movs	r2, #64	@ 0x40
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f009 f85a 	bl	801bb5e <memset>
	    tt*(q*cp - r*sp),   (tt*tt + 1) * (r*cp* + q*sp),   0.0f,  0.0f,
 8012aaa:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8012aae:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8012ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ab6:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8012aba:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8012abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ac6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8012aca:	ee67 7a27 	vmul.f32	s15, s14, s15
		-r*cp - q*sp,         0.0f,                         0.0f,  0.0f,
	    0.0f,                0.0f,                          0.0f,  0.0f,
	    0.0f,                0.0f,                          0.0f,  0.0f
	};
 8012ace:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	    tt*(q*cp - r*sp),   (tt*tt + 1) * (r*cp* + q*sp),   0.0f,  0.0f,
 8012ad2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8012ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012ae2:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8012ae6:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8012aea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012aee:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8012af2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012af6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8012afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012afe:	ee67 7a27 	vmul.f32	s15, s14, s15
	};
 8012b02:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		-r*cp - q*sp,         0.0f,                         0.0f,  0.0f,
 8012b06:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8012b0a:	eeb1 7a67 	vneg.f32	s14, s15
 8012b0e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8012b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b16:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8012b1a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8012b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b22:	ee77 7a67 	vsub.f32	s15, s14, s15
	};
 8012b26:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

//  Update symmetric 4x4 Ptemp matrix from: Ptemp = dt * (A*P + P*A' + Q)
	float Ptemp[16];

	Ptemp[0]  = dt * (state.Q[0] + state.P[0]*A[0] + state.P[1]*A[1] + state.P[2]*A[2] + state.P[3]*A[3]
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	ed93 7a04 	vldr	s14, [r3, #16]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8012b36:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012b48:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8012b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8012b5a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8012b6c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8012b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b74:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[0]*state.P[0] + A[1]*state.P[4] + A[2]*state.P[8] + A[3]*state.P[12]);
 8012b78:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b8a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8012b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b9c:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8012ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bae:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8012bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[0]  = dt * (state.Q[0] + state.P[0]*A[0] + state.P[1]*A[1] + state.P[2]*A[2] + state.P[3]*A[3]
 8012bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8012bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bc8:	edc7 7a05 	vstr	s15, [r7, #20]

	Ptemp[1]  = dt * (state.P[0]*A[4] + state.P[1]*A[5] + state.P[2]*A[6] + state.P[3]*A[7]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8012bd2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8012bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012be0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8012bf2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8012bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8012c04:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8012c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[0]*state.P[1] + A[1]*state.P[5] + A[2]*state.P[9] + A[3]*state.P[13]);
 8012c10:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c22:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8012c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c34:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8012c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c46:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8012c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c54:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[1]  = dt * (state.P[0]*A[4] + state.P[1]*A[5] + state.P[2]*A[6] + state.P[3]*A[7]
 8012c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8012c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c60:	edc7 7a06 	vstr	s15, [r7, #24]

	Ptemp[2]  = dt * (state.P[0]*A[8] + state.P[1]*A[9] + state.P[2]*A[10] + state.P[3]*A[11]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8012c6a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012c78:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8012c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8012c8a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8012c9c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[0]*state.P[2] + A[1]*state.P[6] + A[2]*state.P[10] + A[3]*state.P[14]);
 8012ca8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8012cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012cba:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8012cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ccc:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012cde:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8012ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cec:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[2]  = dt * (state.P[0]*A[8] + state.P[1]*A[9] + state.P[2]*A[10] + state.P[3]*A[11]
 8012cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8012cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cf8:	edc7 7a07 	vstr	s15, [r7, #28]

	Ptemp[3]  = dt * (state.P[0]*A[12] + state.P[1]*A[13] + state.P[2]*A[14] + state.P[3]*A[15]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8012d02:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012d10:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8012d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8012d22:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8012d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8012d34:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8012d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[0]*state.P[3] + A[1]*state.P[7] + A[2]*state.P[11] + A[3]*state.P[15]);
 8012d40:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8012d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d52:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8012d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d64:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8012d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d76:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8012d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d84:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[3]  = dt * (state.P[0]*A[12] + state.P[1]*A[13] + state.P[2]*A[14] + state.P[3]*A[15]
 8012d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8012d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d90:	edc7 7a08 	vstr	s15, [r7, #32]

	Ptemp[4]  = dt * (state.P[4]*A[0] + state.P[5]*A[1] + state.P[6]*A[2] + state.P[7]*A[3]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8012d9a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8012da8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8012dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8012dba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8012dcc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8012dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[4]*state.P[0] + A[5]*state.P[4] + A[6]*state.P[8] + A[7]*state.P[12]);
 8012dd8:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012dea:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8012df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012dfc:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8012e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e0e:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8012e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[4]  = dt * (state.P[4]*A[0] + state.P[5]*A[1] + state.P[6]*A[2] + state.P[7]*A[3]
 8012e20:	edd7 7a01 	vldr	s15, [r7, #4]
 8012e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	Ptemp[5]  = dt * (state.Q[1] + state.P[4]*A[4] + state.P[5]*A[5] + state.P[6]*A[6] + state.P[7]*A[7]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8012e38:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8012e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8012e4a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8012e5c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8012e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8012e6e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8012e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e76:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[4]*state.P[1] + A[5]*state.P[5] + A[6]*state.P[9] + A[7]*state.P[13]);
 8012e7a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e8c:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8012e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e9e:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8012ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012eb0:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8012eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[5]  = dt * (state.Q[1] + state.P[4]*A[4] + state.P[5]*A[5] + state.P[6]*A[6] + state.P[7]*A[7]
 8012ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012eca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	Ptemp[6]  = dt * (state.P[4]*A[8] + state.P[5]*A[9] + state.P[6]*A[10] + state.P[7]*A[11]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8012ed4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8012ee2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8012ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8012ef4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8012f06:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[4]*state.P[2] + A[5]*state.P[6] + A[6]*state.P[10] + A[7]*state.P[14]);
 8012f12:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8012f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f24:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8012f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f36:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f48:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8012f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f56:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[6]  = dt * (state.P[4]*A[8] + state.P[5]*A[9] + state.P[6]*A[10] + state.P[7]*A[11]
 8012f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	Ptemp[7]  = dt * (state.P[4]*A[12] + state.P[5]*A[13] + state.P[6]*A[14] + state.P[7]*A[15]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8012f6c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8012f7a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8012f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8012f8c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8012f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8012f9e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8012fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[4]*state.P[3] + A[5]*state.P[7] + A[6]*state.P[11] + A[7]*state.P[15]);
 8012faa:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8012fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fbc:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8012fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fce:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8012fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fe0:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8012fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012fee:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[7]  = dt * (state.P[4]*A[12] + state.P[5]*A[13] + state.P[6]*A[14] + state.P[7]*A[15]
 8012ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ffa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	Ptemp[8]  = dt * (state.P[8]*A[0] + state.P[9]*A[1] + state.P[10]*A[2] + state.P[11]*A[3]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8013004:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013008:	ee27 7a27 	vmul.f32	s14, s14, s15
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8013012:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8013016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801301a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8013024:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8013028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801302c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8013036:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 801303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801303e:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[8]*state.P[0] + A[9]*state.P[4] + A[10]*state.P[8] + A[11]*state.P[12]);
 8013042:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013054:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801305e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013066:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8013070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013078:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8013082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013086:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[8]  = dt * (state.P[8]*A[0] + state.P[9]*A[1] + state.P[10]*A[2] + state.P[11]*A[3]
 801308a:	edd7 7a01 	vldr	s15, [r7, #4]
 801308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013092:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	Ptemp[9]  = dt * (state.P[8]*A[4] + state.P[9]*A[5] + state.P[10]*A[6] + state.P[11]*A[7]
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 801309c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80130a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80130aa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80130ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80130bc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80130c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80130ce:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80130d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130d6:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[8]*state.P[1] + A[9]*state.P[5] + A[10]*state.P[9] + A[11]*state.P[13]);
 80130da:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80130e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130ec:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80130f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130fe:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801310c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013110:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801311a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801311e:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[9]  = dt * (state.P[8]*A[4] + state.P[9]*A[5] + state.P[10]*A[6] + state.P[11]*A[7]
 8013122:	edd7 7a01 	vldr	s15, [r7, #4]
 8013126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801312a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	Ptemp[10] = dt * (state.Q[2] + state.P[8]*A[8] + state.P[9]*A[9] + state.P[10]*A[10] + state.P[11]*A[11]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	ed93 7a06 	vldr	s14, [r3, #24]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801313a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801313e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801314c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8013150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801315e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8013162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013166:	ee37 7a27 	vadd.f32	s14, s14, s15
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8013170:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8013174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013178:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[8]*state.P[2] + A[9]*state.P[6] + A[10]*state.P[10] + A[11]*state.P[14]);
 801317c:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801318a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801318e:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8013198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801319c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131a0:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80131aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131b2:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80131bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131c0:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[10] = dt * (state.Q[2] + state.P[8]*A[8] + state.P[9]*A[9] + state.P[10]*A[10] + state.P[11]*A[11]
 80131c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80131c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131cc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	Ptemp[11] = dt * (state.P[8]*A[12] + state.P[9]*A[13] + state.P[10]*A[14] + state.P[11]*A[15]
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80131d6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80131da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80131e4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80131e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80131f6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80131fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80131fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8013208:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 801320c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013210:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[8]*state.P[3] + A[9]*state.P[7] + A[10]*state.P[11] + A[11]*state.P[15]);
 8013214:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 801321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013226:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8013230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013238:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8013242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013246:	ee37 7a27 	vadd.f32	s14, s14, s15
 801324a:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8013254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013258:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[11] = dt * (state.P[8]*A[12] + state.P[9]*A[13] + state.P[10]*A[14] + state.P[11]*A[15]
 801325c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013264:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	Ptemp[12] = dt * (state.P[12]*A[0] + state.P[13]*A[1] + state.P[14]*A[2] + state.P[15]*A[3]
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 801326e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801327c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8013280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 801328e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8013292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013296:	ee37 7a27 	vadd.f32	s14, s14, s15
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80132a0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80132a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132a8:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[12]*state.P[0] + A[13]*state.P[4] + A[14]*state.P[8] + A[15]*state.P[12]);
 80132ac:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80132b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132be:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80132c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132d0:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80132da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132e2:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80132ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80132f0:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[12] = dt * (state.P[12]*A[0] + state.P[13]*A[1] + state.P[14]*A[2] + state.P[15]*A[3]
 80132f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80132f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132fc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	Ptemp[13] = dt * (state.P[12]*A[4] + state.P[13]*A[5] + state.P[14]*A[6] + state.P[15]*A[7]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8013306:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8013314:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8013318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801331c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8013326:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801332a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801332e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 8013338:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013340:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[12]*state.P[1] + A[13]*state.P[5] + A[14]*state.P[9] + A[15]*state.P[13]);
 8013344:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801334e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013356:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8013360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013368:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013376:	ee37 7a27 	vadd.f32	s14, s14, s15
 801337a:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013388:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[13] = dt * (state.P[12]*A[4] + state.P[13]*A[5] + state.P[14]*A[6] + state.P[15]*A[7]
 801338c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013394:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	Ptemp[14] = dt * (state.P[12]*A[8] + state.P[13]*A[9] + state.P[14]*A[10] + state.P[15]*A[11]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 801339e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80133a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80133ac:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80133b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80133be:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80133c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80133d0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80133d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133d8:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[12]*state.P[2] + A[13]*state.P[6] + A[14]*state.P[10] + A[15]*state.P[14]);
 80133dc:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80133e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133ee:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80133f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013400:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 801340a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801340e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013412:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 801341c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013420:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[14] = dt * (state.P[12]*A[8] + state.P[13]*A[9] + state.P[14]*A[10] + state.P[15]*A[11]
 8013424:	edd7 7a01 	vldr	s15, [r7, #4]
 8013428:	ee67 7a27 	vmul.f32	s15, s14, s15
 801342c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	Ptemp[15] = dt * (state.Q[3] + state.P[12]*A[12] + state.P[13]*A[13] + state.P[14]*A[14] + state.P[15]*A[15]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	ed93 7a07 	vldr	s14, [r3, #28]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 801343c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801344e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8013452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013456:	ee37 7a27 	vadd.f32	s14, s14, s15
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8013460:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8013464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013468:	ee37 7a27 	vadd.f32	s14, s14, s15
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 8013472:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8013476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801347a:	ee37 7a27 	vadd.f32	s14, s14, s15
	                           + A[12]*state.P[3] + A[13]*state.P[7] + A[14]*state.P[11] + A[15]*state.P[15]);
 801347e:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8013488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801348c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013490:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801349a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801349e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134a2:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80134ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134b4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80134be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134c2:	ee37 7a27 	vadd.f32	s14, s14, s15
	Ptemp[15] = dt * (state.Q[3] + state.P[12]*A[12] + state.P[13]*A[13] + state.P[14]*A[14] + state.P[15]*A[15]
 80134c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80134ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134ce:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


	for (int i = 0; i < 16; i++) {
 80134d2:	2300      	movs	r3, #0
 80134d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80134d8:	e020      	b.n	801351c <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0xc58>
	    state.P[i] += Ptemp[i];
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80134e0:	330a      	adds	r3, #10
 80134e2:	009b      	lsls	r3, r3, #2
 80134e4:	4413      	add	r3, r2
 80134e6:	3304      	adds	r3, #4
 80134e8:	ed93 7a00 	vldr	s14, [r3]
 80134ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	33c0      	adds	r3, #192	@ 0xc0
 80134f4:	443b      	add	r3, r7
 80134f6:	3bac      	subs	r3, #172	@ 0xac
 80134f8:	edd3 7a00 	vldr	s15, [r3]
 80134fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013500:	68fa      	ldr	r2, [r7, #12]
 8013502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013506:	330a      	adds	r3, #10
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	4413      	add	r3, r2
 801350c:	3304      	adds	r3, #4
 801350e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 16; i++) {
 8013512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013516:	3301      	adds	r3, #1
 8013518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801351c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013520:	2b0f      	cmp	r3, #15
 8013522:	ddda      	ble.n	80134da <_ZN15ExtKalmanFilter7predictERK11MPU6050Dataf+0xc16>
	}


}
 8013524:	bf00      	nop
 8013526:	bf00      	nop
 8013528:	37c0      	adds	r7, #192	@ 0xc0
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	bf00      	nop

08013530 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data>:
 * state.phi_rad, state.theta_rad, state.bias_phi, state.bias_theta. The covariance P is
 * updated via (I - K C) P. Early-exits if the accel norm is ~0 or if S is near-singular.
 *
 * Angles are in radians; acceleration in m/s^2; g = 9.81.
 */
void ExtKalmanFilter::update(const MPU6050Data& accel) {
 8013530:	b580      	push	{r7, lr}
 8013532:	b0ce      	sub	sp, #312	@ 0x138
 8013534:	af00      	add	r7, sp, #0
 8013536:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801353a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801353e:	6018      	str	r0, [r3, #0]
 8013540:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013544:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013548:	6019      	str	r1, [r3, #0]
	float ax = accel.accX;
 801354a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801354e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	float ay = accel.accY;
 801355a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801355e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	float az = accel.accZ;
 801356a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801356e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	float acc_norm = sqrt(ax*ax + ay*ay + az*az);
 801357a:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 801357e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013582:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8013586:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801358a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801358e:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8013592:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013596:	ee77 7a27 	vadd.f32	s15, s14, s15
 801359a:	eeb0 0a67 	vmov.f32	s0, s15
 801359e:	f7ff f927 	bl	80127f0 <_ZSt4sqrtf>
 80135a2:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
	if (acc_norm < 1e-6f) return; // Skip update if no acceleration data
 80135a6:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80135aa:	ed9f 7aec 	vldr	s14, [pc, #944]	@ 801395c <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x42c>
 80135ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b6:	f103 80f0 	bmi.w	801679a <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x326a>

	ax /= acc_norm;
 80135ba:	edd7 6a4a 	vldr	s13, [r7, #296]	@ 0x128
 80135be:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80135c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135c6:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
	ay /= acc_norm;
 80135ca:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 80135ce:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80135d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135d6:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
	az /= acc_norm;
 80135da:	edd7 6a48 	vldr	s13, [r7, #288]	@ 0x120
 80135de:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80135e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135e6:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120

	float sp = sinf(state.phi_rad);
 80135ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80135ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	edd3 7a00 	vldr	s15, [r3]
 80135f8:	eeb0 0a67 	vmov.f32	s0, s15
 80135fc:	f006 fc9e 	bl	8019f3c <sinf>
 8013600:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
	float cp = cosf(state.phi_rad);
 8013604:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013608:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	edd3 7a00 	vldr	s15, [r3]
 8013612:	eeb0 0a67 	vmov.f32	s0, s15
 8013616:	f006 fc4d 	bl	8019eb4 <cosf>
 801361a:	ed87 0a4d 	vstr	s0, [r7, #308]	@ 0x134
	if (fabs(cp) < 1e-6f) cp = 1e-6f;
 801361e:	ed97 0a4d 	vldr	s0, [r7, #308]	@ 0x134
 8013622:	f7ff f8d5 	bl	80127d0 <_ZSt4fabsf>
 8013626:	eef0 7a40 	vmov.f32	s15, s0
 801362a:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 801395c <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x42c>
 801362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013636:	bf4c      	ite	mi
 8013638:	2301      	movmi	r3, #1
 801363a:	2300      	movpl	r3, #0
 801363c:	b2db      	uxtb	r3, r3
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x118>
 8013642:	4bc7      	ldr	r3, [pc, #796]	@ (8013960 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x430>)
 8013644:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float st = sinf(state.theta_rad);
 8013648:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801364c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	edd3 7a01 	vldr	s15, [r3, #4]
 8013656:	eeb0 0a67 	vmov.f32	s0, s15
 801365a:	f006 fc6f 	bl	8019f3c <sinf>
 801365e:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114
	float ct = cosf(state.theta_rad);
 8013662:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013666:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013670:	eeb0 0a67 	vmov.f32	s0, s15
 8013674:	f006 fc1e 	bl	8019eb4 <cosf>
 8013678:	ed87 0a4c 	vstr	s0, [r7, #304]	@ 0x130
	if (fabs(ct) < 1e-6f) ct = 1e-6f;
 801367c:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 8013680:	f7ff f8a6 	bl	80127d0 <_ZSt4fabsf>
 8013684:	eef0 7a40 	vmov.f32	s15, s0
 8013688:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801395c <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x42c>
 801368c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013694:	bf4c      	ite	mi
 8013696:	2301      	movmi	r3, #1
 8013698:	2300      	movpl	r3, #0
 801369a:	b2db      	uxtb	r3, r3
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x176>
 80136a0:	4baf      	ldr	r3, [pc, #700]	@ (8013960 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x430>)
 80136a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	// sensor model
	float h[3] = {
			g * st,
 80136a6:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 80136aa:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8013964 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x434>
 80136ae:	ee67 7a87 	vmul.f32	s15, s15, s14
			-g * ct * sp,
			-g * ct * cp
	};
 80136b2:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
			-g * ct * sp,
 80136b6:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80136ba:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8013968 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x438>
 80136be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80136c2:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80136c6:	ee67 7a27 	vmul.f32	s15, s14, s15
	};
 80136ca:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
			-g * ct * cp
 80136ce:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80136d2:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8013968 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x438>
 80136d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80136da:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 80136de:	ee67 7a27 	vmul.f32	s15, s14, s15
	};
 80136e2:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

	// jacobian of h(x,u)
	float C[12] = {
 80136e6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80136ea:	2230      	movs	r2, #48	@ 0x30
 80136ec:	2100      	movs	r1, #0
 80136ee:	4618      	mov	r0, r3
 80136f0:	f008 fa35 	bl	801bb5e <memset>
	        0.0f, g * ct, 0.0f, 0.0f,
 80136f4:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80136f8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8013964 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x434>
 80136fc:	ee67 7a87 	vmul.f32	s15, s15, s14
	        -g * ct * cp, g * st * sp, 0.0f, 0.0f,
	        g * ct * sp, g * st * cp, 0.0f, 0.0f
	    };
 8013700:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
	        -g * ct * cp, g * st * sp, 0.0f, 0.0f,
 8013704:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8013708:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8013968 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x438>
 801370c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013710:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8013714:	ee67 7a27 	vmul.f32	s15, s14, s15
	    };
 8013718:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
	        -g * ct * cp, g * st * sp, 0.0f, 0.0f,
 801371c:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8013720:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8013964 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x434>
 8013724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013728:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 801372c:	ee67 7a27 	vmul.f32	s15, s14, s15
	    };
 8013730:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
	        g * ct * sp, g * st * cp, 0.0f, 0.0f
 8013734:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8013738:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8013964 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x434>
 801373c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013740:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8013744:	ee67 7a27 	vmul.f32	s15, s14, s15
	    };
 8013748:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	        g * ct * sp, g * st * cp, 0.0f, 0.0f
 801374c:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8013750:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8013964 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x434>
 8013754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013758:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 801375c:	ee67 7a27 	vmul.f32	s15, s14, s15
	    };
 8013760:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8


// S = (C*P*C' + R)
	float S[9];

	S[0] = state.R[0] +
 8013764:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013768:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	ed93 7a08 	vldr	s14, [r3, #32]
	       C[0]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013772:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8013776:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 801377a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801377e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013788:	ee26 6a27 	vmul.f32	s12, s12, s15
 801378c:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013794:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801379e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80137a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80137a6:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 80137aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80137b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80137bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80137c0:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 80137c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80137d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80137d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80137da:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[0] = state.R[0] +
 80137de:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[1]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 80137e2:	edd7 6a32 	vldr	s13, [r7, #200]	@ 0xc8
 80137e6:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 80137ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80137f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80137fc:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013800:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013804:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801380e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013812:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013816:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 801381a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801381e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013828:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801382c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013830:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013834:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013838:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013842:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013846:	ee76 7a27 	vadd.f32	s15, s12, s15
 801384a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[0]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 801384e:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[2]*(C[0]*state.P[2]  + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 8013852:	edd7 6a33 	vldr	s13, [r7, #204]	@ 0xcc
 8013856:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 801385a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801385e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013868:	ee26 6a27 	vmul.f32	s12, s12, s15
 801386c:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013870:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013874:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 801387e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013882:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013886:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 801388a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801388e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013898:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801389c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80138a0:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 80138a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80138b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80138b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80138ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[1]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 80138be:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[3]*(C[0]*state.P[3]  + C[1]*state.P[7]  + C[2]*state.P[11] + C[3]*state.P[15]);
 80138c2:	edd7 6a34 	vldr	s13, [r7, #208]	@ 0xd0
 80138c6:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 80138ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80138d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80138dc:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 80138e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80138ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80138f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80138f6:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 80138fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8013908:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801390c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013910:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013918:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8013922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013926:	ee76 7a27 	vadd.f32	s15, s12, s15
 801392a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[2]*(C[0]*state.P[2]  + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 801392e:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[0] = state.R[0] +
 8013932:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0

	S[1] = C[4]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013936:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 801393a:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801393e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013942:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801394c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013950:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8013954:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013958:	e008      	b.n	801396c <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x43c>
 801395a:	bf00      	nop
 801395c:	358637bd 	.word	0x358637bd
 8013960:	358637bd 	.word	0x358637bd
 8013964:	411cf5c3 	.word	0x411cf5c3
 8013968:	c11cf5c3 	.word	0xc11cf5c3
 801396c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8013976:	ee66 7a27 	vmul.f32	s15, s12, s15
 801397a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801397e:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8013982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013986:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8013990:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013998:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 801399c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80139aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80139ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139b2:	ee27 7a27 	vmul.f32	s14, s14, s15
	       C[5]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 80139b6:	edd7 6a36 	vldr	s13, [r7, #216]	@ 0xd8
 80139ba:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 80139be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80139cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80139d0:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 80139d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80139e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80139e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80139ea:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 80139ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80139fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013a00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013a04:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013a08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013a16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013a1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[1] = C[4]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013a22:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[6]*(C[0]*state.P[2]  + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 8013a26:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 8013a2a:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 8013a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013a3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013a40:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8013a52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013a56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013a5a:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 8013a5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013a6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013a70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013a74:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013a78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8013a86:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013a8a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[5]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 8013a92:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[7]*(C[0]*state.P[3]  + C[1]*state.P[7]  + C[2]*state.P[11] + C[3]*state.P[15]);
 8013a96:	edd7 6a38 	vldr	s13, [r7, #224]	@ 0xe0
 8013a9a:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 8013a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013aa2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8013aac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013ab0:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013ab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ab8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8013ac2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013ac6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013aca:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 8013ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ad2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8013adc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013ae0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013ae4:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013ae8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013aec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8013af6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013afa:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[6]*(C[0]*state.P[2]  + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 8013b02:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[1] = C[4]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013b06:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

	S[2] = C[8]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013b0a:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8013b0e:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8013b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013b20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013b24:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8013b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8013b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013b3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013b3e:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8013b42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8013b50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013b54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013b58:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8013b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8013b6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b72:	ee27 7a27 	vmul.f32	s14, s14, s15
	       C[9]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 8013b76:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 8013b7a:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 8013b7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013b8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013b90:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013b94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8013ba2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013ba6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013baa:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 8013bae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bb2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013bbc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013bc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013bc4:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013bc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013bd6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013bda:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[2] = C[8]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013be2:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[10]*(C[0]*state.P[2] + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 8013be6:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 8013bea:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 8013bee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bf2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013bfc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013c00:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8013c12:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013c16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013c1a:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 8013c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c22:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013c2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013c30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013c34:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013c38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8013c46:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013c4a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[9]*(C[0]*state.P[1]  + C[1]*state.P[5]  + C[2]*state.P[9]  + C[3]*state.P[13]) +
 8013c52:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[11]*(C[0]*state.P[3] + C[1]*state.P[7]  + C[2]*state.P[11] + C[3]*state.P[15]);
 8013c56:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8013c5a:	ed97 6a31 	vldr	s12, [r7, #196]	@ 0xc4
 8013c5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8013c6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013c70:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 8013c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8013c82:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013c86:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013c8a:	edd7 5a33 	vldr	s11, [r7, #204]	@ 0xcc
 8013c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8013c9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013ca0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013ca4:	edd7 5a34 	vldr	s11, [r7, #208]	@ 0xd0
 8013ca8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8013cb6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013cba:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[10]*(C[0]*state.P[2] + C[1]*state.P[6]  + C[2]*state.P[10] + C[3]*state.P[14]) +
 8013cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[2] = C[8]*(C[0]*state.P[0]  + C[1]*state.P[4]  + C[2]*state.P[8]  + C[3]*state.P[12]) +
 8013cc6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

	S[3] = S[1]; // S is symmetric, so S[3] = S[1]
 8013cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	S[4] = state.R[1] +
 8013cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
	       C[4]*(C[4]*state.P[0]  + C[5]*state.P[4]  + C[6]*state.P[8]  + C[7]*state.P[12]) +
 8013ce0:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 8013ce4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013cf6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013cfa:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013cfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d02:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8013d0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013d10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013d14:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013d18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8013d26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013d2a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013d2e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8013d40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013d44:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[4] = state.R[1] +
 8013d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[5]*(C[4]*state.P[1]  + C[5]*state.P[5]  + C[6]*state.P[9]  + C[7]*state.P[13]) +
 8013d50:	edd7 6a36 	vldr	s13, [r7, #216]	@ 0xd8
 8013d54:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013d66:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013d6a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013d6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d72:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8013d7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013d80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013d84:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013d88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013d96:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013d9a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013d9e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013da6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013db0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013db4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[4]*(C[4]*state.P[0]  + C[5]*state.P[4]  + C[6]*state.P[8]  + C[7]*state.P[12]) +
 8013dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[6]*(C[4]*state.P[2]  + C[5]*state.P[6]  + C[6]*state.P[10] + C[7]*state.P[14]) +
 8013dc0:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 8013dc4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013dc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013dd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013dda:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013dde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013de2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8013dec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013df0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013df4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013e06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013e0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013e0e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013e12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8013e20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013e24:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[5]*(C[4]*state.P[1]  + C[5]*state.P[5]  + C[6]*state.P[9]  + C[7]*state.P[13]) +
 8013e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[7]*(C[4]*state.P[3]  + C[5]*state.P[7]  + C[6]*state.P[11] + C[7]*state.P[15]);
 8013e30:	edd7 6a38 	vldr	s13, [r7, #224]	@ 0xe0
 8013e34:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8013e46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013e4a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8013e5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013e60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013e64:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8013e76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013e7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013e7e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013e82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e86:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8013e90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013e94:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[6]*(C[4]*state.P[2]  + C[5]*state.P[6]  + C[6]*state.P[10] + C[7]*state.P[14]) +
 8013e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[4] = state.R[1] +
 8013ea0:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0

	S[5] = C[8]*(C[4]*state.P[0]  + C[5]*state.P[4]  + C[6]*state.P[8]  + C[7]*state.P[12]) +
 8013ea4:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8013ea8:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 8013eac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013eba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013ebe:	ed97 6a36 	vldr	s12, [r7, #216]	@ 0xd8
 8013ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ec6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8013ed0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013ed4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013ed8:	ed97 6a37 	vldr	s12, [r7, #220]	@ 0xdc
 8013edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ee0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8013eea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013eee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013ef2:	ed97 6a38 	vldr	s12, [r7, #224]	@ 0xe0
 8013ef6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013efa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8013f04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       C[9]*(C[4]*state.P[1]  + C[5]*state.P[5]  + C[6]*state.P[9]  + C[7]*state.P[13]) +
 8013f10:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 8013f14:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013f18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013f26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013f2a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013f2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8013f3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013f40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013f44:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013f48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8013f56:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013f5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013f5e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013f62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8013f70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013f74:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[5] = C[8]*(C[4]*state.P[0]  + C[5]*state.P[4]  + C[6]*state.P[8]  + C[7]*state.P[12]) +
 8013f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[10]*(C[4]*state.P[2] + C[5]*state.P[6]  + C[6]*state.P[10] + C[7]*state.P[14]) +
 8013f80:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 8013f84:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8013f96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013f9a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8013f9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fa2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8013fac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013fb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013fb4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8013fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013fc6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013fca:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013fce:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8013fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8013fe0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013fe4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[9]*(C[4]*state.P[1]  + C[5]*state.P[5]  + C[6]*state.P[9]  + C[7]*state.P[13]) +
 8013fec:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[11]*(C[4]*state.P[3] + C[5]*state.P[7]  + C[6]*state.P[11] + C[7]*state.P[15]);
 8013ff0:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8013ff4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8013ff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ffc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014006:	ee26 6a27 	vmul.f32	s12, s12, s15
 801400a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801400e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014012:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801401c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014020:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014024:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801402c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014036:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801403a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801403e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014042:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014046:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8014050:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014054:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014058:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[10]*(C[4]*state.P[2] + C[5]*state.P[6]  + C[6]*state.P[10] + C[7]*state.P[14]) +
 801405c:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[5] = C[8]*(C[4]*state.P[0]  + C[5]*state.P[4]  + C[6]*state.P[8]  + C[7]*state.P[12]) +
 8014060:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

	S[6] = S[2]; // S is symmetric, so S[6] = S[2]
 8014064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	S[7] = S[5]; // S is symmetric, so S[7] = S[5]
 801406c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014070:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	S[8] = state.R[2] +
 8014074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014078:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
	       C[8]*(C[8]*state.P[0]  + C[9]*state.P[4]  + C[10]*state.P[8]  + C[11]*state.P[12]) +
 8014082:	edd7 6a39 	vldr	s13, [r7, #228]	@ 0xe4
 8014086:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 801408a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801408e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8014098:	ee26 6a27 	vmul.f32	s12, s12, s15
 801409c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80140a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80140ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80140b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80140b6:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80140ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80140c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80140cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80140d0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80140d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80140e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80140e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80140ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
	S[8] = state.R[2] +
 80140ee:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[9]*(C[8]*state.P[1]  + C[9]*state.P[5]  + C[10]*state.P[9]  + C[11]*state.P[13]) +
 80140f2:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 80140f6:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80140fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014108:	ee26 6a27 	vmul.f32	s12, s12, s15
 801410c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014114:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801411e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014122:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014126:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801412a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801412e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014138:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801413c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014140:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014148:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8014152:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014156:	ee76 7a27 	vadd.f32	s15, s12, s15
 801415a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[8]*(C[8]*state.P[0]  + C[9]*state.P[4]  + C[10]*state.P[8]  + C[11]*state.P[12]) +
 801415e:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[10]*(C[8]*state.P[2] + C[9]*state.P[6]  + C[10]*state.P[10] + C[11]*state.P[14]) +
 8014162:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 8014166:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 801416a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801416e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8014178:	ee26 6a27 	vmul.f32	s12, s12, s15
 801417c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014184:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 801418e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014192:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014196:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801419a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801419e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80141a8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80141ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80141b0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80141b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80141c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80141c6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80141ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[9]*(C[8]*state.P[1]  + C[9]*state.P[5]  + C[10]*state.P[9]  + C[11]*state.P[13]) +
 80141ce:	ee37 7a27 	vadd.f32	s14, s14, s15
	       C[11]*(C[8]*state.P[3] + C[9]*state.P[7]  + C[10]*state.P[11] + C[11]*state.P[15]);
 80141d2:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 80141d6:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80141da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80141e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80141ec:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80141f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80141fe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014202:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014206:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801420a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801420e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014218:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801421c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014220:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014224:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014228:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8014232:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014236:	ee76 7a27 	vadd.f32	s15, s12, s15
 801423a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       C[10]*(C[8]*state.P[2] + C[9]*state.P[6]  + C[10]*state.P[10] + C[11]*state.P[14]) +
 801423e:	ee77 7a27 	vadd.f32	s15, s14, s15
	S[8] = state.R[2] +
 8014242:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0


	// Calculating inverse of S

	float detS = S[0]*(S[4]*S[8] - S[5]*S[7]) - S[1]*(S[3]*S[8] - S[5]*S[6]) + S[2]*(S[3]*S[7] - S[4]*S[6]);
 8014246:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 801424a:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 801424e:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8014252:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014256:	ed97 6a2d 	vldr	s12, [r7, #180]	@ 0xb4
 801425a:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 801425e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014262:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014266:	ee27 7a27 	vmul.f32	s14, s14, s15
 801426a:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 801426e:	ed97 6a2b 	vldr	s12, [r7, #172]	@ 0xac
 8014272:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8014276:	ee26 6a27 	vmul.f32	s12, s12, s15
 801427a:	edd7 5a2d 	vldr	s11, [r7, #180]	@ 0xb4
 801427e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8014282:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014286:	ee76 7a67 	vsub.f32	s15, s12, s15
 801428a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801428e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014292:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8014296:	ed97 6a2b 	vldr	s12, [r7, #172]	@ 0xac
 801429a:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 801429e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80142a2:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 80142a6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80142aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80142ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80142b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80142b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142ba:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110

	if (fabs(detS) < 1e-6f) return;
 80142be:	ed97 0a44 	vldr	s0, [r7, #272]	@ 0x110
 80142c2:	f7fe fa85 	bl	80127d0 <_ZSt4fabsf>
 80142c6:	eef0 7a40 	vmov.f32	s15, s0
 80142ca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80142e8 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0xdb8>
 80142ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d6:	bf4c      	ite	mi
 80142d8:	2301      	movmi	r3, #1
 80142da:	2300      	movpl	r3, #0
 80142dc:	b2db      	uxtb	r3, r3
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f042 825d 	bne.w	801679e <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x326e>
 80142e4:	e002      	b.n	80142ec <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0xdbc>
 80142e6:	bf00      	nop
 80142e8:	358637bd 	.word	0x358637bd

	float invDet = 1.0f / detS;
 80142ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80142f0:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 80142f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142f8:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	float Sinv[9];
	Sinv[0] = invDet * (S[4]*S[8] - S[5]*S[7]);
 80142fc:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8014300:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8014304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014308:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 801430c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8014310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014318:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 801431c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014320:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	Sinv[1] = -invDet * (S[1]*S[8] - S[2]*S[7]);
 8014324:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8014328:	eeb1 7a67 	vneg.f32	s14, s15
 801432c:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 8014330:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8014334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014338:	ed97 6a2a 	vldr	s12, [r7, #168]	@ 0xa8
 801433c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8014340:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014348:	ee67 7a27 	vmul.f32	s15, s14, s15
 801434c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	Sinv[2] = invDet * (S[1]*S[5] - S[2]*S[4]);
 8014350:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8014354:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8014358:	ee27 7a27 	vmul.f32	s14, s14, s15
 801435c:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8014360:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014368:	ee37 7a67 	vsub.f32	s14, s14, s15
 801436c:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8014370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014374:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	Sinv[3] = -invDet * (S[3]*S[8] - S[5]*S[6]);
 8014378:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 801437c:	eeb1 7a67 	vneg.f32	s14, s15
 8014380:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8014384:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8014388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801438c:	ed97 6a2d 	vldr	s12, [r7, #180]	@ 0xb4
 8014390:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8014394:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014398:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801439c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143a0:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	Sinv[4] = invDet * (S[0]*S[8] - S[2]*S[6]);
 80143a4:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80143a8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80143ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143b0:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80143b4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80143b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80143bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80143c0:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 80143c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143c8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	Sinv[5] = -invDet * (S[0]*S[5] - S[2]*S[3]);
 80143cc:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 80143d0:	eeb1 7a67 	vneg.f32	s14, s15
 80143d4:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80143d8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80143dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80143e0:	ed97 6a2a 	vldr	s12, [r7, #168]	@ 0xa8
 80143e4:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80143e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80143ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80143f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143f4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	Sinv[6] = invDet * (S[3]*S[7] - S[4]*S[6]);
 80143f8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80143fc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8014400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014404:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 8014408:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 801440c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014414:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8014418:	ee67 7a27 	vmul.f32	s15, s14, s15
 801441c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	Sinv[7] = -invDet * (S[0]*S[7] - S[1]*S[6]);
 8014420:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8014424:	eeb1 7a67 	vneg.f32	s14, s15
 8014428:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 801442c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8014430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014434:	ed97 6a29 	vldr	s12, [r7, #164]	@ 0xa4
 8014438:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 801443c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014440:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014448:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	Sinv[8] = invDet * (S[0]*S[4] - S[1]*S[3]);
 801444c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8014450:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014458:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 801445c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8014460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014468:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 801446c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014470:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

	// Computing Kalman gain
	float K[12]; // Kalman Gain K = P*C'*Ginv

	K[0] = Sinv[0]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 8014474:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8014478:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801447c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014480:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801448a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801448e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014496:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80144a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80144a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80144a8:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80144ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80144ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80144be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80144c2:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80144c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80144d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80144d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144dc:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[3]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 80144e0:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80144e4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80144e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80144f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80144fa:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 80144fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014502:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801450c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014510:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014514:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014518:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801451c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8014526:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801452a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801452e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014532:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014536:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014540:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014544:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014548:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[0] = Sinv[0]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 801454c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[6]*(C[8]*state.P[0]  + C[9]*state.P[1]  + C[10]*state.P[2] + C[11]*state.P[3]);
 8014550:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8014554:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014558:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801455c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8014566:	ee26 6a27 	vmul.f32	s12, s12, s15
 801456a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801456e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014572:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801457c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014580:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014584:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801458c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8014596:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801459a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801459e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80145a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80145b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80145b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80145b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[3]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 80145bc:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[0] = Sinv[0]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 80145c0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	K[1] = Sinv[1]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 80145c4:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80145c8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80145cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80145da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80145de:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 80145e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80145f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80145f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80145f8:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80145fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014600:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801460a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801460e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014612:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014616:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801461a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014624:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801462c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[4]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 8014630:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8014634:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014638:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801463c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8014646:	ee26 6a27 	vmul.f32	s12, s12, s15
 801464a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801464e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014652:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801465c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014660:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014664:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014668:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801466c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8014676:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801467a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801467e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014686:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014690:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014694:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014698:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[1] = Sinv[1]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 801469c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[7]*(C[8]*state.P[0]  + C[9]*state.P[1]  + C[10]*state.P[2] + C[11]*state.P[3]);
 80146a0:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80146a4:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80146a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80146b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80146ba:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80146be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80146cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80146d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80146d4:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80146d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80146e6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80146ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 80146ee:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80146f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014700:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014704:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014708:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[4]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 801470c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[1] = Sinv[1]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 8014710:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	K[2] = Sinv[2]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 8014714:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8014718:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801471c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014720:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801472a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801472e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014736:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014740:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014744:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014748:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801474c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014750:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801475a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801475e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014762:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801476a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014774:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801477c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[5]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 8014780:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8014784:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014788:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801478c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8014796:	ee26 6a27 	vmul.f32	s12, s12, s15
 801479a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801479e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80147ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80147b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80147b4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 80147b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80147c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80147ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80147ce:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80147d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80147e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80147e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80147e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[2] = Sinv[2]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 80147ec:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[8]*(C[8]*state.P[0]  + C[9]*state.P[1]  + C[10]*state.P[2] + C[11]*state.P[3]);
 80147f0:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 80147f4:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80147f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8014806:	ee26 6a27 	vmul.f32	s12, s12, s15
 801480a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801480e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014812:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801481c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014820:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014824:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014828:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801482c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8014836:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801483a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801483e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014842:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014846:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8014850:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014854:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014858:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[5]*(C[4]*state.P[0]  + C[5]*state.P[1]  + C[6]*state.P[2]  + C[7]*state.P[3]) +
 801485c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[2] = Sinv[2]*(C[0]*state.P[0]  + C[1]*state.P[1]  + C[2]*state.P[2]  + C[3]*state.P[3]) +
 8014860:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	K[3] = Sinv[0]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014864:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8014868:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801486c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014870:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801487a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801487e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014882:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014886:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014890:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014894:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014898:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801489c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80148aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80148ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80148b2:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80148b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80148c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80148c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80148cc:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[3]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 80148d0:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80148d4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80148d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80148e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80148ea:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 80148ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80148fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014900:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014904:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801490c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014916:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801491a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801491e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014922:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014926:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014930:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014934:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014938:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[3] = Sinv[0]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 801493c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[6]*(C[8]*state.P[4]  + C[9]*state.P[5]  + C[10]*state.P[6] + C[11]*state.P[7]);
 8014940:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8014944:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801494c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014956:	ee26 6a27 	vmul.f32	s12, s12, s15
 801495a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801495e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014962:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801496c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014970:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014974:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014978:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801497c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014986:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801498a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801498e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014992:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014996:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80149a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80149a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80149a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[3]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 80149ac:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[3] = Sinv[0]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 80149b0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

	K[4] = Sinv[1]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 80149b4:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80149b8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80149bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80149ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80149ce:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 80149d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80149e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80149e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80149e8:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80149ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80149fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80149fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014a02:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014a06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014a14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[4]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 8014a20:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8014a24:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014a28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014a36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014a3a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8014a3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014a4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014a50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014a54:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014a66:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014a6a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014a6e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014a72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014a84:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[4] = Sinv[1]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[7]*(C[8]*state.P[4]  + C[9]*state.P[5]  + C[10]*state.P[6] + C[11]*state.P[7]);
 8014a90:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8014a94:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014a98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014aa6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014aaa:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014aae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ab2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014ac4:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014acc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014ad6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014ada:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014ade:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ae6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014af0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014af4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[4]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 8014afc:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[4] = Sinv[1]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014b00:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

	K[5] = Sinv[2]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014b04:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8014b08:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8014b0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014b1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014b1e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014b22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014b30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014b38:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8014b3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014b4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014b4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014b52:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014b56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014b64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[5]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 8014b70:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8014b74:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014b86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014b8a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8014b8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014b9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014ba0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014ba4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014ba8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014bb6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014bba:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014bbe:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014bc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014bd0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014bd4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[5] = Sinv[2]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[8]*(C[8]*state.P[4]  + C[9]*state.P[5]  + C[10]*state.P[6] + C[11]*state.P[7]);
 8014be0:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 8014be4:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8014bf6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014bfa:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014bfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c02:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8014c0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014c10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014c14:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014c18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8014c26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014c2a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014c2e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014c32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8014c40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014c44:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[5]*(C[4]*state.P[4]  + C[5]*state.P[5]  + C[6]*state.P[6]  + C[7]*state.P[7]) +
 8014c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[5] = Sinv[2]*(C[0]*state.P[4]  + C[1]*state.P[5]  + C[2]*state.P[6]  + C[3]*state.P[7]) +
 8014c50:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	K[6] = Sinv[0]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014c54:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8014c58:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8014c5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014c6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014c6e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014c72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014c80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014c84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014c88:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8014c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014c9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014ca2:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014ca6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014caa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014cb4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[3]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 8014cc0:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8014cc4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ccc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014cd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014cda:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8014cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ce2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014cec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014cf0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014cf4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014d06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014d0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014d0e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014d20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014d24:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[6] = Sinv[0]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[6]*(C[8]*state.P[8]  + C[9]*state.P[9]  + C[10]*state.P[10]+ C[11]*state.P[11]);
 8014d30:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8014d34:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014d38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014d46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014d4a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014d5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014d60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014d64:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014d76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014d7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014d7e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014d82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d86:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014d90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014d94:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[3]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 8014d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[6] = Sinv[0]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014da0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

	K[7] = Sinv[1]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014da4:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8014da8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8014dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014db0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014dba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014dbe:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014dd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014dd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014dd8:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8014ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014de0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014dea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014dee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014df2:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014e04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[4]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 8014e10:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8014e14:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014e26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014e2a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8014e2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014e3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014e40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014e44:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014e48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014e56:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014e5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014e5e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014e70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014e74:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[7] = Sinv[1]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[7]*(C[8]*state.P[8]  + C[9]*state.P[9]  + C[10]*state.P[10]+ C[11]*state.P[11]);
 8014e80:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8014e84:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014e88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014e96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014e9a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ea2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014eac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014eb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014eb4:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8014eb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ebc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014ec6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014eca:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014ece:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8014ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ed6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014ee0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014ee4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[4]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 8014eec:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[7] = Sinv[1]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014ef0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	K[8] = Sinv[2]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014ef4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8014ef8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8014efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014f0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014f0e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8014f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014f20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014f24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014f28:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8014f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014f3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014f3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014f42:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8014f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014f54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[5]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 8014f60:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8014f64:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8014f68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014f76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014f7a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8014f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014f8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014f90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014f94:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8014f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8014fa6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014faa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8014fae:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8014fb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8014fc0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014fc4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[8] = Sinv[2]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8014fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[8]*(C[8]*state.P[8]  + C[9]*state.P[9]  + C[10]*state.P[10]+ C[11]*state.P[11]);
 8014fd0:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 8014fd4:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8014fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8014fe6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014fea:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8014fee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ff2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8014ffc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015000:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015004:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801500c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8015016:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801501a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801501e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015022:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015026:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8015030:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015034:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015038:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[5]*(C[4]*state.P[8]  + C[5]*state.P[9]  + C[6]*state.P[10] + C[7]*state.P[11]) +
 801503c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[8] = Sinv[2]*(C[0]*state.P[8]  + C[1]*state.P[9]  + C[2]*state.P[10] + C[3]*state.P[11]) +
 8015040:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	K[9] = Sinv[0]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 8015044:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8015048:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801504c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015050:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 801505a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801505e:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015066:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8015070:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015074:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015078:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801507c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015080:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 801508a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801508e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015092:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015096:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801509a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80150a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80150a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80150ac:	ee27 7a27 	vmul.f32	s14, s14, s15
	       Sinv[3]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 80150b0:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80150b4:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80150b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80150c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80150ca:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 80150ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80150dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80150e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80150e4:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 80150e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80150f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80150fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80150fe:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015106:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8015110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015114:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015118:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[9] = Sinv[0]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 801511c:	ee37 7a27 	vadd.f32	s14, s14, s15
	       Sinv[6]*(C[8]*state.P[12] + C[9]*state.P[13] + C[10]*state.P[14]+ C[11]*state.P[15]);
 8015120:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 8015124:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801512c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8015136:	ee26 6a27 	vmul.f32	s12, s12, s15
 801513a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801513e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015142:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801514c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015150:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015154:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015158:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801515c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8015166:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801516a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801516e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015172:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015176:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8015180:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015184:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015188:	ee66 7aa7 	vmul.f32	s15, s13, s15
	       Sinv[3]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 801518c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[9] = Sinv[0]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 8015190:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

	K[10] = Sinv[1]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 8015194:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8015198:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801519c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80151aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80151ae:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 80151b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80151c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80151c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80151c8:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80151cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80151da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80151de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80151e2:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80151e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80151f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80151f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80151fc:	ee27 7a27 	vmul.f32	s14, s14, s15
	        Sinv[4]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 8015200:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8015204:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015208:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801520c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8015216:	ee26 6a27 	vmul.f32	s12, s12, s15
 801521a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801521e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015222:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801522c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015230:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015234:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015238:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801523c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8015246:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801524a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801524e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015256:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8015260:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015264:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015268:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[10] = Sinv[1]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 801526c:	ee37 7a27 	vadd.f32	s14, s14, s15
	        Sinv[7]*(C[8]*state.P[12] + C[9]*state.P[13] + C[10]*state.P[14]+ C[11]*state.P[15]);
 8015270:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8015274:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015278:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801527c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8015286:	ee26 6a27 	vmul.f32	s12, s12, s15
 801528a:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801528e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015292:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801529c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80152a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80152a4:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80152a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80152b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80152ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80152be:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80152c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80152d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80152d4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80152d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	        Sinv[4]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 80152dc:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[10] = Sinv[1]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 80152e0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	K[11] = Sinv[2]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 80152e4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80152e8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80152ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80152fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80152fe:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015306:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8015310:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015314:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015318:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801531c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015320:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 801532a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801532e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015332:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015336:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801533a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8015344:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801534c:	ee27 7a27 	vmul.f32	s14, s14, s15
	        Sinv[5]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 8015350:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8015354:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015358:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801535c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8015366:	ee26 6a27 	vmul.f32	s12, s12, s15
 801536a:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801536e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015372:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801537c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015380:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015384:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801538c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8015396:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801539a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801539e:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80153a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80153b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80153b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80153b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	K[11] = Sinv[2]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 80153bc:	ee37 7a27 	vadd.f32	s14, s14, s15
	        Sinv[8]*(C[8]*state.P[12] + C[9]*state.P[13] + C[10]*state.P[14]+ C[11]*state.P[15]);
 80153c0:	edd7 6a27 	vldr	s13, [r7, #156]	@ 0x9c
 80153c4:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80153c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80153d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80153da:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80153de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80153ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80153f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80153f4:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80153f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8015406:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801540a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801540e:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015416:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8015420:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015424:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015428:	ee66 7aa7 	vmul.f32	s15, s13, s15
	        Sinv[5]*(C[4]*state.P[12] + C[5]*state.P[13] + C[6]*state.P[14] + C[7]*state.P[15]) +
 801542c:	ee77 7a27 	vadd.f32	s15, s14, s15
	K[11] = Sinv[2]*(C[0]*state.P[12] + C[1]*state.P[13] + C[2]*state.P[14] + C[3]*state.P[15]) +
 8015430:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78



	// Applying correction to state matrix x = x + K*(y - h(x,u))
	float y0 = ax - h[0] ;
 8015434:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8015438:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 801543c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015440:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
	float y1 = ay - h[1];
 8015444:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8015448:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 801544c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015450:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	float y2 = az - h[2];
 8015454:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8015458:	ed97 7a48 	vldr	s14, [r7, #288]	@ 0x120
 801545c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015460:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100

	state.phi_rad += K[0]*y0 + K[1]*y1 + K[2]*y2;
 8015464:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015468:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	ed93 7a00 	vldr	s14, [r3]
 8015472:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8015476:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 801547a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801547e:	ed97 6a14 	vldr	s12, [r7, #80]	@ 0x50
 8015482:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8015486:	ee66 7a27 	vmul.f32	s15, s12, s15
 801548a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801548e:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8015492:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8015496:	ee66 7a27 	vmul.f32	s15, s12, s15
 801549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801549e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	edc3 7a00 	vstr	s15, [r3]
	state.theta_rad += K[3]*y0 + K[4]*y1 + K[5]*y2;
 80154b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80154be:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80154c2:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 80154c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80154ca:	ed97 6a17 	vldr	s12, [r7, #92]	@ 0x5c
 80154ce:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80154d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80154d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80154da:	ed97 6a18 	vldr	s12, [r7, #96]	@ 0x60
 80154de:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80154e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80154e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80154f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	edc3 7a01 	vstr	s15, [r3, #4]
	state.bias_phi += K[6]*y0 + K[7]*y1 + K[8]*y2;  // Row 2 of K
 80154fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015500:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	ed93 7a02 	vldr	s14, [r3, #8]
 801550a:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 801550e:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8015512:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015516:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 801551a:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 801551e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015522:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015526:	ed97 6a1b 	vldr	s12, [r7, #108]	@ 0x6c
 801552a:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 801552e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015536:	ee77 7a27 	vadd.f32	s15, s14, s15
 801553a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801553e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	edc3 7a02 	vstr	s15, [r3, #8]
	state.bias_theta += K[9]*y0 + K[10]*y1 + K[11]*y2; // Row 3 of K
 8015548:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801554c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	ed93 7a03 	vldr	s14, [r3, #12]
 8015556:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 801555a:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 801555e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015562:	ed97 6a1d 	vldr	s12, [r7, #116]	@ 0x74
 8015566:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 801556a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801556e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015572:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 8015576:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 801557a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015586:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801558a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	edc3 7a03 	vstr	s15, [r3, #12]

	float Pt[16];

	Pt[0]  = - state.P[0]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 8015594:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015598:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80155a2:	eeb1 7a67 	vneg.f32	s14, s15
 80155a6:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80155aa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80155ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80155b2:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80155b6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80155ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80155be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80155c2:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80155c6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80155ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80155ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80155d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80155d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80155da:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[4]*(C[1]*K[0]  + C[5]*K[1]  + C[9]*K[2])
 80155de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80155e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80155ec:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 80155f0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80155f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80155f8:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 80155fc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015600:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015604:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015608:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801560c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015610:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015614:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801561c:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[8]*(C[2]*K[0]  + C[6]*K[1]  + C[10]*K[2])
 8015620:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015624:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801562e:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015632:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015636:	ee26 6a27 	vmul.f32	s12, s12, s15
 801563a:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 801563e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015642:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015646:	ee36 6a27 	vadd.f32	s12, s12, s15
 801564a:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801564e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015652:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015656:	ee76 7a27 	vadd.f32	s15, s12, s15
 801565a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801565e:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[12]*(C[3]*K[0] + C[7]*K[1]  + C[11]*K[2]);
 8015662:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015666:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8015670:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015674:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015678:	ee26 6a27 	vmul.f32	s12, s12, s15
 801567c:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015680:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015684:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015688:	ee36 6a27 	vadd.f32	s12, s12, s15
 801568c:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015690:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015694:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015698:	ee76 7a27 	vadd.f32	s15, s12, s15
 801569c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80156a0:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[0]  = - state.P[0]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80156a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156ac:	edc3 7a00 	vstr	s15, [r3]

	Pt[1]  = - state.P[1]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80156b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80156be:	eeb1 7a67 	vneg.f32	s14, s15
 80156c2:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80156c6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80156ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80156ce:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80156d2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80156d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80156da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80156de:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80156e2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80156e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80156ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80156ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80156f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80156f6:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[5]*(C[1]*K[0]  + C[5]*K[1]  + C[9]*K[2])
 80156fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8015708:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 801570c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015714:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015718:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801571c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015720:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015724:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015728:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801572c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015730:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015738:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[9]*(C[2]*K[0]  + C[6]*K[1]  + C[10]*K[2])
 801573c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015740:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801574a:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801574e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015752:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015756:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 801575a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801575e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015762:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015766:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801576a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801576e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015772:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801577a:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[13]*(C[3]*K[0] + C[7]*K[1]  + C[11]*K[2]);
 801577e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015782:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801578c:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015790:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015794:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015798:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 801579c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80157a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80157a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80157a8:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80157ac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80157b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80157b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80157b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80157bc:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[1]  = - state.P[1]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80157c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157c8:	edc3 7a01 	vstr	s15, [r3, #4]

	Pt[2]  = - state.P[2]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80157cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80157da:	eeb1 7a67 	vneg.f32	s14, s15
 80157de:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80157e2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80157e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80157ea:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80157ee:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80157f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80157f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80157fa:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80157fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801580e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015812:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[6]*(C[1]*K[0]  + C[5]*K[1]  + C[9]*K[2])
 8015816:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801581a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8015824:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015828:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801582c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015830:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015834:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015838:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801583c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015840:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015844:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015848:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801584c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015854:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[10]*(C[2]*K[0] + C[6]*K[1]  + C[10]*K[2])
 8015858:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801585c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8015866:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801586a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801586e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015872:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015876:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801587a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801587e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015882:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015886:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801588a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801588e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015896:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[14]*(C[3]*K[0] + C[7]*K[1]  + C[11]*K[2]);
 801589a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801589e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80158a8:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80158ac:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80158b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80158b4:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80158b8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80158bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80158c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80158c4:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80158c8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80158cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80158d0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80158d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80158d8:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[2]  = - state.P[2]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80158dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80158e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158e4:	edc3 7a02 	vstr	s15, [r3, #8]

	Pt[3]  = - state.P[3]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80158e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80158ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80158f6:	eeb1 7a67 	vneg.f32	s14, s15
 80158fa:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80158fe:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015902:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015906:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 801590a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801590e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015912:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015916:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 801591a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801591e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801592a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801592e:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[7]*(C[1]*K[0]  + C[5]*K[1]  + C[9]*K[2])
 8015932:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015936:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8015940:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015944:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8015948:	ee26 6a27 	vmul.f32	s12, s12, s15
 801594c:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015950:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015954:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015958:	ee36 6a27 	vadd.f32	s12, s12, s15
 801595c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015960:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8015964:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015968:	ee76 7a27 	vadd.f32	s15, s12, s15
 801596c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015970:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[11]*(C[2]*K[0] + C[6]*K[1]  + C[10]*K[2])
 8015974:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015978:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8015982:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015986:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801598a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801598e:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015992:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8015996:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801599a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801599e:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80159a2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80159a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80159aa:	ee76 7a27 	vadd.f32	s15, s12, s15
 80159ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159b2:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[15]*(C[3]*K[0] + C[7]*K[1]  + C[11]*K[2]);
 80159b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80159ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80159c4:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80159c8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80159cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80159d0:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80159d4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80159d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80159dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80159e0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80159e4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80159e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80159ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 80159f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159f4:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[3]  = - state.P[3]*(C[0]*K[0]  + C[4]*K[1]  + C[8]*K[2]  - 1.0f)
 80159f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80159fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a00:	edc3 7a03 	vstr	s15, [r3, #12]

	Pt[4]  = - state.P[0]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015a08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8015a12:	eeb1 7a67 	vneg.f32	s14, s15
 8015a16:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015a1a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015a1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015a22:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015a26:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015a2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015a2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015a32:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015a36:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015a3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a42:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[4]*(C[1]*K[3]  + C[5]*K[4]  + C[9]*K[5]  - 1.0f)
 8015a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015a4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8015a54:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015a58:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015a5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015a60:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015a64:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015a68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015a6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015a70:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015a74:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015a78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015a7c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015a80:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015a84:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a8c:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[8]*(C[2]*K[3]  + C[6]*K[4]  + C[10]*K[5])
 8015a90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015a94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8015a9e:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015aa2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015aa6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015aaa:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015aae:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015ab2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015ab6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015aba:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015abe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015ac2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015ac6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ace:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[12]*(C[3]*K[3] + C[7]*K[4]  + C[11]*K[5]);
 8015ad2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ad6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8015ae0:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015ae4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015ae8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015aec:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015af0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015af4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015af8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015afc:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015b00:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015b04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015b08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b10:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[4]  = - state.P[0]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015b14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015b18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015b1c:	edc3 7a04 	vstr	s15, [r3, #16]

	Pt[5]  = - state.P[1]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015b20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015b24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8015b2e:	eeb1 7a67 	vneg.f32	s14, s15
 8015b32:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015b36:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015b3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015b3e:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015b42:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015b46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015b4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015b4e:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015b52:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015b56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[5]*(C[1]*K[3]  + C[5]*K[4]  + C[9]*K[5]  - 1.0f)
 8015b62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015b66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8015b70:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015b74:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015b78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015b7c:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015b80:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015b84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015b88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015b8c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015b90:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015b94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015b98:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015b9c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015ba0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[9]*(C[2]*K[3]  + C[6]*K[4]  + C[10]*K[5])
 8015bac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015bb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8015bba:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015bbe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015bc2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015bc6:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015bca:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015bce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015bd2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015bd6:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015bda:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015bde:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015be2:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015bea:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[13]*(C[3]*K[3] + C[7]*K[4]  + C[11]*K[5]);
 8015bee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015bf2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8015bfc:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015c00:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015c04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015c08:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015c0c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015c10:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015c14:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015c18:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015c1c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015c20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015c24:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[5]  = - state.P[1]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015c34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015c38:	edc3 7a05 	vstr	s15, [r3, #20]

	Pt[6]  = - state.P[2]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015c40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8015c4a:	eeb1 7a67 	vneg.f32	s14, s15
 8015c4e:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015c52:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015c56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015c5a:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015c5e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015c62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015c66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015c6a:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015c6e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015c72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[6]*(C[1]*K[3]  + C[5]*K[4]  + C[9]*K[5]  - 1.0f)
 8015c7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015c82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8015c8c:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015c90:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015c94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015c98:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015c9c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015ca0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015ca4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015ca8:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015cac:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015cb0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015cb4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015cb8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015cbc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[10]*(C[2]*K[3] + C[6]*K[4]  + C[10]*K[5])
 8015cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ccc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8015cd6:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015cda:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015cde:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015ce2:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015ce6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015cea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015cee:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015cf2:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015cf6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015cfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015cfe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d06:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[14]*(C[3]*K[3] + C[7]*K[4]  + C[11]*K[5]);
 8015d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015d0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8015d18:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015d1c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015d20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015d24:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015d28:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015d2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015d30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015d34:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015d38:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015d3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015d40:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d48:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[6]  = - state.P[2]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015d50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015d54:	edc3 7a06 	vstr	s15, [r3, #24]

	Pt[7]  = - state.P[3]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015d5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8015d66:	eeb1 7a67 	vneg.f32	s14, s15
 8015d6a:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015d6e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015d72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015d76:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015d7a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015d7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015d82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015d86:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015d8a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015d8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d96:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[7]*(C[1]*K[3]  + C[5]*K[4]  + C[9]*K[5]  - 1.0f)
 8015d9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015d9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8015da8:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015dac:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015db0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015db4:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015db8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015dbc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015dc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015dc4:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015dc8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015dcc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015dd0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015dd4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015dd8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015de0:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[11]*(C[2]*K[3] + C[6]*K[4]  + C[10]*K[5])
 8015de4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015de8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8015df2:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015df6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015dfe:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015e02:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015e06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015e0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015e0e:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015e12:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015e16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015e1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e22:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[15]*(C[3]*K[3] + C[7]*K[4]  + C[11]*K[5]);
 8015e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015e2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 8015e34:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015e38:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8015e3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015e40:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015e44:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8015e48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015e4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015e50:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015e54:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8015e58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015e5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e64:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[7]  = - state.P[3]*(C[0]*K[3]  + C[4]*K[4]  + C[8]*K[5])
 8015e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015e6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015e70:	edc3 7a07 	vstr	s15, [r3, #28]

	Pt[8]  = - state.P[0]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 8015e74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015e78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8015e82:	eeb1 7a67 	vneg.f32	s14, s15
 8015e86:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015e8a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015e8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015e92:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015e96:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015e9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015e9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015ea2:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015ea6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8015eaa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[4]*(C[1]*K[6]  + C[5]*K[7]  + C[9]*K[8])
 8015eb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015eba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8015ec4:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015ec8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015ecc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015ed0:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015ed4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015ed8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015edc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015ee0:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8015ee4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8015ee8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015eec:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[8]*(C[2]*K[6]  + C[6]*K[7]  + C[10]*K[8] - 1.0f)
 8015ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015efc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8015f06:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8015f0a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015f0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015f12:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8015f16:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015f1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015f1e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015f22:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8015f26:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8015f2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015f2e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015f32:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015f36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[12]*(C[3]*K[6] + C[7]*K[7]  + C[11]*K[8]);
 8015f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8015f50:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8015f54:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015f58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015f5c:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8015f60:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015f64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015f68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015f6c:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8015f70:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8015f74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015f78:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f80:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[8]  = - state.P[0]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 8015f84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015f8c:	edc3 7a08 	vstr	s15, [r3, #32]

	Pt[9]  = - state.P[1]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 8015f90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8015f9e:	eeb1 7a67 	vneg.f32	s14, s15
 8015fa2:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8015fa6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015fae:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8015fb2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015fb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015fba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015fbe:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8015fc2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8015fc6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015fce:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[5]*(C[1]*K[6]  + C[5]*K[7]  + C[9]*K[8])
 8015fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8015fe0:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8015fe4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8015fe8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015fec:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8015ff0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8015ff4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8015ff8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015ffc:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8016000:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016004:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016008:	ee76 7a27 	vadd.f32	s15, s12, s15
 801600c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016010:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[9]*(C[2]*K[6]  + C[6]*K[7]  + C[10]*K[8] - 1.0f)
 8016014:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016018:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8016022:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8016026:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801602a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801602e:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8016032:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8016036:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801603a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801603e:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8016042:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016046:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801604a:	ee76 7a27 	vadd.f32	s15, s12, s15
 801604e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016052:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801605a:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[13]*(C[3]*K[6] + C[7]*K[7]  + C[11]*K[8]);
 801605e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016062:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 801606c:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8016070:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016074:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016078:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 801607c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8016080:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016084:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016088:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 801608c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016090:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016094:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801609c:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[9]  = - state.P[1]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 80160a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80160a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	Pt[10] = - state.P[2]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 80160ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80160ba:	eeb1 7a67 	vneg.f32	s14, s15
 80160be:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80160c2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80160c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80160ca:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80160ce:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80160d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80160d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80160da:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80160de:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80160e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80160e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80160ea:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[6]*(C[1]*K[6]  + C[5]*K[7]  + C[9]*K[8])
 80160ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80160f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80160fc:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8016100:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016104:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016108:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801610c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8016110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016114:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016118:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801611c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016120:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016124:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801612c:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[10]*(C[2]*K[6] + C[6]*K[7]  + C[10]*K[8] - 1.0f)
 8016130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016134:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801613e:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8016142:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016146:	ee26 6a27 	vmul.f32	s12, s12, s15
 801614a:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 801614e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8016152:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016156:	ee36 6a27 	vadd.f32	s12, s12, s15
 801615a:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801615e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8016162:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016166:	ee76 7a27 	vadd.f32	s15, s12, s15
 801616a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801616e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016176:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[14]*(C[3]*K[6] + C[7]*K[7]  + C[11]*K[8]);
 801617a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801617e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8016188:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 801618c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016190:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016194:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8016198:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801619c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80161a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80161a4:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80161a8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80161ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80161b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80161b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161b8:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[10] = - state.P[2]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 80161bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80161c4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	Pt[11] = - state.P[3]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 80161c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80161d6:	eeb1 7a67 	vneg.f32	s14, s15
 80161da:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80161de:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80161e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80161e6:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 80161ea:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80161ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80161f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80161f6:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 80161fa:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80161fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016206:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[7]*(C[1]*K[6]  + C[5]*K[7]  + C[9]*K[8])
 801620a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801620e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8016218:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 801621c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016220:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016224:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8016228:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801622c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016230:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016234:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8016238:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801623c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016240:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016248:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[11]*(C[2]*K[6] + C[6]*K[7]  + C[10]*K[8] - 1.0f)
 801624c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016250:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 801625a:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801625e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016262:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016266:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 801626a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801626e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016272:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016276:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 801627a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801627e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016282:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016286:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801628a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801628e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016292:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[15]*(C[3]*K[6] + C[7]*K[7]  + C[11]*K[8]);
 8016296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801629a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80162a4:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80162a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80162ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80162b0:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80162b4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80162b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80162bc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80162c0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80162c4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80162c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80162cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80162d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80162d4:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[11] = - state.P[3]*(C[0]*K[6]  + C[4]*K[7]  + C[8]*K[8])
 80162d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80162dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80162e0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	Pt[12] = - state.P[0]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 80162e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80162e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80162f2:	eeb1 7a67 	vneg.f32	s14, s15
 80162f6:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80162fa:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80162fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016302:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8016306:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801630a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801630e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8016312:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8016316:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801631a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801631e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016322:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[4]*(C[1]*K[9]  + C[5]*K[10]  + C[9]*K[11])
 8016326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801632a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8016334:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8016338:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801633c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016340:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8016344:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016348:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801634c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016350:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8016354:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016358:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801635c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016364:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[8]*(C[2]*K[9]  + C[6]*K[10]  + C[10]*K[11])
 8016368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801636c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8016376:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 801637a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801637e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016382:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 8016386:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801638a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801638e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016392:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 8016396:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801639a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801639e:	ee76 7a27 	vadd.f32	s15, s12, s15
 80163a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80163a6:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[12]*(C[3]*K[9] + C[7]*K[10]  + C[11]*K[11] - 1.0f);
 80163aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80163ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80163b8:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80163bc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80163c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80163c4:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80163c8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80163cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80163d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80163d4:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80163d8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80163dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80163e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80163e4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80163e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80163ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80163f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[12] = - state.P[0]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 80163f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80163f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80163fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	Pt[13] = - state.P[1]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 8016400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016404:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801640e:	eeb1 7a67 	vneg.f32	s14, s15
 8016412:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8016416:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801641a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801641e:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 8016422:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016426:	ee66 7a27 	vmul.f32	s15, s12, s15
 801642a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801642e:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 8016432:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016436:	ee66 7a27 	vmul.f32	s15, s12, s15
 801643a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801643e:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[5]*(C[1]*K[9]  + C[5]*K[10]  + C[9]*K[11])
 8016442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016446:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8016450:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8016454:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016458:	ee26 6a27 	vmul.f32	s12, s12, s15
 801645c:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8016460:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016464:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016468:	ee36 6a27 	vadd.f32	s12, s12, s15
 801646c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 8016470:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016474:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016478:	ee76 7a27 	vadd.f32	s15, s12, s15
 801647c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016480:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[9]*(C[2]*K[9]  + C[6]*K[10]  + C[10]*K[11])
 8016484:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016488:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 8016492:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 8016496:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801649a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801649e:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 80164a2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80164a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80164aa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80164ae:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80164b2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80164b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80164ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 80164be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80164c2:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[13]*(C[3]*K[9] + C[7]*K[10]  + C[11]*K[11] - 1.0f);
 80164c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80164ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80164d4:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80164d8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80164dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80164e0:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 80164e4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80164e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80164ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80164f0:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 80164f4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80164f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80164fc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016500:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016504:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801650c:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[13] = - state.P[1]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 8016510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016518:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	Pt[14] = - state.P[2]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 801651c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016520:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801652a:	eeb1 7a67 	vneg.f32	s14, s15
 801652e:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8016532:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016536:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801653a:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 801653e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016542:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016546:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801654a:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 801654e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016552:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801655a:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[6]*(C[1]*K[9]  + C[5]*K[10]  + C[9]*K[11])
 801655e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016562:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 801656c:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 8016570:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016574:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016578:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801657c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016580:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016584:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016588:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801658c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016590:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016594:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801659c:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[10]*(C[2]*K[9] + C[6]*K[10]  + C[10]*K[11])
 80165a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80165a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80165ae:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80165b2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80165b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80165ba:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 80165be:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80165c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80165c6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80165ca:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80165ce:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80165d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80165d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80165da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80165de:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[14]*(C[3]*K[9] + C[7]*K[10]  + C[11]*K[11] - 1.0f);
 80165e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80165e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80165f0:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 80165f4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80165f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80165fc:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 8016600:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016604:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016608:	ee36 6a27 	vadd.f32	s12, s12, s15
 801660c:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 8016610:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016614:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016618:	ee76 7a27 	vadd.f32	s15, s12, s15
 801661c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8016620:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016628:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[14] = - state.P[2]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 801662c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016630:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016634:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	Pt[15] = - state.P[3]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 8016638:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801663c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8016646:	eeb1 7a67 	vneg.f32	s14, s15
 801664a:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 801664e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016652:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016656:	ed97 6a35 	vldr	s12, [r7, #212]	@ 0xd4
 801665a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801665e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016662:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8016666:	ed97 6a39 	vldr	s12, [r7, #228]	@ 0xe4
 801666a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801666e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016676:	ee27 7a27 	vmul.f32	s14, s14, s15
	         - state.P[7]*(C[1]*K[9]  + C[5]*K[10]  + C[9]*K[11])
 801667a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801667e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8016688:	ed97 6a32 	vldr	s12, [r7, #200]	@ 0xc8
 801668c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016694:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 8016698:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801669c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80166a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80166a4:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 80166a8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80166ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80166b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80166b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80166b8:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[11]*(C[2]*K[9] + C[6]*K[10]  + C[10]*K[11])
 80166bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80166c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80166ca:	ed97 6a33 	vldr	s12, [r7, #204]	@ 0xcc
 80166ce:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80166d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80166d6:	edd7 5a37 	vldr	s11, [r7, #220]	@ 0xdc
 80166da:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80166de:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80166e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80166e6:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
 80166ea:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80166ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80166f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80166f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80166fa:	ee37 7a67 	vsub.f32	s14, s14, s15
	         - state.P[15]*(C[3]*K[9] + C[7]*K[10]  + C[11]*K[11] - 1.0f);
 80166fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016702:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 801670c:	ed97 6a34 	vldr	s12, [r7, #208]	@ 0xd0
 8016710:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8016714:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016718:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 801671c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8016720:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016724:	ee36 6a27 	vadd.f32	s12, s12, s15
 8016728:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 801672c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8016730:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8016734:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016738:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801673c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016744:	ee77 7a67 	vsub.f32	s15, s14, s15
	Pt[15] = - state.P[3]*(C[0]*K[9]  + C[4]*K[10]  + C[8]*K[11])
 8016748:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801674c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016750:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c



	for (int i = 0; i < 16; i++) {
 8016754:	2300      	movs	r3, #0
 8016756:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801675a:	e019      	b.n	8016790 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x3260>
		state.P[i] = Pt[i];
 801675c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016760:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8016764:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	4413      	add	r3, r2
 801676c:	681a      	ldr	r2, [r3, #0]
 801676e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016772:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016776:	6819      	ldr	r1, [r3, #0]
 8016778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801677c:	330a      	adds	r3, #10
 801677e:	009b      	lsls	r3, r3, #2
 8016780:	440b      	add	r3, r1
 8016782:	3304      	adds	r3, #4
 8016784:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 8016786:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801678a:	3301      	adds	r3, #1
 801678c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8016790:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016794:	2b0f      	cmp	r3, #15
 8016796:	dde1      	ble.n	801675c <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x322c>
 8016798:	e002      	b.n	80167a0 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x3270>
	if (acc_norm < 1e-6f) return; // Skip update if no acceleration data
 801679a:	bf00      	nop
 801679c:	e000      	b.n	80167a0 <_ZN15ExtKalmanFilter6updateERK11MPU6050Data+0x3270>
	if (fabs(detS) < 1e-6f) return;
 801679e:	bf00      	nop
	}


}
 80167a0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <_ZNK15ExtKalmanFilter8getAngleEv>:
 * Converts the internal state angles (phi_rad, theta_rad) from radians using
 * RAD_TO_DEG and returns them as an AngleEstimate.
 *
 * @return AngleEstimate with roll and pitch in degrees.
 */
AngleEstimate ExtKalmanFilter::getAngle() const {
 80167a8:	b480      	push	{r7}
 80167aa:	b089      	sub	sp, #36	@ 0x24
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
    AngleEstimate angle;
    angle.roll = state.phi_rad * RAD_TO_DEG;   // or x[0] * RAD_TO_DEG
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	edd3 7a00 	vldr	s15, [r3]
 80167b6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8016804 <_ZNK15ExtKalmanFilter8getAngleEv+0x5c>
 80167ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167be:	edc7 7a04 	vstr	s15, [r7, #16]
    angle.pitch = state.theta_rad * RAD_TO_DEG; // or x[1] * RAD_TO_DEG
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80167c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8016804 <_ZNK15ExtKalmanFilter8getAngleEv+0x5c>
 80167cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80167d0:	edc7 7a05 	vstr	s15, [r7, #20]
    return angle;
 80167d4:	f107 0318 	add.w	r3, r7, #24
 80167d8:	f107 0210 	add.w	r2, r7, #16
 80167dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80167e4:	69ba      	ldr	r2, [r7, #24]
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	ee07 2a10 	vmov	s14, r2
 80167ec:	ee07 3a90 	vmov	s15, r3
}
 80167f0:	eeb0 0a47 	vmov.f32	s0, s14
 80167f4:	eef0 0a67 	vmov.f32	s1, s15
 80167f8:	3724      	adds	r7, #36	@ 0x24
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr
 8016802:	bf00      	nop
 8016804:	42652ee1 	.word	0x42652ee1

08016808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801680c:	4904      	ldr	r1, [pc, #16]	@ (8016820 <MX_FATFS_Init+0x18>)
 801680e:	4805      	ldr	r0, [pc, #20]	@ (8016824 <MX_FATFS_Init+0x1c>)
 8016810:	f001 ffaa 	bl	8018768 <FATFS_LinkDriver>
 8016814:	4603      	mov	r3, r0
 8016816:	461a      	mov	r2, r3
 8016818:	4b03      	ldr	r3, [pc, #12]	@ (8016828 <MX_FATFS_Init+0x20>)
 801681a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801681c:	bf00      	nop
 801681e:	bd80      	pop	{r7, pc}
 8016820:	20000e0c 	.word	0x20000e0c
 8016824:	0801dd04 	.word	0x0801dd04
 8016828:	20000e08 	.word	0x20000e08

0801682c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8016832:	2300      	movs	r3, #0
 8016834:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8016836:	f000 f879 	bl	801692c <BSP_SD_IsDetected>
 801683a:	4603      	mov	r3, r0
 801683c:	2b01      	cmp	r3, #1
 801683e:	d001      	beq.n	8016844 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016840:	2302      	movs	r3, #2
 8016842:	e012      	b.n	801686a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8016844:	480b      	ldr	r0, [pc, #44]	@ (8016874 <BSP_SD_Init+0x48>)
 8016846:	f7f6 fde3 	bl	800d410 <HAL_SD_Init>
 801684a:	4603      	mov	r3, r0
 801684c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801684e:	79fb      	ldrb	r3, [r7, #7]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d109      	bne.n	8016868 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8016854:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016858:	4806      	ldr	r0, [pc, #24]	@ (8016874 <BSP_SD_Init+0x48>)
 801685a:	f7f7 fbc5 	bl	800dfe8 <HAL_SD_ConfigWideBusOperation>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	d001      	beq.n	8016868 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8016864:	2301      	movs	r3, #1
 8016866:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8016868:	79fb      	ldrb	r3, [r7, #7]
}
 801686a:	4618      	mov	r0, r3
 801686c:	3708      	adds	r7, #8
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	200008c0 	.word	0x200008c0

08016878 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b088      	sub	sp, #32
 801687c:	af02      	add	r7, sp, #8
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	60b9      	str	r1, [r7, #8]
 8016882:	607a      	str	r2, [r7, #4]
 8016884:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	9300      	str	r3, [sp, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	68ba      	ldr	r2, [r7, #8]
 8016892:	68f9      	ldr	r1, [r7, #12]
 8016894:	4806      	ldr	r0, [pc, #24]	@ (80168b0 <BSP_SD_ReadBlocks+0x38>)
 8016896:	f7f6 fe73 	bl	800d580 <HAL_SD_ReadBlocks>
 801689a:	4603      	mov	r3, r0
 801689c:	2b00      	cmp	r3, #0
 801689e:	d001      	beq.n	80168a4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80168a0:	2301      	movs	r3, #1
 80168a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80168a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3718      	adds	r7, #24
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	200008c0 	.word	0x200008c0

080168b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b088      	sub	sp, #32
 80168b8:	af02      	add	r7, sp, #8
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
 80168c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	9300      	str	r3, [sp, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	68ba      	ldr	r2, [r7, #8]
 80168ce:	68f9      	ldr	r1, [r7, #12]
 80168d0:	4806      	ldr	r0, [pc, #24]	@ (80168ec <BSP_SD_WriteBlocks+0x38>)
 80168d2:	f7f7 f833 	bl	800d93c <HAL_SD_WriteBlocks>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80168dc:	2301      	movs	r3, #1
 80168de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80168e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3718      	adds	r7, #24
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	200008c0 	.word	0x200008c0

080168f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80168f4:	4805      	ldr	r0, [pc, #20]	@ (801690c <BSP_SD_GetCardState+0x1c>)
 80168f6:	f7f7 fc11 	bl	800e11c <HAL_SD_GetCardState>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b04      	cmp	r3, #4
 80168fe:	bf14      	ite	ne
 8016900:	2301      	movne	r3, #1
 8016902:	2300      	moveq	r3, #0
 8016904:	b2db      	uxtb	r3, r3
}
 8016906:	4618      	mov	r0, r3
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	200008c0 	.word	0x200008c0

08016910 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016918:	6879      	ldr	r1, [r7, #4]
 801691a:	4803      	ldr	r0, [pc, #12]	@ (8016928 <BSP_SD_GetCardInfo+0x18>)
 801691c:	f7f7 fb38 	bl	800df90 <HAL_SD_GetCardInfo>
}
 8016920:	bf00      	nop
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	200008c0 	.word	0x200008c0

0801692c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8016932:	2301      	movs	r3, #1
 8016934:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8016936:	f000 f80b 	bl	8016950 <BSP_PlatformIsDetected>
 801693a:	4603      	mov	r3, r0
 801693c:	2b00      	cmp	r3, #0
 801693e:	d101      	bne.n	8016944 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8016940:	2300      	movs	r3, #0
 8016942:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8016944:	79fb      	ldrb	r3, [r7, #7]
 8016946:	b2db      	uxtb	r3, r3
}
 8016948:	4618      	mov	r0, r3
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8016956:	2301      	movs	r3, #1
 8016958:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801695a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801695e:	4806      	ldr	r0, [pc, #24]	@ (8016978 <BSP_PlatformIsDetected+0x28>)
 8016960:	f7ef fcea 	bl	8006338 <HAL_GPIO_ReadPin>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d001      	beq.n	801696e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801696a:	2300      	movs	r3, #0
 801696c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801696e:	79fb      	ldrb	r3, [r7, #7]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	40020800 	.word	0x40020800

0801697c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	4603      	mov	r3, r0
 8016984:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016986:	4b0b      	ldr	r3, [pc, #44]	@ (80169b4 <SD_CheckStatus+0x38>)
 8016988:	2201      	movs	r2, #1
 801698a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801698c:	f7ff ffb0 	bl	80168f0 <BSP_SD_GetCardState>
 8016990:	4603      	mov	r3, r0
 8016992:	2b00      	cmp	r3, #0
 8016994:	d107      	bne.n	80169a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016996:	4b07      	ldr	r3, [pc, #28]	@ (80169b4 <SD_CheckStatus+0x38>)
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	b2db      	uxtb	r3, r3
 801699c:	f023 0301 	bic.w	r3, r3, #1
 80169a0:	b2da      	uxtb	r2, r3
 80169a2:	4b04      	ldr	r3, [pc, #16]	@ (80169b4 <SD_CheckStatus+0x38>)
 80169a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80169a6:	4b03      	ldr	r3, [pc, #12]	@ (80169b4 <SD_CheckStatus+0x38>)
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	b2db      	uxtb	r3, r3
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}
 80169b4:	20000009 	.word	0x20000009

080169b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	4603      	mov	r3, r0
 80169c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80169c2:	4b0b      	ldr	r3, [pc, #44]	@ (80169f0 <SD_initialize+0x38>)
 80169c4:	2201      	movs	r2, #1
 80169c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80169c8:	f7ff ff30 	bl	801682c <BSP_SD_Init>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d107      	bne.n	80169e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80169d2:	79fb      	ldrb	r3, [r7, #7]
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7ff ffd1 	bl	801697c <SD_CheckStatus>
 80169da:	4603      	mov	r3, r0
 80169dc:	461a      	mov	r2, r3
 80169de:	4b04      	ldr	r3, [pc, #16]	@ (80169f0 <SD_initialize+0x38>)
 80169e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80169e2:	4b03      	ldr	r3, [pc, #12]	@ (80169f0 <SD_initialize+0x38>)
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	b2db      	uxtb	r3, r3
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3708      	adds	r7, #8
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	20000009 	.word	0x20000009

080169f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	4603      	mov	r3, r0
 80169fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80169fe:	79fb      	ldrb	r3, [r7, #7]
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7ff ffbb 	bl	801697c <SD_CheckStatus>
 8016a06:	4603      	mov	r3, r0
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b086      	sub	sp, #24
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60b9      	str	r1, [r7, #8]
 8016a18:	607a      	str	r2, [r7, #4]
 8016a1a:	603b      	str	r3, [r7, #0]
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016a20:	2301      	movs	r3, #1
 8016a22:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8016a24:	f04f 33ff 	mov.w	r3, #4294967295
 8016a28:	683a      	ldr	r2, [r7, #0]
 8016a2a:	6879      	ldr	r1, [r7, #4]
 8016a2c:	68b8      	ldr	r0, [r7, #8]
 8016a2e:	f7ff ff23 	bl	8016878 <BSP_SD_ReadBlocks>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d107      	bne.n	8016a48 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8016a38:	bf00      	nop
 8016a3a:	f7ff ff59 	bl	80168f0 <BSP_SD_GetCardState>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1fa      	bne.n	8016a3a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8016a44:	2300      	movs	r3, #0
 8016a46:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3718      	adds	r7, #24
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b086      	sub	sp, #24
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
 8016a5c:	603b      	str	r3, [r7, #0]
 8016a5e:	4603      	mov	r3, r0
 8016a60:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016a62:	2301      	movs	r3, #1
 8016a64:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8016a66:	f04f 33ff 	mov.w	r3, #4294967295
 8016a6a:	683a      	ldr	r2, [r7, #0]
 8016a6c:	6879      	ldr	r1, [r7, #4]
 8016a6e:	68b8      	ldr	r0, [r7, #8]
 8016a70:	f7ff ff20 	bl	80168b4 <BSP_SD_WriteBlocks>
 8016a74:	4603      	mov	r3, r0
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d107      	bne.n	8016a8a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8016a7a:	bf00      	nop
 8016a7c:	f7ff ff38 	bl	80168f0 <BSP_SD_GetCardState>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d1fa      	bne.n	8016a7c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8016a86:	2300      	movs	r3, #0
 8016a88:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3718      	adds	r7, #24
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b08c      	sub	sp, #48	@ 0x30
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	603a      	str	r2, [r7, #0]
 8016a9e:	71fb      	strb	r3, [r7, #7]
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016aaa:	4b25      	ldr	r3, [pc, #148]	@ (8016b40 <SD_ioctl+0xac>)
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	f003 0301 	and.w	r3, r3, #1
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d001      	beq.n	8016abc <SD_ioctl+0x28>
 8016ab8:	2303      	movs	r3, #3
 8016aba:	e03c      	b.n	8016b36 <SD_ioctl+0xa2>

  switch (cmd)
 8016abc:	79bb      	ldrb	r3, [r7, #6]
 8016abe:	2b03      	cmp	r3, #3
 8016ac0:	d834      	bhi.n	8016b2c <SD_ioctl+0x98>
 8016ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8016ac8 <SD_ioctl+0x34>)
 8016ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ac8:	08016ad9 	.word	0x08016ad9
 8016acc:	08016ae1 	.word	0x08016ae1
 8016ad0:	08016af9 	.word	0x08016af9
 8016ad4:	08016b13 	.word	0x08016b13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016ade:	e028      	b.n	8016b32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016ae0:	f107 030c 	add.w	r3, r7, #12
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7ff ff13 	bl	8016910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8016aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016af6:	e01c      	b.n	8016b32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016af8:	f107 030c 	add.w	r3, r7, #12
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7ff ff07 	bl	8016910 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b04:	b29a      	uxth	r2, r3
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016b10:	e00f      	b.n	8016b32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016b12:	f107 030c 	add.w	r3, r7, #12
 8016b16:	4618      	mov	r0, r3
 8016b18:	f7ff fefa 	bl	8016910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8016b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b1e:	0a5a      	lsrs	r2, r3, #9
 8016b20:	683b      	ldr	r3, [r7, #0]
 8016b22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8016b2a:	e002      	b.n	8016b32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8016b2c:	2304      	movs	r3, #4
 8016b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8016b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3730      	adds	r7, #48	@ 0x30
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	20000009 	.word	0x20000009

08016b44 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b082      	sub	sp, #8
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8016b4e:	edc7 0a00 	vstr	s1, [r7]
 8016b52:	edd7 0a00 	vldr	s1, [r7]
 8016b56:	ed97 0a01 	vldr	s0, [r7, #4]
 8016b5a:	f003 f98b 	bl	8019e74 <atan2f>
 8016b5e:	eef0 7a40 	vmov.f32	s15, s0
 8016b62:	eeb0 0a67 	vmov.f32	s0, s15
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <_ZN8HMC5883LC1Ev>:

MagCalibration magCalib;

uint8_t rawBuffer[6]; // stores all raw 8 bit information from the registers

HMC5883L::HMC5883L(){
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]

}
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	4618      	mov	r0, r3
 8016b78:	370c      	adds	r7, #12
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr

08016b82 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf>:
 * 
 * @param hi2c - Pointer to the I2C handle
 * @param data - Pointer to the HMC_data structure to store sensor data
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef HMC5883L::init(I2C_HandleTypeDef *hi2c, HMC_data *data, float declination){
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b08a      	sub	sp, #40	@ 0x28
 8016b86:	af04      	add	r7, sp, #16
 8016b88:	60f8      	str	r0, [r7, #12]
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	607a      	str	r2, [r7, #4]
 8016b8e:	ed87 0a00 	vstr	s0, [r7]
	data->i2c_handle = hi2c;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	68ba      	ldr	r2, [r7, #8]
 8016b96:	601a      	str	r2, [r3, #0]
	data->mag[0] = 0.0f;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f04f 0200 	mov.w	r2, #0
 8016b9e:	609a      	str	r2, [r3, #8]
	data->mag[1] = 0.0f;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f04f 0200 	mov.w	r2, #0
 8016ba6:	60da      	str	r2, [r3, #12]
	data->mag[2] = 0.0f;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f04f 0200 	mov.w	r2, #0
 8016bae:	611a      	str	r2, [r3, #16]
	data->declination = declination;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	683a      	ldr	r2, [r7, #0]
 8016bb4:	605a      	str	r2, [r3, #4]

	uint8_t errNum = 0;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	// Config A: 8-average, 15 Hz default, normal measurement
	uint8_t config = 0x70;
 8016bba:	2370      	movs	r3, #112	@ 0x70
 8016bbc:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(data->i2c_handle, HMC_ADDR, CONFG_A, I2C_MEMADD_SIZE_8BIT, &config, 1, HAL_MAX_DELAY);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	6818      	ldr	r0, [r3, #0]
 8016bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8016bc6:	9302      	str	r3, [sp, #8]
 8016bc8:	2301      	movs	r3, #1
 8016bca:	9301      	str	r3, [sp, #4]
 8016bcc:	f107 0315 	add.w	r3, r7, #21
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	213c      	movs	r1, #60	@ 0x3c
 8016bd8:	f7f1 fd9e 	bl	8008718 <HAL_I2C_Mem_Write>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8016be0:	7dbb      	ldrb	r3, [r7, #22]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	bf14      	ite	ne
 8016be6:	2301      	movne	r3, #1
 8016be8:	2300      	moveq	r3, #0
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	461a      	mov	r2, r3
 8016bee:	7dfb      	ldrb	r3, [r7, #23]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	75fb      	strb	r3, [r7, #23]
	if(errNum != 0 ) return HAL_ERROR;
 8016bf4:	7dfb      	ldrb	r3, [r7, #23]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d001      	beq.n	8016bfe <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0x7c>
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	e044      	b.n	8016c88 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0x106>

	// Config B: gain = 1090 LSB/Gauss
	config = 0x20;
 8016bfe:	2320      	movs	r3, #32
 8016c00:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(data->i2c_handle, HMC_ADDR, CONFG_B, I2C_MEMADD_SIZE_8BIT, &config, 1, HAL_MAX_DELAY);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6818      	ldr	r0, [r3, #0]
 8016c06:	f04f 33ff 	mov.w	r3, #4294967295
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	f107 0315 	add.w	r3, r7, #21
 8016c14:	9300      	str	r3, [sp, #0]
 8016c16:	2301      	movs	r3, #1
 8016c18:	2201      	movs	r2, #1
 8016c1a:	213c      	movs	r1, #60	@ 0x3c
 8016c1c:	f7f1 fd7c 	bl	8008718 <HAL_I2C_Mem_Write>
 8016c20:	4603      	mov	r3, r0
 8016c22:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8016c24:	7dbb      	ldrb	r3, [r7, #22]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	bf14      	ite	ne
 8016c2a:	2301      	movne	r3, #1
 8016c2c:	2300      	moveq	r3, #0
 8016c2e:	b2db      	uxtb	r3, r3
 8016c30:	461a      	mov	r2, r3
 8016c32:	7dfb      	ldrb	r3, [r7, #23]
 8016c34:	4413      	add	r3, r2
 8016c36:	75fb      	strb	r3, [r7, #23]
	if(errNum != 0 ) return HAL_ERROR;
 8016c38:	7dfb      	ldrb	r3, [r7, #23]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d001      	beq.n	8016c42 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0xc0>
 8016c3e:	2301      	movs	r3, #1
 8016c40:	e022      	b.n	8016c88 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0x106>

	// Mode: continuous measurement
	config =
 8016c42:	2300      	movs	r3, #0
 8016c44:	757b      	strb	r3, [r7, #21]


			0x00;
	status = HAL_I2C_Mem_Write(data->i2c_handle, HMC_ADDR, MODE, I2C_MEMADD_SIZE_8BIT, &config, 1, HAL_MAX_DELAY);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	6818      	ldr	r0, [r3, #0]
 8016c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4e:	9302      	str	r3, [sp, #8]
 8016c50:	2301      	movs	r3, #1
 8016c52:	9301      	str	r3, [sp, #4]
 8016c54:	f107 0315 	add.w	r3, r7, #21
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	2202      	movs	r2, #2
 8016c5e:	213c      	movs	r1, #60	@ 0x3c
 8016c60:	f7f1 fd5a 	bl	8008718 <HAL_I2C_Mem_Write>
 8016c64:	4603      	mov	r3, r0
 8016c66:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8016c68:	7dbb      	ldrb	r3, [r7, #22]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	bf14      	ite	ne
 8016c6e:	2301      	movne	r3, #1
 8016c70:	2300      	moveq	r3, #0
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	461a      	mov	r2, r3
 8016c76:	7dfb      	ldrb	r3, [r7, #23]
 8016c78:	4413      	add	r3, r2
 8016c7a:	75fb      	strb	r3, [r7, #23]
	if(errNum != 0 ) return HAL_ERROR;
 8016c7c:	7dfb      	ldrb	r3, [r7, #23]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d001      	beq.n	8016c86 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0x104>
 8016c82:	2301      	movs	r3, #1
 8016c84:	e000      	b.n	8016c88 <_ZN8HMC5883L4initEP19__I2C_HandleTypeDefP8HMC_dataf+0x106>

	return HAL_OK;
 8016c86:	2300      	movs	r3, #0
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3718      	adds	r7, #24
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <_ZN8HMC5883L7readDMAEP8HMC_data>:
 * @brief Reads magnetometer data from the HMC5883L sensor using DMA and stores it in the provided data structure.
 * 
 * @param data - Pointer to the HMC_data structure to store sensor data
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef HMC5883L::readDMA(HMC_data *data){
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b086      	sub	sp, #24
 8016c94:	af02      	add	r7, sp, #8
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_DMA(data->i2c_handle, HMC_ADDR, X_MAGM, I2C_MEMADD_SIZE_8BIT, rawBuffer, 6);
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	6818      	ldr	r0, [r3, #0]
 8016c9e:	2306      	movs	r3, #6
 8016ca0:	9301      	str	r3, [sp, #4]
 8016ca2:	4b09      	ldr	r3, [pc, #36]	@ (8016cc8 <_ZN8HMC5883L7readDMAEP8HMC_data+0x38>)
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	2203      	movs	r2, #3
 8016caa:	213c      	movs	r1, #60	@ 0x3c
 8016cac:	f7f1 ff62 	bl	8008b74 <HAL_I2C_Mem_Read_DMA>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return status;
 8016cb4:	7bfb      	ldrb	r3, [r7, #15]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d001      	beq.n	8016cbe <_ZN8HMC5883L7readDMAEP8HMC_data+0x2e>
 8016cba:	7bfb      	ldrb	r3, [r7, #15]
 8016cbc:	e000      	b.n	8016cc0 <_ZN8HMC5883L7readDMAEP8HMC_data+0x30>

	return HAL_OK;
 8016cbe:	2300      	movs	r3, #0
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3710      	adds	r7, #16
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}
 8016cc8:	20000e10 	.word	0x20000e10
 8016ccc:	00000000 	.word	0x00000000

08016cd0 <_ZN8HMC5883L15data_processingEP8HMC_data>:
 * Preconditions: rawBuffer holds the latest 6-byte measurement.
 *
 * @param data Pointer to HMC_data that receives the scaled readings; must not be null.
 * @return int8_t 1 on success.
 */
void HMC5883L::data_processing(HMC_data *data){
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	6039      	str	r1, [r7, #0]
	// processing data. since it is in 2's complement. (MSB << 8 | LSB)
	int16_t raw_x_mag = (int16_t)(rawBuffer[0] << 8) | rawBuffer[1];
 8016cda:	4b3d      	ldr	r3, [pc, #244]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	021b      	lsls	r3, r3, #8
 8016ce0:	b21a      	sxth	r2, r3
 8016ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016ce4:	785b      	ldrb	r3, [r3, #1]
 8016ce6:	b21b      	sxth	r3, r3
 8016ce8:	4313      	orrs	r3, r2
 8016cea:	81fb      	strh	r3, [r7, #14]
	int16_t raw_z_mag = (int16_t)(rawBuffer[2] << 8) | rawBuffer[3];
 8016cec:	4b38      	ldr	r3, [pc, #224]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016cee:	789b      	ldrb	r3, [r3, #2]
 8016cf0:	021b      	lsls	r3, r3, #8
 8016cf2:	b21a      	sxth	r2, r3
 8016cf4:	4b36      	ldr	r3, [pc, #216]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016cf6:	78db      	ldrb	r3, [r3, #3]
 8016cf8:	b21b      	sxth	r3, r3
 8016cfa:	4313      	orrs	r3, r2
 8016cfc:	81bb      	strh	r3, [r7, #12]
	int16_t raw_y_mag = (int16_t)(rawBuffer[4] << 8) | rawBuffer[5];
 8016cfe:	4b34      	ldr	r3, [pc, #208]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016d00:	791b      	ldrb	r3, [r3, #4]
 8016d02:	021b      	lsls	r3, r3, #8
 8016d04:	b21a      	sxth	r2, r3
 8016d06:	4b32      	ldr	r3, [pc, #200]	@ (8016dd0 <_ZN8HMC5883L15data_processingEP8HMC_data+0x100>)
 8016d08:	795b      	ldrb	r3, [r3, #5]
 8016d0a:	b21b      	sxth	r3, r3
 8016d0c:	4313      	orrs	r3, r2
 8016d0e:	817b      	strh	r3, [r7, #10]

// Get magnetometer readings in microTesla
	data->mag[0] = raw_x_mag * scale * 0.1; // x-axis
 8016d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7e9 fc25 	bl	8000564 <__aeabi_i2d>
 8016d1a:	a329      	add	r3, pc, #164	@ (adr r3, 8016dc0 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf0>)
 8016d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d20:	f7e9 fc8a 	bl	8000638 <__aeabi_dmul>
 8016d24:	4602      	mov	r2, r0
 8016d26:	460b      	mov	r3, r1
 8016d28:	4610      	mov	r0, r2
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	a326      	add	r3, pc, #152	@ (adr r3, 8016dc8 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf8>)
 8016d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d32:	f7e9 fc81 	bl	8000638 <__aeabi_dmul>
 8016d36:	4602      	mov	r2, r0
 8016d38:	460b      	mov	r3, r1
 8016d3a:	4610      	mov	r0, r2
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	f7e9 ff53 	bl	8000be8 <__aeabi_d2f>
 8016d42:	4602      	mov	r2, r0
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	609a      	str	r2, [r3, #8]
	data->mag[1] = raw_y_mag * scale * 0.1; // y-axis
 8016d48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7e9 fc09 	bl	8000564 <__aeabi_i2d>
 8016d52:	a31b      	add	r3, pc, #108	@ (adr r3, 8016dc0 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf0>)
 8016d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d58:	f7e9 fc6e 	bl	8000638 <__aeabi_dmul>
 8016d5c:	4602      	mov	r2, r0
 8016d5e:	460b      	mov	r3, r1
 8016d60:	4610      	mov	r0, r2
 8016d62:	4619      	mov	r1, r3
 8016d64:	a318      	add	r3, pc, #96	@ (adr r3, 8016dc8 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf8>)
 8016d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d6a:	f7e9 fc65 	bl	8000638 <__aeabi_dmul>
 8016d6e:	4602      	mov	r2, r0
 8016d70:	460b      	mov	r3, r1
 8016d72:	4610      	mov	r0, r2
 8016d74:	4619      	mov	r1, r3
 8016d76:	f7e9 ff37 	bl	8000be8 <__aeabi_d2f>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	683b      	ldr	r3, [r7, #0]
 8016d7e:	60da      	str	r2, [r3, #12]
	data->mag[2] = raw_z_mag * scale * 0.1; // z-axis
 8016d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7e9 fbed 	bl	8000564 <__aeabi_i2d>
 8016d8a:	a30d      	add	r3, pc, #52	@ (adr r3, 8016dc0 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf0>)
 8016d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d90:	f7e9 fc52 	bl	8000638 <__aeabi_dmul>
 8016d94:	4602      	mov	r2, r0
 8016d96:	460b      	mov	r3, r1
 8016d98:	4610      	mov	r0, r2
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	a30a      	add	r3, pc, #40	@ (adr r3, 8016dc8 <_ZN8HMC5883L15data_processingEP8HMC_data+0xf8>)
 8016d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da2:	f7e9 fc49 	bl	8000638 <__aeabi_dmul>
 8016da6:	4602      	mov	r2, r0
 8016da8:	460b      	mov	r3, r1
 8016daa:	4610      	mov	r0, r2
 8016dac:	4619      	mov	r1, r3
 8016dae:	f7e9 ff1b 	bl	8000be8 <__aeabi_d2f>
 8016db2:	4602      	mov	r2, r0
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	611a      	str	r2, [r3, #16]

}
 8016db8:	bf00      	nop
 8016dba:	3710      	adds	r7, #16
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	d70a3d71 	.word	0xd70a3d71
 8016dc4:	3fed70a3 	.word	0x3fed70a3
 8016dc8:	9999999a 	.word	0x9999999a
 8016dcc:	3fb99999 	.word	0x3fb99999
 8016dd0:	20000e10 	.word	0x20000e10

08016dd4 <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf>:
 * @param data 
 * @param soft_cal soft iron calibration matrix
 * @param hard_cal hard iron calibration offsets
 * @return int8_t 
 */
int8_t HMC5883L::calibrated_data(HMC_data *data, float (*soft_cal)[3], float *hard_cal){
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b088      	sub	sp, #32
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	607a      	str	r2, [r7, #4]
 8016de0:	603b      	str	r3, [r7, #0]
	float hard[3]; // callibration of hard iron

	data_processing(data);
 8016de2:	68b9      	ldr	r1, [r7, #8]
 8016de4:	68f8      	ldr	r0, [r7, #12]
 8016de6:	f7ff ff73 	bl	8016cd0 <_ZN8HMC5883L15data_processingEP8HMC_data>

	// Applying hard iron calibration
	for(uint8_t i = 0; i< 3; i++){
 8016dea:	2300      	movs	r3, #0
 8016dec:	77fb      	strb	r3, [r7, #31]
 8016dee:	e018      	b.n	8016e22 <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf+0x4e>
		hard[i] = data->mag[i] - hard_cal[i];
 8016df0:	7ffb      	ldrb	r3, [r7, #31]
 8016df2:	68ba      	ldr	r2, [r7, #8]
 8016df4:	3302      	adds	r3, #2
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	4413      	add	r3, r2
 8016dfa:	ed93 7a00 	vldr	s14, [r3]
 8016dfe:	7ffb      	ldrb	r3, [r7, #31]
 8016e00:	009b      	lsls	r3, r3, #2
 8016e02:	683a      	ldr	r2, [r7, #0]
 8016e04:	4413      	add	r3, r2
 8016e06:	edd3 7a00 	vldr	s15, [r3]
 8016e0a:	7ffb      	ldrb	r3, [r7, #31]
 8016e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	3320      	adds	r3, #32
 8016e14:	443b      	add	r3, r7
 8016e16:	3b10      	subs	r3, #16
 8016e18:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i< 3; i++){
 8016e1c:	7ffb      	ldrb	r3, [r7, #31]
 8016e1e:	3301      	adds	r3, #1
 8016e20:	77fb      	strb	r3, [r7, #31]
 8016e22:	7ffb      	ldrb	r3, [r7, #31]
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	d9e3      	bls.n	8016df0 <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf+0x1c>
	}

	for(uint8_t i = 0; i < 3; i++){
 8016e28:	2300      	movs	r3, #0
 8016e2a:	77bb      	strb	r3, [r7, #30]
 8016e2c:	e038      	b.n	8016ea0 <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf+0xcc>
		data->calibrated[i] = ((soft_cal[i][0] * hard[0]) +
 8016e2e:	7fba      	ldrb	r2, [r7, #30]
 8016e30:	4613      	mov	r3, r2
 8016e32:	005b      	lsls	r3, r3, #1
 8016e34:	4413      	add	r3, r2
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	461a      	mov	r2, r3
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	ed93 7a00 	vldr	s14, [r3]
 8016e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8016e46:	ee27 7a27 	vmul.f32	s14, s14, s15
				(soft_cal[i][1] * hard[1])  +
 8016e4a:	7fba      	ldrb	r2, [r7, #30]
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	4413      	add	r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	461a      	mov	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	4413      	add	r3, r2
 8016e5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8016e5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
		data->calibrated[i] = ((soft_cal[i][0] * hard[0]) +
 8016e66:	ee37 7a27 	vadd.f32	s14, s14, s15
				(soft_cal[i][2] * hard[2])); // 0.1 converts to micorTesla
 8016e6a:	7fba      	ldrb	r2, [r7, #30]
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	4413      	add	r3, r2
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	461a      	mov	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	4413      	add	r3, r2
 8016e7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8016e7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
		data->calibrated[i] = ((soft_cal[i][0] * hard[0]) +
 8016e86:	7fbb      	ldrb	r3, [r7, #30]
				(soft_cal[i][1] * hard[1])  +
 8016e88:	ee77 7a27 	vadd.f32	s15, s14, s15
		data->calibrated[i] = ((soft_cal[i][0] * hard[0]) +
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	3304      	adds	r3, #4
 8016e90:	009b      	lsls	r3, r3, #2
 8016e92:	4413      	add	r3, r2
 8016e94:	3304      	adds	r3, #4
 8016e96:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; i++){
 8016e9a:	7fbb      	ldrb	r3, [r7, #30]
 8016e9c:	3301      	adds	r3, #1
 8016e9e:	77bb      	strb	r3, [r7, #30]
 8016ea0:	7fbb      	ldrb	r3, [r7, #30]
 8016ea2:	2b02      	cmp	r3, #2
 8016ea4:	d9c3      	bls.n	8016e2e <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf+0x5a>
	}

	return 1;
 8016ea6:	2301      	movs	r3, #1
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3720      	adds	r7, #32
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf>:
 * @param pitch pitch angle in degrees
 * @param soft_cal soft iron calibration matrix
 * @param hard_cal hard iron calibration offsets
 * @return float 
 */
float HMC5883L::get_heading(HMC_data *data, float roll, float pitch, float (*soft_cal)[3], float *hard_cal){
 8016eb0:	b5b0      	push	{r4, r5, r7, lr}
 8016eb2:	b092      	sub	sp, #72	@ 0x48
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6178      	str	r0, [r7, #20]
 8016eb8:	6139      	str	r1, [r7, #16]
 8016eba:	ed87 0a03 	vstr	s0, [r7, #12]
 8016ebe:	edc7 0a02 	vstr	s1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
 8016ec4:	603b      	str	r3, [r7, #0]
	float heading;
	// Get calibrated data:
	calibrated_data(data, soft_cal, hard_cal);
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	6939      	ldr	r1, [r7, #16]
 8016ecc:	6978      	ldr	r0, [r7, #20]
 8016ece:	f7ff ff81 	bl	8016dd4 <_ZN8HMC5883L15calibrated_dataEP8HMC_dataPA3_fPf>

	// Converting pitch and roll to radians to use with cos and sin
	float theta = pitch * DEG_TO_RAD;
 8016ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8016ed6:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8017048 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x198>
 8016eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ede:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float phi = roll * DEG_TO_RAD;
 8016ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8016ee6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8017048 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x198>
 8016eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016eee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	// roll: phi, pitch: theta
	float ct = cosf(theta); float cp = cosf(phi);
 8016ef2:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8016ef6:	f002 ffdd 	bl	8019eb4 <cosf>
 8016efa:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8016efe:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8016f02:	f002 ffd7 	bl	8019eb4 <cosf>
 8016f06:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float st = sinf(theta); float sp = sinf(phi);
 8016f0a:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8016f0e:	f003 f815 	bl	8019f3c <sinf>
 8016f12:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8016f16:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8016f1a:	f003 f80f 	bl	8019f3c <sinf>
 8016f1e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	const double pi = 3.14159265358979323846;
 8016f22:	a347      	add	r3, pc, #284	@ (adr r3, 8017040 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x190>)
 8016f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f28:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// heading = arctan(hx / hy) but for tilt compensation values of hx and hy:
	float hx = data->calibrated[0] * cp + data->calibrated[1] * sp * st - data->calibrated[2] * ct *  sp; // tilt compensated magnetic x
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	ed93 7a05 	vldr	s14, [r3, #20]
 8016f32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8016f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	edd3 6a06 	vldr	s13, [r3, #24]
 8016f40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8016f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016f48:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	edd3 6a07 	vldr	s13, [r3, #28]
 8016f5a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8016f5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016f62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8016f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f6e:	edc7 7a07 	vstr	s15, [r7, #28]
	float hy = data->calibrated[1] * ct - data->calibrated[2] * st; // tilt compensated magnetic y
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	ed93 7a06 	vldr	s14, [r3, #24]
 8016f78:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8016f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	edd3 6a07 	vldr	s13, [r3, #28]
 8016f86:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8016f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f92:	edc7 7a06 	vstr	s15, [r7, #24]

	heading = -1 * (atan2(hx,hy) * 180 / pi) + data->declination;
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7e9 faf4 	bl	8000588 <__aeabi_f2d>
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	460d      	mov	r5, r1
 8016fa4:	edd7 0a06 	vldr	s1, [r7, #24]
 8016fa8:	ed97 0a07 	vldr	s0, [r7, #28]
 8016fac:	f7ff fdca 	bl	8016b44 <_ZSt5atan2ff>
 8016fb0:	eef0 7a40 	vmov.f32	s15, s0
 8016fb4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801704c <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x19c>
 8016fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016fbc:	ee17 0a90 	vmov	r0, s15
 8016fc0:	f7e9 fae2 	bl	8000588 <__aeabi_f2d>
 8016fc4:	a31e      	add	r3, pc, #120	@ (adr r3, 8017040 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x190>)
 8016fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fca:	f7e9 fc5f 	bl	800088c <__aeabi_ddiv>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	4629      	mov	r1, r5
 8016fd6:	f7e9 f977 	bl	80002c8 <__aeabi_dsub>
 8016fda:	4602      	mov	r2, r0
 8016fdc:	460b      	mov	r3, r1
 8016fde:	4610      	mov	r0, r2
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	f7e9 fe01 	bl	8000be8 <__aeabi_d2f>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	647b      	str	r3, [r7, #68]	@ 0x44

	// Wrap to [0,360)
	if (heading < 0.0f) heading += 360.0f;
 8016fea:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8016fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ff6:	d507      	bpl.n	8017008 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x158>
 8016ff8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8016ffc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8017050 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x1a0>
 8017000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017004:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	if (heading >= 360.0f) heading -= 360.0f;
 8017008:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801700c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8017050 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x1a0>
 8017010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017018:	db07      	blt.n	801702a <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x17a>
 801701a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801701e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8017050 <_ZN8HMC5883L11get_headingEP8HMC_dataffPA3_fPf+0x1a0>
 8017022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017026:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	return heading;
 801702a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801702c:	ee07 3a90 	vmov	s15, r3
}
 8017030:	eeb0 0a67 	vmov.f32	s0, s15
 8017034:	3748      	adds	r7, #72	@ 0x48
 8017036:	46bd      	mov	sp, r7
 8017038:	bdb0      	pop	{r4, r5, r7, pc}
 801703a:	bf00      	nop
 801703c:	f3af 8000 	nop.w
 8017040:	54442d18 	.word	0x54442d18
 8017044:	400921fb 	.word	0x400921fb
 8017048:	3c8efa39 	.word	0x3c8efa39
 801704c:	43340000 	.word	0x43340000
 8017050:	43b40000 	.word	0x43b40000

08017054 <_ZN7MPU6050C1Ev>:

/**
 * @brief Construct a new MPU6050::MPU6050 object
 * 
 */
MPU6050::MPU6050() {
 8017054:	b480      	push	{r7}
 8017056:	b083      	sub	sp, #12
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	4a04      	ldr	r2, [pc, #16]	@ (8017070 <_ZN7MPU6050C1Ev+0x1c>)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	4618      	mov	r0, r3
 8017066:	370c      	adds	r7, #12
 8017068:	46bd      	mov	sp, r7
 801706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706e:	4770      	bx	lr
 8017070:	0801dd20 	.word	0x0801dd20

08017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>:
 * @param dev -  a pointer to the MPU6050_data structure
 * @param reg - register address
 * @param data - pointer to the data to be written
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef MPU6050::writeRegister(MPU6050_data *dev, uint8_t reg, uint8_t *data){
 8017074:	b580      	push	{r7, lr}
 8017076:	b088      	sub	sp, #32
 8017078:	af04      	add	r7, sp, #16
 801707a:	60f8      	str	r0, [r7, #12]
 801707c:	60b9      	str	r1, [r7, #8]
 801707e:	603b      	str	r3, [r7, #0]
 8017080:	4613      	mov	r3, r2
 8017082:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data ,1, HAL_MAX_DELAY);
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	6818      	ldr	r0, [r3, #0]
 8017088:	79fb      	ldrb	r3, [r7, #7]
 801708a:	b29a      	uxth	r2, r3
 801708c:	f04f 33ff 	mov.w	r3, #4294967295
 8017090:	9302      	str	r3, [sp, #8]
 8017092:	2301      	movs	r3, #1
 8017094:	9301      	str	r3, [sp, #4]
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	2301      	movs	r3, #1
 801709c:	21d0      	movs	r1, #208	@ 0xd0
 801709e:	f7f1 fb3b 	bl	8008718 <HAL_I2C_Mem_Write>
 80170a2:	4603      	mov	r3, r0
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	3710      	adds	r7, #16
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <_ZN7MPU605012readRegisterEP12MPU6050_datahPh>:
 * @param dev - a pointer to the MPU6050_data structure
 * @param reg - register address
 * @param data - pointer to the data to be read
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef MPU6050::readRegister(MPU6050_data *dev, uint8_t reg, uint8_t *data){
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b088      	sub	sp, #32
 80170b0:	af04      	add	r7, sp, #16
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	603b      	str	r3, [r7, #0]
 80170b8:	4613      	mov	r3, r2
 80170ba:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	6818      	ldr	r0, [r3, #0]
 80170c0:	79fb      	ldrb	r3, [r7, #7]
 80170c2:	b29a      	uxth	r2, r3
 80170c4:	f04f 33ff 	mov.w	r3, #4294967295
 80170c8:	9302      	str	r3, [sp, #8]
 80170ca:	2301      	movs	r3, #1
 80170cc:	9301      	str	r3, [sp, #4]
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	9300      	str	r3, [sp, #0]
 80170d2:	2301      	movs	r3, #1
 80170d4:	21d0      	movs	r1, #208	@ 0xd0
 80170d6:	f7f1 fc33 	bl	8008940 <HAL_I2C_Mem_Read>
 80170da:	4603      	mov	r3, r0
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3710      	adds	r7, #16
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef>:
 * 
 * @param dev a pointer to the MPU6050_data structure
 * @param hi2c a pointer to the I2C handle
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef MPU6050::initialize(MPU6050_data *dev, I2C_HandleTypeDef *hi2c) {
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b088      	sub	sp, #32
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
    /* Store handle */
    dev->i2cHandle = hi2c;
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	601a      	str	r2, [r3, #0]

    /* Zero all data arrays */
    for (int i = 0; i < 3; i++) {
 80170f6:	2300      	movs	r3, #0
 80170f8:	61fb      	str	r3, [r7, #28]
 80170fa:	e023      	b.n	8017144 <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef+0x60>
        dev->acc_mps2[i] = 0.0f;
 80170fc:	68ba      	ldr	r2, [r7, #8]
 80170fe:	69fb      	ldr	r3, [r7, #28]
 8017100:	009b      	lsls	r3, r3, #2
 8017102:	4413      	add	r3, r2
 8017104:	3304      	adds	r3, #4
 8017106:	f04f 0200 	mov.w	r2, #0
 801710a:	601a      	str	r2, [r3, #0]
        dev->gyro_rad[i] = 0.0f;
 801710c:	68ba      	ldr	r2, [r7, #8]
 801710e:	69fb      	ldr	r3, [r7, #28]
 8017110:	3304      	adds	r3, #4
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	4413      	add	r3, r2
 8017116:	f04f 0200 	mov.w	r2, #0
 801711a:	601a      	str	r2, [r3, #0]
        dev->accelBias[i] = 0.0f;
 801711c:	68ba      	ldr	r2, [r7, #8]
 801711e:	69fb      	ldr	r3, [r7, #28]
 8017120:	330a      	adds	r3, #10
 8017122:	009b      	lsls	r3, r3, #2
 8017124:	4413      	add	r3, r2
 8017126:	f04f 0200 	mov.w	r2, #0
 801712a:	601a      	str	r2, [r3, #0]
        dev->gyroBias[i] = 0.0f;
 801712c:	68ba      	ldr	r2, [r7, #8]
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	3306      	adds	r3, #6
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	4413      	add	r3, r2
 8017136:	3304      	adds	r3, #4
 8017138:	f04f 0200 	mov.w	r2, #0
 801713c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	3301      	adds	r3, #1
 8017142:	61fb      	str	r3, [r7, #28]
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	2b02      	cmp	r3, #2
 8017148:	ddd8      	ble.n	80170fc <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef+0x18>
    }
    dev->rxFlag = 0;
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	2200      	movs	r2, #0
 801714e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    uint8_t regData;
    uint8_t errNum = 0;
 8017152:	2300      	movs	r3, #0
 8017154:	76fb      	strb	r3, [r7, #27]
    HAL_StatusTypeDef status;

    /* WHO_AM_I check */
    status = readRegister(dev, WHO_AM_I, &regData);
 8017156:	f107 0319 	add.w	r3, r7, #25
 801715a:	2275      	movs	r2, #117	@ 0x75
 801715c:	68b9      	ldr	r1, [r7, #8]
 801715e:	68f8      	ldr	r0, [r7, #12]
 8017160:	f7ff ffa4 	bl	80170ac <_ZN7MPU605012readRegisterEP12MPU6050_datahPh>
 8017164:	4603      	mov	r3, r0
 8017166:	76bb      	strb	r3, [r7, #26]
    errNum += (status != HAL_OK);
 8017168:	7ebb      	ldrb	r3, [r7, #26]
 801716a:	2b00      	cmp	r3, #0
 801716c:	bf14      	ite	ne
 801716e:	2301      	movne	r3, #1
 8017170:	2300      	moveq	r3, #0
 8017172:	b2db      	uxtb	r3, r3
 8017174:	461a      	mov	r2, r3
 8017176:	7efb      	ldrb	r3, [r7, #27]
 8017178:	4413      	add	r3, r2
 801717a:	76fb      	strb	r3, [r7, #27]

    if (regData == 0x68) {   // keeping your original identity check
 801717c:	7e7b      	ldrb	r3, [r7, #25]
 801717e:	2b68      	cmp	r3, #104	@ 0x68
 8017180:	f040 80a0 	bne.w	80172c4 <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef+0x1e0>
        /* Reset device */
        uint8_t reset = 0x80;
 8017184:	2380      	movs	r3, #128	@ 0x80
 8017186:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, PWR_MGMT_1, &reset);
 8017188:	f107 0318 	add.w	r3, r7, #24
 801718c:	226b      	movs	r2, #107	@ 0x6b
 801718e:	68b9      	ldr	r1, [r7, #8]
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f7ff ff6f 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 8017196:	4603      	mov	r3, r0
 8017198:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 801719a:	7ebb      	ldrb	r3, [r7, #26]
 801719c:	2b00      	cmp	r3, #0
 801719e:	bf14      	ite	ne
 80171a0:	2301      	movne	r3, #1
 80171a2:	2300      	moveq	r3, #0
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	461a      	mov	r2, r3
 80171a8:	7efb      	ldrb	r3, [r7, #27]
 80171aa:	4413      	add	r3, r2
 80171ac:	76fb      	strb	r3, [r7, #27]
        HAL_Delay(100);
 80171ae:	2064      	movs	r0, #100	@ 0x64
 80171b0:	f7ed f922 	bl	80043f8 <HAL_Delay>

        reset = 0x00; // Clock source
 80171b4:	2300      	movs	r3, #0
 80171b6:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, PWR_MGMT_1, &reset);
 80171b8:	f107 0318 	add.w	r3, r7, #24
 80171bc:	226b      	movs	r2, #107	@ 0x6b
 80171be:	68b9      	ldr	r1, [r7, #8]
 80171c0:	68f8      	ldr	r0, [r7, #12]
 80171c2:	f7ff ff57 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 80171c6:	4603      	mov	r3, r0
 80171c8:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 80171ca:	7ebb      	ldrb	r3, [r7, #26]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	bf14      	ite	ne
 80171d0:	2301      	movne	r3, #1
 80171d2:	2300      	moveq	r3, #0
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	461a      	mov	r2, r3
 80171d8:	7efb      	ldrb	r3, [r7, #27]
 80171da:	4413      	add	r3, r2
 80171dc:	76fb      	strb	r3, [r7, #27]

        reset = 0x00; // Enable all sensors
 80171de:	2300      	movs	r3, #0
 80171e0:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, PWR_MGMT_2, &reset);
 80171e2:	f107 0318 	add.w	r3, r7, #24
 80171e6:	226c      	movs	r2, #108	@ 0x6c
 80171e8:	68b9      	ldr	r1, [r7, #8]
 80171ea:	68f8      	ldr	r0, [r7, #12]
 80171ec:	f7ff ff42 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 80171f0:	4603      	mov	r3, r0
 80171f2:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 80171f4:	7ebb      	ldrb	r3, [r7, #26]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	bf14      	ite	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	2300      	moveq	r3, #0
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	461a      	mov	r2, r3
 8017202:	7efb      	ldrb	r3, [r7, #27]
 8017204:	4413      	add	r3, r2
 8017206:	76fb      	strb	r3, [r7, #27]
        HAL_Delay(100);
 8017208:	2064      	movs	r0, #100	@ 0x64
 801720a:	f7ed f8f5 	bl	80043f8 <HAL_Delay>

        /* Sample rate and config */
        uint8_t rate = 39;
 801720e:	2327      	movs	r3, #39	@ 0x27
 8017210:	75fb      	strb	r3, [r7, #23]
        status = writeRegister(dev, SMPLRT_DIV, &rate);
 8017212:	f107 0317 	add.w	r3, r7, #23
 8017216:	2219      	movs	r2, #25
 8017218:	68b9      	ldr	r1, [r7, #8]
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f7ff ff2a 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 8017220:	4603      	mov	r3, r0
 8017222:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 8017224:	7ebb      	ldrb	r3, [r7, #26]
 8017226:	2b00      	cmp	r3, #0
 8017228:	bf14      	ite	ne
 801722a:	2301      	movne	r3, #1
 801722c:	2300      	moveq	r3, #0
 801722e:	b2db      	uxtb	r3, r3
 8017230:	461a      	mov	r2, r3
 8017232:	7efb      	ldrb	r3, [r7, #27]
 8017234:	4413      	add	r3, r2
 8017236:	76fb      	strb	r3, [r7, #27]

        reset = 0x00; // DLPF config
 8017238:	2300      	movs	r3, #0
 801723a:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, CONFIG, &reset);
 801723c:	f107 0318 	add.w	r3, r7, #24
 8017240:	221a      	movs	r2, #26
 8017242:	68b9      	ldr	r1, [r7, #8]
 8017244:	68f8      	ldr	r0, [r7, #12]
 8017246:	f7ff ff15 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 801724a:	4603      	mov	r3, r0
 801724c:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 801724e:	7ebb      	ldrb	r3, [r7, #26]
 8017250:	2b00      	cmp	r3, #0
 8017252:	bf14      	ite	ne
 8017254:	2301      	movne	r3, #1
 8017256:	2300      	moveq	r3, #0
 8017258:	b2db      	uxtb	r3, r3
 801725a:	461a      	mov	r2, r3
 801725c:	7efb      	ldrb	r3, [r7, #27]
 801725e:	4413      	add	r3, r2
 8017260:	76fb      	strb	r3, [r7, #27]

        reset = 0x00; // Gyro ±250dps
 8017262:	2300      	movs	r3, #0
 8017264:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, GYRO_CONFIG, &reset);
 8017266:	f107 0318 	add.w	r3, r7, #24
 801726a:	221b      	movs	r2, #27
 801726c:	68b9      	ldr	r1, [r7, #8]
 801726e:	68f8      	ldr	r0, [r7, #12]
 8017270:	f7ff ff00 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 8017274:	4603      	mov	r3, r0
 8017276:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 8017278:	7ebb      	ldrb	r3, [r7, #26]
 801727a:	2b00      	cmp	r3, #0
 801727c:	bf14      	ite	ne
 801727e:	2301      	movne	r3, #1
 8017280:	2300      	moveq	r3, #0
 8017282:	b2db      	uxtb	r3, r3
 8017284:	461a      	mov	r2, r3
 8017286:	7efb      	ldrb	r3, [r7, #27]
 8017288:	4413      	add	r3, r2
 801728a:	76fb      	strb	r3, [r7, #27]

        reset = 0x00; // Accel ±2g
 801728c:	2300      	movs	r3, #0
 801728e:	763b      	strb	r3, [r7, #24]
        status = writeRegister(dev, ACCEL_CONFIG, &reset);
 8017290:	f107 0318 	add.w	r3, r7, #24
 8017294:	221c      	movs	r2, #28
 8017296:	68b9      	ldr	r1, [r7, #8]
 8017298:	68f8      	ldr	r0, [r7, #12]
 801729a:	f7ff feeb 	bl	8017074 <_ZN7MPU605013writeRegisterEP12MPU6050_datahPh>
 801729e:	4603      	mov	r3, r0
 80172a0:	76bb      	strb	r3, [r7, #26]
        errNum += (status != HAL_OK);
 80172a2:	7ebb      	ldrb	r3, [r7, #26]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	bf14      	ite	ne
 80172a8:	2301      	movne	r3, #1
 80172aa:	2300      	moveq	r3, #0
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	461a      	mov	r2, r3
 80172b0:	7efb      	ldrb	r3, [r7, #27]
 80172b2:	4413      	add	r3, r2
 80172b4:	76fb      	strb	r3, [r7, #27]


        return (errNum == 0) ? HAL_OK : HAL_ERROR;
 80172b6:	7efb      	ldrb	r3, [r7, #27]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	bf14      	ite	ne
 80172bc:	2301      	movne	r3, #1
 80172be:	2300      	moveq	r3, #0
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	e000      	b.n	80172c6 <_ZN7MPU605010initializeEP12MPU6050_dataP19__I2C_HandleTypeDef+0x1e2>
    }
    return HAL_ERROR;
 80172c4:	2301      	movs	r3, #1
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3720      	adds	r7, #32
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
	...

080172d0 <_ZN7MPU605012read_IMU_DMAEP12MPU6050_data>:
 * @brief Read IMU data using DMA
 * 
 * @param dev - a pointer to the MPU6050_data structure
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef MPU6050::read_IMU_DMA(MPU6050_data *dev){
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b086      	sub	sp, #24
 80172d4:	af02      	add	r7, sp, #8
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(dev->i2cHandle, MPU6050_ADDR, ACCEL_XOUT_H,
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	6818      	ldr	r0, [r3, #0]
 80172de:	230e      	movs	r3, #14
 80172e0:	9301      	str	r3, [sp, #4]
 80172e2:	4b07      	ldr	r3, [pc, #28]	@ (8017300 <_ZN7MPU605012read_IMU_DMAEP12MPU6050_data+0x30>)
 80172e4:	9300      	str	r3, [sp, #0]
 80172e6:	2301      	movs	r3, #1
 80172e8:	223b      	movs	r2, #59	@ 0x3b
 80172ea:	21d0      	movs	r1, #208	@ 0xd0
 80172ec:	f7f1 fc42 	bl	8008b74 <HAL_I2C_Mem_Read_DMA>
 80172f0:	4603      	mov	r3, r0
 80172f2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, imuBuffer, 14);

	return status;
 80172f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	20000e18 	.word	0x20000e18
 8017304:	00000000 	.word	0x00000000

08017308 <_ZN7MPU605012process_dataEP12MPU6050_data>:
 * @brief Process raw IMU data and convert to physical units
 * 
 * @param dev - a pointer to the MPU6050_data structure 
 * @return uint8_t 
 */
uint8_t MPU6050::process_data(MPU6050_data *dev){
 8017308:	b5b0      	push	{r4, r5, r7, lr}
 801730a:	b086      	sub	sp, #24
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
 8017310:	6039      	str	r1, [r7, #0]

	int16_t accel_x_out = (int16_t)((imuBuffer[0] << 8) | imuBuffer[1]);
 8017312:	4b9b      	ldr	r3, [pc, #620]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	021b      	lsls	r3, r3, #8
 8017318:	b21a      	sxth	r2, r3
 801731a:	4b99      	ldr	r3, [pc, #612]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 801731c:	785b      	ldrb	r3, [r3, #1]
 801731e:	b21b      	sxth	r3, r3
 8017320:	4313      	orrs	r3, r2
 8017322:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y_out = (int16_t)((imuBuffer[2] << 8) | imuBuffer[3]);
 8017324:	4b96      	ldr	r3, [pc, #600]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017326:	789b      	ldrb	r3, [r3, #2]
 8017328:	021b      	lsls	r3, r3, #8
 801732a:	b21a      	sxth	r2, r3
 801732c:	4b94      	ldr	r3, [pc, #592]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 801732e:	78db      	ldrb	r3, [r3, #3]
 8017330:	b21b      	sxth	r3, r3
 8017332:	4313      	orrs	r3, r2
 8017334:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z_out = (int16_t)((imuBuffer[4] << 8) | imuBuffer[5]);
 8017336:	4b92      	ldr	r3, [pc, #584]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017338:	791b      	ldrb	r3, [r3, #4]
 801733a:	021b      	lsls	r3, r3, #8
 801733c:	b21a      	sxth	r2, r3
 801733e:	4b90      	ldr	r3, [pc, #576]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017340:	795b      	ldrb	r3, [r3, #5]
 8017342:	b21b      	sxth	r3, r3
 8017344:	4313      	orrs	r3, r2
 8017346:	827b      	strh	r3, [r7, #18]

	int16_t temp_out    = (int16_t)((imuBuffer[6] << 8) | imuBuffer[7]);
 8017348:	4b8d      	ldr	r3, [pc, #564]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 801734a:	799b      	ldrb	r3, [r3, #6]
 801734c:	021b      	lsls	r3, r3, #8
 801734e:	b21a      	sxth	r2, r3
 8017350:	4b8b      	ldr	r3, [pc, #556]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017352:	79db      	ldrb	r3, [r3, #7]
 8017354:	b21b      	sxth	r3, r3
 8017356:	4313      	orrs	r3, r2
 8017358:	823b      	strh	r3, [r7, #16]

	int16_t gyro_x_out  = (int16_t)((imuBuffer[8] << 8) | imuBuffer[9]);
 801735a:	4b89      	ldr	r3, [pc, #548]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 801735c:	7a1b      	ldrb	r3, [r3, #8]
 801735e:	021b      	lsls	r3, r3, #8
 8017360:	b21a      	sxth	r2, r3
 8017362:	4b87      	ldr	r3, [pc, #540]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017364:	7a5b      	ldrb	r3, [r3, #9]
 8017366:	b21b      	sxth	r3, r3
 8017368:	4313      	orrs	r3, r2
 801736a:	81fb      	strh	r3, [r7, #14]
	int16_t gyro_y_out  = (int16_t)((imuBuffer[10] << 8) | imuBuffer[11]);
 801736c:	4b84      	ldr	r3, [pc, #528]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 801736e:	7a9b      	ldrb	r3, [r3, #10]
 8017370:	021b      	lsls	r3, r3, #8
 8017372:	b21a      	sxth	r2, r3
 8017374:	4b82      	ldr	r3, [pc, #520]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017376:	7adb      	ldrb	r3, [r3, #11]
 8017378:	b21b      	sxth	r3, r3
 801737a:	4313      	orrs	r3, r2
 801737c:	81bb      	strh	r3, [r7, #12]
	int16_t gyro_z_out  = (int16_t)((imuBuffer[12] << 8) | imuBuffer[13]);
 801737e:	4b80      	ldr	r3, [pc, #512]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017380:	7b1b      	ldrb	r3, [r3, #12]
 8017382:	021b      	lsls	r3, r3, #8
 8017384:	b21a      	sxth	r2, r3
 8017386:	4b7e      	ldr	r3, [pc, #504]	@ (8017580 <_ZN7MPU605012process_dataEP12MPU6050_data+0x278>)
 8017388:	7b5b      	ldrb	r3, [r3, #13]
 801738a:	b21b      	sxth	r3, r3
 801738c:	4313      	orrs	r3, r2
 801738e:	817b      	strh	r3, [r7, #10]


	// convert readings to mps^2
	dev->acc_mps2[0] = (accel_x_out * CONVERT_TO_MPS) - dev->accelBias[0];
 8017390:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017394:	ee07 3a90 	vmov	s15, r3
 8017398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801739c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80173a0:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8017584 <_ZN7MPU605012process_dataEP12MPU6050_data+0x27c>
 80173a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80173ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = (accel_y_out * CONVERT_TO_MPS) - dev->accelBias[1];
 80173b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80173bc:	ee07 3a90 	vmov	s15, r3
 80173c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80173c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8017584 <_ZN7MPU605012process_dataEP12MPU6050_data+0x27c>
 80173cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80173d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = (accel_z_out * CONVERT_TO_MPS) - dev->accelBias[2];
 80173e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80173e4:	ee07 3a90 	vmov	s15, r3
 80173e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80173f0:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8017584 <_ZN7MPU605012process_dataEP12MPU6050_data+0x27c>
 80173f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173f8:	683b      	ldr	r3, [r7, #0]
 80173fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80173fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	edc3 7a03 	vstr	s15, [r3, #12]

	// convert to degrees celcius
	dev->temp_C = (static_cast<float>(temp_out) / 340.0f) + 36.53f;
 8017408:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801740c:	ee07 3a90 	vmov	s15, r3
 8017410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017414:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8017588 <_ZN7MPU605012process_dataEP12MPU6050_data+0x280>
 8017418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801741c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 801758c <_ZN7MPU605012process_dataEP12MPU6050_data+0x284>
 8017420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	// convert to radians per second
	dev->gyro_rad[0] = (gyro_x_out * CONVERT_TO_DEGPS * DEG_TO_RAD) - dev->gyroBias[0];
 801742a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801742e:	4618      	mov	r0, r3
 8017430:	f7e9 f898 	bl	8000564 <__aeabi_i2d>
 8017434:	f04f 0200 	mov.w	r2, #0
 8017438:	4b55      	ldr	r3, [pc, #340]	@ (8017590 <_ZN7MPU605012process_dataEP12MPU6050_data+0x288>)
 801743a:	f7e9 f8fd 	bl	8000638 <__aeabi_dmul>
 801743e:	4602      	mov	r2, r0
 8017440:	460b      	mov	r3, r1
 8017442:	4610      	mov	r0, r2
 8017444:	4619      	mov	r1, r3
 8017446:	f04f 0200 	mov.w	r2, #0
 801744a:	4b52      	ldr	r3, [pc, #328]	@ (8017594 <_ZN7MPU605012process_dataEP12MPU6050_data+0x28c>)
 801744c:	f7e9 fa1e 	bl	800088c <__aeabi_ddiv>
 8017450:	4602      	mov	r2, r0
 8017452:	460b      	mov	r3, r1
 8017454:	4610      	mov	r0, r2
 8017456:	4619      	mov	r1, r3
 8017458:	a347      	add	r3, pc, #284	@ (adr r3, 8017578 <_ZN7MPU605012process_dataEP12MPU6050_data+0x270>)
 801745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745e:	f7e9 f8eb 	bl	8000638 <__aeabi_dmul>
 8017462:	4602      	mov	r2, r0
 8017464:	460b      	mov	r3, r1
 8017466:	4614      	mov	r4, r2
 8017468:	461d      	mov	r5, r3
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	69db      	ldr	r3, [r3, #28]
 801746e:	4618      	mov	r0, r3
 8017470:	f7e9 f88a 	bl	8000588 <__aeabi_f2d>
 8017474:	4602      	mov	r2, r0
 8017476:	460b      	mov	r3, r1
 8017478:	4620      	mov	r0, r4
 801747a:	4629      	mov	r1, r5
 801747c:	f7e8 ff24 	bl	80002c8 <__aeabi_dsub>
 8017480:	4602      	mov	r2, r0
 8017482:	460b      	mov	r3, r1
 8017484:	4610      	mov	r0, r2
 8017486:	4619      	mov	r1, r3
 8017488:	f7e9 fbae 	bl	8000be8 <__aeabi_d2f>
 801748c:	4602      	mov	r2, r0
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	611a      	str	r2, [r3, #16]
	dev->gyro_rad[1] = (gyro_y_out * CONVERT_TO_DEGPS * DEG_TO_RAD) - dev->gyroBias[1];
 8017492:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017496:	4618      	mov	r0, r3
 8017498:	f7e9 f864 	bl	8000564 <__aeabi_i2d>
 801749c:	f04f 0200 	mov.w	r2, #0
 80174a0:	4b3b      	ldr	r3, [pc, #236]	@ (8017590 <_ZN7MPU605012process_dataEP12MPU6050_data+0x288>)
 80174a2:	f7e9 f8c9 	bl	8000638 <__aeabi_dmul>
 80174a6:	4602      	mov	r2, r0
 80174a8:	460b      	mov	r3, r1
 80174aa:	4610      	mov	r0, r2
 80174ac:	4619      	mov	r1, r3
 80174ae:	f04f 0200 	mov.w	r2, #0
 80174b2:	4b38      	ldr	r3, [pc, #224]	@ (8017594 <_ZN7MPU605012process_dataEP12MPU6050_data+0x28c>)
 80174b4:	f7e9 f9ea 	bl	800088c <__aeabi_ddiv>
 80174b8:	4602      	mov	r2, r0
 80174ba:	460b      	mov	r3, r1
 80174bc:	4610      	mov	r0, r2
 80174be:	4619      	mov	r1, r3
 80174c0:	a32d      	add	r3, pc, #180	@ (adr r3, 8017578 <_ZN7MPU605012process_dataEP12MPU6050_data+0x270>)
 80174c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c6:	f7e9 f8b7 	bl	8000638 <__aeabi_dmul>
 80174ca:	4602      	mov	r2, r0
 80174cc:	460b      	mov	r3, r1
 80174ce:	4614      	mov	r4, r2
 80174d0:	461d      	mov	r5, r3
 80174d2:	683b      	ldr	r3, [r7, #0]
 80174d4:	6a1b      	ldr	r3, [r3, #32]
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7e9 f856 	bl	8000588 <__aeabi_f2d>
 80174dc:	4602      	mov	r2, r0
 80174de:	460b      	mov	r3, r1
 80174e0:	4620      	mov	r0, r4
 80174e2:	4629      	mov	r1, r5
 80174e4:	f7e8 fef0 	bl	80002c8 <__aeabi_dsub>
 80174e8:	4602      	mov	r2, r0
 80174ea:	460b      	mov	r3, r1
 80174ec:	4610      	mov	r0, r2
 80174ee:	4619      	mov	r1, r3
 80174f0:	f7e9 fb7a 	bl	8000be8 <__aeabi_d2f>
 80174f4:	4602      	mov	r2, r0
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	615a      	str	r2, [r3, #20]
	dev->gyro_rad[2] = (gyro_z_out * CONVERT_TO_DEGPS * DEG_TO_RAD) - dev->gyroBias[2];
 80174fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80174fe:	4618      	mov	r0, r3
 8017500:	f7e9 f830 	bl	8000564 <__aeabi_i2d>
 8017504:	f04f 0200 	mov.w	r2, #0
 8017508:	4b21      	ldr	r3, [pc, #132]	@ (8017590 <_ZN7MPU605012process_dataEP12MPU6050_data+0x288>)
 801750a:	f7e9 f895 	bl	8000638 <__aeabi_dmul>
 801750e:	4602      	mov	r2, r0
 8017510:	460b      	mov	r3, r1
 8017512:	4610      	mov	r0, r2
 8017514:	4619      	mov	r1, r3
 8017516:	f04f 0200 	mov.w	r2, #0
 801751a:	4b1e      	ldr	r3, [pc, #120]	@ (8017594 <_ZN7MPU605012process_dataEP12MPU6050_data+0x28c>)
 801751c:	f7e9 f9b6 	bl	800088c <__aeabi_ddiv>
 8017520:	4602      	mov	r2, r0
 8017522:	460b      	mov	r3, r1
 8017524:	4610      	mov	r0, r2
 8017526:	4619      	mov	r1, r3
 8017528:	a313      	add	r3, pc, #76	@ (adr r3, 8017578 <_ZN7MPU605012process_dataEP12MPU6050_data+0x270>)
 801752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752e:	f7e9 f883 	bl	8000638 <__aeabi_dmul>
 8017532:	4602      	mov	r2, r0
 8017534:	460b      	mov	r3, r1
 8017536:	4614      	mov	r4, r2
 8017538:	461d      	mov	r5, r3
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801753e:	4618      	mov	r0, r3
 8017540:	f7e9 f822 	bl	8000588 <__aeabi_f2d>
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	4620      	mov	r0, r4
 801754a:	4629      	mov	r1, r5
 801754c:	f7e8 febc 	bl	80002c8 <__aeabi_dsub>
 8017550:	4602      	mov	r2, r0
 8017552:	460b      	mov	r3, r1
 8017554:	4610      	mov	r0, r2
 8017556:	4619      	mov	r1, r3
 8017558:	f7e9 fb46 	bl	8000be8 <__aeabi_d2f>
 801755c:	4602      	mov	r2, r0
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	619a      	str	r2, [r3, #24]

	return dev->rxFlag = 1;
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	2201      	movs	r2, #1
 8017566:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
}
 8017570:	4618      	mov	r0, r3
 8017572:	3718      	adds	r7, #24
 8017574:	46bd      	mov	sp, r7
 8017576:	bdb0      	pop	{r4, r5, r7, pc}
 8017578:	20000000 	.word	0x20000000
 801757c:	3f91df47 	.word	0x3f91df47
 8017580:	20000e18 	.word	0x20000e18
 8017584:	47000000 	.word	0x47000000
 8017588:	43aa0000 	.word	0x43aa0000
 801758c:	42121eb8 	.word	0x42121eb8
 8017590:	406f4000 	.word	0x406f4000
 8017594:	40e00000 	.word	0x40e00000

08017598 <_ZN7MPU6050D1Ev>:

    return HAL_OK;
}


MPU6050::~MPU6050() {
 8017598:	b480      	push	{r7}
 801759a:	b083      	sub	sp, #12
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	4a04      	ldr	r2, [pc, #16]	@ (80175b4 <_ZN7MPU6050D1Ev+0x1c>)
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	4618      	mov	r0, r3
 80175aa:	370c      	adds	r7, #12
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr
 80175b4:	0801dd20 	.word	0x0801dd20

080175b8 <_ZN7MPU6050D0Ev>:
MPU6050::~MPU6050() {
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
}
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f7ff ffe9 	bl	8017598 <_ZN7MPU6050D1Ev>
 80175c6:	2104      	movs	r1, #4
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f003 fc75 	bl	801aeb8 <_ZdlPvj>
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	4618      	mov	r0, r3
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80175d8:	b590      	push	{r4, r7, lr}
 80175da:	b089      	sub	sp, #36	@ 0x24
 80175dc:	af04      	add	r7, sp, #16
 80175de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80175e0:	2301      	movs	r3, #1
 80175e2:	2202      	movs	r2, #2
 80175e4:	2102      	movs	r1, #2
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 fc85 	bl	8017ef6 <USBH_FindInterface>
 80175ec:	4603      	mov	r3, r0
 80175ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80175f0:	7bfb      	ldrb	r3, [r7, #15]
 80175f2:	2bff      	cmp	r3, #255	@ 0xff
 80175f4:	d002      	beq.n	80175fc <USBH_CDC_InterfaceInit+0x24>
 80175f6:	7bfb      	ldrb	r3, [r7, #15]
 80175f8:	2b01      	cmp	r3, #1
 80175fa:	d901      	bls.n	8017600 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80175fc:	2302      	movs	r3, #2
 80175fe:	e13d      	b.n	801787c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8017600:	7bfb      	ldrb	r3, [r7, #15]
 8017602:	4619      	mov	r1, r3
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f000 fc5a 	bl	8017ebe <USBH_SelectInterface>
 801760a:	4603      	mov	r3, r0
 801760c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801760e:	7bbb      	ldrb	r3, [r7, #14]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d001      	beq.n	8017618 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8017614:	2302      	movs	r3, #2
 8017616:	e131      	b.n	801787c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 801761e:	2050      	movs	r0, #80	@ 0x50
 8017620:	f003 fc4e 	bl	801aec0 <malloc>
 8017624:	4603      	mov	r3, r0
 8017626:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801762e:	69db      	ldr	r3, [r3, #28]
 8017630:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d101      	bne.n	801763c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8017638:	2302      	movs	r3, #2
 801763a:	e11f      	b.n	801787c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801763c:	2250      	movs	r2, #80	@ 0x50
 801763e:	2100      	movs	r1, #0
 8017640:	68b8      	ldr	r0, [r7, #8]
 8017642:	f004 fa8c 	bl	801bb5e <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8017646:	7bfb      	ldrb	r3, [r7, #15]
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	211a      	movs	r1, #26
 801764c:	fb01 f303 	mul.w	r3, r1, r3
 8017650:	4413      	add	r3, r2
 8017652:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	b25b      	sxtb	r3, r3
 801765a:	2b00      	cmp	r3, #0
 801765c:	da15      	bge.n	801768a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801765e:	7bfb      	ldrb	r3, [r7, #15]
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	211a      	movs	r1, #26
 8017664:	fb01 f303 	mul.w	r3, r1, r3
 8017668:	4413      	add	r3, r2
 801766a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801766e:	781a      	ldrb	r2, [r3, #0]
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017674:	7bfb      	ldrb	r3, [r7, #15]
 8017676:	687a      	ldr	r2, [r7, #4]
 8017678:	211a      	movs	r1, #26
 801767a:	fb01 f303 	mul.w	r3, r1, r3
 801767e:	4413      	add	r3, r2
 8017680:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8017684:	881a      	ldrh	r2, [r3, #0]
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	785b      	ldrb	r3, [r3, #1]
 801768e:	4619      	mov	r1, r3
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f000 ffba 	bl	801860a <USBH_AllocPipe>
 8017696:	4603      	mov	r3, r0
 8017698:	461a      	mov	r2, r3
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	7819      	ldrb	r1, [r3, #0]
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	7858      	ldrb	r0, [r3, #1]
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80176b2:	68ba      	ldr	r2, [r7, #8]
 80176b4:	8952      	ldrh	r2, [r2, #10]
 80176b6:	9202      	str	r2, [sp, #8]
 80176b8:	2203      	movs	r2, #3
 80176ba:	9201      	str	r2, [sp, #4]
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	4623      	mov	r3, r4
 80176c0:	4602      	mov	r2, r0
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f000 ff72 	bl	80185ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2200      	movs	r2, #0
 80176ce:	4619      	mov	r1, r3
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f001 fa85 	bl	8018be0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80176d6:	2300      	movs	r3, #0
 80176d8:	2200      	movs	r2, #0
 80176da:	210a      	movs	r1, #10
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f000 fc0a 	bl	8017ef6 <USBH_FindInterface>
 80176e2:	4603      	mov	r3, r0
 80176e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80176e6:	7bfb      	ldrb	r3, [r7, #15]
 80176e8:	2bff      	cmp	r3, #255	@ 0xff
 80176ea:	d002      	beq.n	80176f2 <USBH_CDC_InterfaceInit+0x11a>
 80176ec:	7bfb      	ldrb	r3, [r7, #15]
 80176ee:	2b01      	cmp	r3, #1
 80176f0:	d901      	bls.n	80176f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80176f2:	2302      	movs	r3, #2
 80176f4:	e0c2      	b.n	801787c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80176f6:	7bfb      	ldrb	r3, [r7, #15]
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	211a      	movs	r1, #26
 80176fc:	fb01 f303 	mul.w	r3, r1, r3
 8017700:	4413      	add	r3, r2
 8017702:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	b25b      	sxtb	r3, r3
 801770a:	2b00      	cmp	r3, #0
 801770c:	da16      	bge.n	801773c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801770e:	7bfb      	ldrb	r3, [r7, #15]
 8017710:	687a      	ldr	r2, [r7, #4]
 8017712:	211a      	movs	r1, #26
 8017714:	fb01 f303 	mul.w	r3, r1, r3
 8017718:	4413      	add	r3, r2
 801771a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801771e:	781a      	ldrb	r2, [r3, #0]
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017724:	7bfb      	ldrb	r3, [r7, #15]
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	211a      	movs	r1, #26
 801772a:	fb01 f303 	mul.w	r3, r1, r3
 801772e:	4413      	add	r3, r2
 8017730:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8017734:	881a      	ldrh	r2, [r3, #0]
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	835a      	strh	r2, [r3, #26]
 801773a:	e015      	b.n	8017768 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801773c:	7bfb      	ldrb	r3, [r7, #15]
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	211a      	movs	r1, #26
 8017742:	fb01 f303 	mul.w	r3, r1, r3
 8017746:	4413      	add	r3, r2
 8017748:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801774c:	781a      	ldrb	r2, [r3, #0]
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017752:	7bfb      	ldrb	r3, [r7, #15]
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	211a      	movs	r1, #26
 8017758:	fb01 f303 	mul.w	r3, r1, r3
 801775c:	4413      	add	r3, r2
 801775e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8017762:	881a      	ldrh	r2, [r3, #0]
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8017768:	7bfb      	ldrb	r3, [r7, #15]
 801776a:	687a      	ldr	r2, [r7, #4]
 801776c:	211a      	movs	r1, #26
 801776e:	fb01 f303 	mul.w	r3, r1, r3
 8017772:	4413      	add	r3, r2
 8017774:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	b25b      	sxtb	r3, r3
 801777c:	2b00      	cmp	r3, #0
 801777e:	da16      	bge.n	80177ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8017780:	7bfb      	ldrb	r3, [r7, #15]
 8017782:	687a      	ldr	r2, [r7, #4]
 8017784:	211a      	movs	r1, #26
 8017786:	fb01 f303 	mul.w	r3, r1, r3
 801778a:	4413      	add	r3, r2
 801778c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8017790:	781a      	ldrb	r2, [r3, #0]
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8017796:	7bfb      	ldrb	r3, [r7, #15]
 8017798:	687a      	ldr	r2, [r7, #4]
 801779a:	211a      	movs	r1, #26
 801779c:	fb01 f303 	mul.w	r3, r1, r3
 80177a0:	4413      	add	r3, r2
 80177a2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80177a6:	881a      	ldrh	r2, [r3, #0]
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	835a      	strh	r2, [r3, #26]
 80177ac:	e015      	b.n	80177da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80177ae:	7bfb      	ldrb	r3, [r7, #15]
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	211a      	movs	r1, #26
 80177b4:	fb01 f303 	mul.w	r3, r1, r3
 80177b8:	4413      	add	r3, r2
 80177ba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80177be:	781a      	ldrb	r2, [r3, #0]
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80177c4:	7bfb      	ldrb	r3, [r7, #15]
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	211a      	movs	r1, #26
 80177ca:	fb01 f303 	mul.w	r3, r1, r3
 80177ce:	4413      	add	r3, r2
 80177d0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80177d4:	881a      	ldrh	r2, [r3, #0]
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	7b9b      	ldrb	r3, [r3, #14]
 80177de:	4619      	mov	r1, r3
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f000 ff12 	bl	801860a <USBH_AllocPipe>
 80177e6:	4603      	mov	r3, r0
 80177e8:	461a      	mov	r2, r3
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	7bdb      	ldrb	r3, [r3, #15]
 80177f2:	4619      	mov	r1, r3
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f000 ff08 	bl	801860a <USBH_AllocPipe>
 80177fa:	4603      	mov	r3, r0
 80177fc:	461a      	mov	r2, r3
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	7b59      	ldrb	r1, [r3, #13]
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	7b98      	ldrb	r0, [r3, #14]
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8017816:	68ba      	ldr	r2, [r7, #8]
 8017818:	8b12      	ldrh	r2, [r2, #24]
 801781a:	9202      	str	r2, [sp, #8]
 801781c:	2202      	movs	r2, #2
 801781e:	9201      	str	r2, [sp, #4]
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	4623      	mov	r3, r4
 8017824:	4602      	mov	r2, r0
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f000 fec0 	bl	80185ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	7b19      	ldrb	r1, [r3, #12]
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	7bd8      	ldrb	r0, [r3, #15]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8017840:	68ba      	ldr	r2, [r7, #8]
 8017842:	8b52      	ldrh	r2, [r2, #26]
 8017844:	9202      	str	r2, [sp, #8]
 8017846:	2202      	movs	r2, #2
 8017848:	9201      	str	r2, [sp, #4]
 801784a:	9300      	str	r3, [sp, #0]
 801784c:	4623      	mov	r3, r4
 801784e:	4602      	mov	r2, r0
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 feab 	bl	80185ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	2200      	movs	r2, #0
 801785a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	7b5b      	ldrb	r3, [r3, #13]
 8017862:	2200      	movs	r2, #0
 8017864:	4619      	mov	r1, r3
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f001 f9ba 	bl	8018be0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	7b1b      	ldrb	r3, [r3, #12]
 8017870:	2200      	movs	r2, #0
 8017872:	4619      	mov	r1, r3
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f001 f9b3 	bl	8018be0 <USBH_LL_SetToggle>

  return USBH_OK;
 801787a:	2300      	movs	r3, #0
}
 801787c:	4618      	mov	r0, r3
 801787e:	3714      	adds	r7, #20
 8017880:	46bd      	mov	sp, r7
 8017882:	bd90      	pop	{r4, r7, pc}

08017884 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017892:	69db      	ldr	r3, [r3, #28]
 8017894:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d00e      	beq.n	80178bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	4619      	mov	r1, r3
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f000 fea0 	bl	80185ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	781b      	ldrb	r3, [r3, #0]
 80178ae:	4619      	mov	r1, r3
 80178b0:	6878      	ldr	r0, [r7, #4]
 80178b2:	f000 fecb 	bl	801864c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	2200      	movs	r2, #0
 80178ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	7b1b      	ldrb	r3, [r3, #12]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d00e      	beq.n	80178e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	7b1b      	ldrb	r3, [r3, #12]
 80178c8:	4619      	mov	r1, r3
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f000 fe8d 	bl	80185ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	7b1b      	ldrb	r3, [r3, #12]
 80178d4:	4619      	mov	r1, r3
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f000 feb8 	bl	801864c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	2200      	movs	r2, #0
 80178e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	7b5b      	ldrb	r3, [r3, #13]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d00e      	beq.n	8017908 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	7b5b      	ldrb	r3, [r3, #13]
 80178ee:	4619      	mov	r1, r3
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f000 fe7a 	bl	80185ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	7b5b      	ldrb	r3, [r3, #13]
 80178fa:	4619      	mov	r1, r3
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f000 fea5 	bl	801864c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2200      	movs	r2, #0
 8017906:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801790e:	69db      	ldr	r3, [r3, #28]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d00b      	beq.n	801792c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801791a:	69db      	ldr	r3, [r3, #28]
 801791c:	4618      	mov	r0, r3
 801791e:	f003 fad7 	bl	801aed0 <free>
    phost->pActiveClass->pData = 0U;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017928:	2200      	movs	r2, #0
 801792a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801792c:	2300      	movs	r3, #0
}
 801792e:	4618      	mov	r0, r3
 8017930:	3710      	adds	r7, #16
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}

08017936 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b084      	sub	sp, #16
 801793a:	af00      	add	r7, sp, #0
 801793c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017944:	69db      	ldr	r3, [r3, #28]
 8017946:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	3340      	adds	r3, #64	@ 0x40
 801794c:	4619      	mov	r1, r3
 801794e:	6878      	ldr	r0, [r7, #4]
 8017950:	f000 f8b1 	bl	8017ab6 <GetLineCoding>
 8017954:	4603      	mov	r3, r0
 8017956:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8017958:	7afb      	ldrb	r3, [r7, #11]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d105      	bne.n	801796a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8017964:	2102      	movs	r1, #2
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801796a:	7afb      	ldrb	r3, [r7, #11]
}
 801796c:	4618      	mov	r0, r3
 801796e:	3710      	adds	r7, #16
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}

08017974 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801797c:	2301      	movs	r3, #1
 801797e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8017980:	2300      	movs	r3, #0
 8017982:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801798a:	69db      	ldr	r3, [r3, #28]
 801798c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8017994:	2b04      	cmp	r3, #4
 8017996:	d877      	bhi.n	8017a88 <USBH_CDC_Process+0x114>
 8017998:	a201      	add	r2, pc, #4	@ (adr r2, 80179a0 <USBH_CDC_Process+0x2c>)
 801799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801799e:	bf00      	nop
 80179a0:	080179b5 	.word	0x080179b5
 80179a4:	080179bb 	.word	0x080179bb
 80179a8:	080179eb 	.word	0x080179eb
 80179ac:	08017a5f 	.word	0x08017a5f
 80179b0:	08017a6d 	.word	0x08017a6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80179b4:	2300      	movs	r3, #0
 80179b6:	73fb      	strb	r3, [r7, #15]
      break;
 80179b8:	e06d      	b.n	8017a96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80179be:	4619      	mov	r1, r3
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f000 f897 	bl	8017af4 <SetLineCoding>
 80179c6:	4603      	mov	r3, r0
 80179c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80179ca:	7bbb      	ldrb	r3, [r7, #14]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d104      	bne.n	80179da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	2202      	movs	r2, #2
 80179d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80179d8:	e058      	b.n	8017a8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80179da:	7bbb      	ldrb	r3, [r7, #14]
 80179dc:	2b01      	cmp	r3, #1
 80179de:	d055      	beq.n	8017a8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	2204      	movs	r2, #4
 80179e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80179e8:	e050      	b.n	8017a8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	3340      	adds	r3, #64	@ 0x40
 80179ee:	4619      	mov	r1, r3
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f000 f860 	bl	8017ab6 <GetLineCoding>
 80179f6:	4603      	mov	r3, r0
 80179f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80179fa:	7bbb      	ldrb	r3, [r7, #14]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d126      	bne.n	8017a4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	2200      	movs	r2, #0
 8017a04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a12:	791b      	ldrb	r3, [r3, #4]
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d13b      	bne.n	8017a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d133      	bne.n	8017a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8017a34:	429a      	cmp	r2, r3
 8017a36:	d12b      	bne.n	8017a90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d124      	bne.n	8017a90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f000 f958 	bl	8017cfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8017a4c:	e020      	b.n	8017a90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8017a4e:	7bbb      	ldrb	r3, [r7, #14]
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	d01d      	beq.n	8017a90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	2204      	movs	r2, #4
 8017a58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8017a5c:	e018      	b.n	8017a90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f000 f867 	bl	8017b32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f000 f8da 	bl	8017c1e <CDC_ProcessReception>
      break;
 8017a6a:	e014      	b.n	8017a96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8017a6c:	2100      	movs	r1, #0
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f000 fb27 	bl	80180c2 <USBH_ClrFeature>
 8017a74:	4603      	mov	r3, r0
 8017a76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8017a78:	7bbb      	ldrb	r3, [r7, #14]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d10a      	bne.n	8017a94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	2200      	movs	r2, #0
 8017a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8017a86:	e005      	b.n	8017a94 <USBH_CDC_Process+0x120>

    default:
      break;
 8017a88:	bf00      	nop
 8017a8a:	e004      	b.n	8017a96 <USBH_CDC_Process+0x122>
      break;
 8017a8c:	bf00      	nop
 8017a8e:	e002      	b.n	8017a96 <USBH_CDC_Process+0x122>
      break;
 8017a90:	bf00      	nop
 8017a92:	e000      	b.n	8017a96 <USBH_CDC_Process+0x122>
      break;
 8017a94:	bf00      	nop

  }

  return status;
 8017a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3710      	adds	r7, #16
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b083      	sub	sp, #12
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8017aa8:	2300      	movs	r3, #0
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	370c      	adds	r7, #12
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab4:	4770      	bx	lr

08017ab6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b082      	sub	sp, #8
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	6078      	str	r0, [r7, #4]
 8017abe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	22a1      	movs	r2, #161	@ 0xa1
 8017ac4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2221      	movs	r2, #33	@ 0x21
 8017aca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2200      	movs	r2, #0
 8017ad0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	2207      	movs	r2, #7
 8017adc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	2207      	movs	r2, #7
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f000 fb10 	bl	801810a <USBH_CtlReq>
 8017aea:	4603      	mov	r3, r0
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3708      	adds	r7, #8
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2221      	movs	r2, #33	@ 0x21
 8017b02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2220      	movs	r2, #32
 8017b08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2200      	movs	r2, #0
 8017b14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2207      	movs	r2, #7
 8017b1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	2207      	movs	r2, #7
 8017b20:	4619      	mov	r1, r3
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f000 faf1 	bl	801810a <USBH_CtlReq>
 8017b28:	4603      	mov	r3, r0
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3708      	adds	r7, #8
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}

08017b32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8017b32:	b580      	push	{r7, lr}
 8017b34:	b086      	sub	sp, #24
 8017b36:	af02      	add	r7, sp, #8
 8017b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017b40:	69db      	ldr	r3, [r3, #28]
 8017b42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017b44:	2300      	movs	r3, #0
 8017b46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d002      	beq.n	8017b58 <CDC_ProcessTransmission+0x26>
 8017b52:	2b02      	cmp	r3, #2
 8017b54:	d023      	beq.n	8017b9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8017b56:	e05e      	b.n	8017c16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b5c:	68fa      	ldr	r2, [r7, #12]
 8017b5e:	8b12      	ldrh	r2, [r2, #24]
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d90b      	bls.n	8017b7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	69d9      	ldr	r1, [r3, #28]
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	8b1a      	ldrh	r2, [r3, #24]
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	7b5b      	ldrb	r3, [r3, #13]
 8017b70:	2001      	movs	r0, #1
 8017b72:	9000      	str	r0, [sp, #0]
 8017b74:	6878      	ldr	r0, [r7, #4]
 8017b76:	f000 fcd6 	bl	8018526 <USBH_BulkSendData>
 8017b7a:	e00b      	b.n	8017b94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8017b84:	b29a      	uxth	r2, r3
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	7b5b      	ldrb	r3, [r3, #13]
 8017b8a:	2001      	movs	r0, #1
 8017b8c:	9000      	str	r0, [sp, #0]
 8017b8e:	6878      	ldr	r0, [r7, #4]
 8017b90:	f000 fcc9 	bl	8018526 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	2202      	movs	r2, #2
 8017b98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8017b9c:	e03b      	b.n	8017c16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	7b5b      	ldrb	r3, [r3, #13]
 8017ba2:	4619      	mov	r1, r3
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	f000 fff1 	bl	8018b8c <USBH_LL_GetURBState>
 8017baa:	4603      	mov	r3, r0
 8017bac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8017bae:	7afb      	ldrb	r3, [r7, #11]
 8017bb0:	2b01      	cmp	r3, #1
 8017bb2:	d128      	bne.n	8017c06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bb8:	68fa      	ldr	r2, [r7, #12]
 8017bba:	8b12      	ldrh	r2, [r2, #24]
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d90e      	bls.n	8017bde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bc4:	68fa      	ldr	r2, [r7, #12]
 8017bc6:	8b12      	ldrh	r2, [r2, #24]
 8017bc8:	1a9a      	subs	r2, r3, r2
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	69db      	ldr	r3, [r3, #28]
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	8b12      	ldrh	r2, [r2, #24]
 8017bd6:	441a      	add	r2, r3
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	61da      	str	r2, [r3, #28]
 8017bdc:	e002      	b.n	8017be4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	2200      	movs	r2, #0
 8017be2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d004      	beq.n	8017bf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	2201      	movs	r2, #1
 8017bf0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8017bf4:	e00e      	b.n	8017c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f000 f868 	bl	8017cd4 <USBH_CDC_TransmitCallback>
      break;
 8017c04:	e006      	b.n	8017c14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8017c06:	7afb      	ldrb	r3, [r7, #11]
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d103      	bne.n	8017c14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2201      	movs	r2, #1
 8017c10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8017c14:	bf00      	nop
  }
}
 8017c16:	bf00      	nop
 8017c18:	3710      	adds	r7, #16
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}

08017c1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8017c1e:	b580      	push	{r7, lr}
 8017c20:	b086      	sub	sp, #24
 8017c22:	af00      	add	r7, sp, #0
 8017c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017c2c:	69db      	ldr	r3, [r3, #28]
 8017c2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017c30:	2300      	movs	r3, #0
 8017c32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8017c3a:	2b03      	cmp	r3, #3
 8017c3c:	d002      	beq.n	8017c44 <CDC_ProcessReception+0x26>
 8017c3e:	2b04      	cmp	r3, #4
 8017c40:	d00e      	beq.n	8017c60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8017c42:	e043      	b.n	8017ccc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8017c44:	697b      	ldr	r3, [r7, #20]
 8017c46:	6a19      	ldr	r1, [r3, #32]
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	8b5a      	ldrh	r2, [r3, #26]
 8017c4c:	697b      	ldr	r3, [r7, #20]
 8017c4e:	7b1b      	ldrb	r3, [r3, #12]
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 fc8d 	bl	8018570 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	2204      	movs	r2, #4
 8017c5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8017c5e:	e035      	b.n	8017ccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	7b1b      	ldrb	r3, [r3, #12]
 8017c64:	4619      	mov	r1, r3
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f000 ff90 	bl	8018b8c <USBH_LL_GetURBState>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8017c70:	7cfb      	ldrb	r3, [r7, #19]
 8017c72:	2b01      	cmp	r3, #1
 8017c74:	d129      	bne.n	8017cca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	7b1b      	ldrb	r3, [r3, #12]
 8017c7a:	4619      	mov	r1, r3
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f000 fef3 	bl	8018a68 <USBH_LL_GetLastXferSize>
 8017c82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8017c84:	697b      	ldr	r3, [r7, #20]
 8017c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d016      	beq.n	8017cbc <CDC_ProcessReception+0x9e>
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	8b5b      	ldrh	r3, [r3, #26]
 8017c92:	461a      	mov	r2, r3
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d110      	bne.n	8017cbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	1ad2      	subs	r2, r2, r3
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	6a1a      	ldr	r2, [r3, #32]
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	441a      	add	r2, r3
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	2203      	movs	r2, #3
 8017cb6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8017cba:	e006      	b.n	8017cca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f000 f80f 	bl	8017ce8 <USBH_CDC_ReceiveCallback>
      break;
 8017cca:	bf00      	nop
  }
}
 8017ccc:	bf00      	nop
 8017cce:	3718      	adds	r7, #24
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}

08017cd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017cdc:	bf00      	nop
 8017cde:	370c      	adds	r7, #12
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr

08017ce8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b083      	sub	sp, #12
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017cf0:	bf00      	nop
 8017cf2:	370c      	adds	r7, #12
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfa:	4770      	bx	lr

08017cfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b083      	sub	sp, #12
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017d04:	bf00      	nop
 8017d06:	370c      	adds	r7, #12
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr

08017d10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	60b9      	str	r1, [r7, #8]
 8017d1a:	4613      	mov	r3, r2
 8017d1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d101      	bne.n	8017d28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8017d24:	2302      	movs	r3, #2
 8017d26:	e029      	b.n	8017d7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	79fa      	ldrb	r2, [r7, #7]
 8017d2c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	2200      	movs	r2, #0
 8017d34:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8017d40:	68f8      	ldr	r0, [r7, #12]
 8017d42:	f000 f81f 	bl	8017d84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	2200      	movs	r2, #0
 8017d52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2200      	movs	r2, #0
 8017d62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d003      	beq.n	8017d74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	68ba      	ldr	r2, [r7, #8]
 8017d70:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8017d74:	68f8      	ldr	r0, [r7, #12]
 8017d76:	f000 fe05 	bl	8018984 <USBH_LL_Init>

  return USBH_OK;
 8017d7a:	2300      	movs	r3, #0
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}

08017d84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b084      	sub	sp, #16
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017d90:	2300      	movs	r3, #0
 8017d92:	60fb      	str	r3, [r7, #12]
 8017d94:	e009      	b.n	8017daa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	33e0      	adds	r3, #224	@ 0xe0
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	4413      	add	r3, r2
 8017da0:	2200      	movs	r2, #0
 8017da2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	3301      	adds	r3, #1
 8017da8:	60fb      	str	r3, [r7, #12]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	2b0f      	cmp	r3, #15
 8017dae:	d9f2      	bls.n	8017d96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017db0:	2300      	movs	r3, #0
 8017db2:	60fb      	str	r3, [r7, #12]
 8017db4:	e009      	b.n	8017dca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	4413      	add	r3, r2
 8017dbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	60fb      	str	r3, [r7, #12]
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017dd0:	d3f1      	bcc.n	8017db6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2200      	movs	r2, #0
 8017ddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2201      	movs	r2, #1
 8017de2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2200      	movs	r2, #0
 8017de8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2201      	movs	r2, #1
 8017df0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	2240      	movs	r2, #64	@ 0x40
 8017df6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2200      	movs	r2, #0
 8017e02:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2201      	movs	r2, #1
 8017e0a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2200      	movs	r2, #0
 8017e12:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2200      	movs	r2, #0
 8017e1a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	331c      	adds	r3, #28
 8017e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017e26:	2100      	movs	r1, #0
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f003 fe98 	bl	801bb5e <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8017e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017e38:	2100      	movs	r1, #0
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f003 fe8f 	bl	801bb5e <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8017e46:	2212      	movs	r2, #18
 8017e48:	2100      	movs	r1, #0
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f003 fe87 	bl	801bb5e <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8017e56:	223e      	movs	r2, #62	@ 0x3e
 8017e58:	2100      	movs	r1, #0
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f003 fe7f 	bl	801bb5e <memset>

  return USBH_OK;
 8017e60:	2300      	movs	r3, #0
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	3710      	adds	r7, #16
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}

08017e6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8017e6a:	b480      	push	{r7}
 8017e6c:	b085      	sub	sp, #20
 8017e6e:	af00      	add	r7, sp, #0
 8017e70:	6078      	str	r0, [r7, #4]
 8017e72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8017e74:	2300      	movs	r3, #0
 8017e76:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d016      	beq.n	8017eac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10e      	bne.n	8017ea6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8017e8e:	1c59      	adds	r1, r3, #1
 8017e90:	687a      	ldr	r2, [r7, #4]
 8017e92:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8017e96:	687a      	ldr	r2, [r7, #4]
 8017e98:	33de      	adds	r3, #222	@ 0xde
 8017e9a:	6839      	ldr	r1, [r7, #0]
 8017e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	73fb      	strb	r3, [r7, #15]
 8017ea4:	e004      	b.n	8017eb0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8017ea6:	2302      	movs	r3, #2
 8017ea8:	73fb      	strb	r3, [r7, #15]
 8017eaa:	e001      	b.n	8017eb0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8017eac:	2302      	movs	r3, #2
 8017eae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3714      	adds	r7, #20
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebc:	4770      	bx	lr

08017ebe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8017ebe:	b480      	push	{r7}
 8017ec0:	b085      	sub	sp, #20
 8017ec2:	af00      	add	r7, sp, #0
 8017ec4:	6078      	str	r0, [r7, #4]
 8017ec6:	460b      	mov	r3, r1
 8017ec8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8017ed4:	78fa      	ldrb	r2, [r7, #3]
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d204      	bcs.n	8017ee4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	78fa      	ldrb	r2, [r7, #3]
 8017ede:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8017ee2:	e001      	b.n	8017ee8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8017ee4:	2302      	movs	r3, #2
 8017ee6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3714      	adds	r7, #20
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef4:	4770      	bx	lr

08017ef6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8017ef6:	b480      	push	{r7}
 8017ef8:	b087      	sub	sp, #28
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	4608      	mov	r0, r1
 8017f00:	4611      	mov	r1, r2
 8017f02:	461a      	mov	r2, r3
 8017f04:	4603      	mov	r3, r0
 8017f06:	70fb      	strb	r3, [r7, #3]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	70bb      	strb	r3, [r7, #2]
 8017f0c:	4613      	mov	r3, r2
 8017f0e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8017f10:	2300      	movs	r3, #0
 8017f12:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8017f14:	2300      	movs	r3, #0
 8017f16:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8017f1e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8017f20:	e025      	b.n	8017f6e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8017f22:	7dfb      	ldrb	r3, [r7, #23]
 8017f24:	221a      	movs	r2, #26
 8017f26:	fb02 f303 	mul.w	r3, r2, r3
 8017f2a:	3308      	adds	r3, #8
 8017f2c:	68fa      	ldr	r2, [r7, #12]
 8017f2e:	4413      	add	r3, r2
 8017f30:	3302      	adds	r3, #2
 8017f32:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	795b      	ldrb	r3, [r3, #5]
 8017f38:	78fa      	ldrb	r2, [r7, #3]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d002      	beq.n	8017f44 <USBH_FindInterface+0x4e>
 8017f3e:	78fb      	ldrb	r3, [r7, #3]
 8017f40:	2bff      	cmp	r3, #255	@ 0xff
 8017f42:	d111      	bne.n	8017f68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8017f48:	78ba      	ldrb	r2, [r7, #2]
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d002      	beq.n	8017f54 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8017f4e:	78bb      	ldrb	r3, [r7, #2]
 8017f50:	2bff      	cmp	r3, #255	@ 0xff
 8017f52:	d109      	bne.n	8017f68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8017f58:	787a      	ldrb	r2, [r7, #1]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d002      	beq.n	8017f64 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8017f5e:	787b      	ldrb	r3, [r7, #1]
 8017f60:	2bff      	cmp	r3, #255	@ 0xff
 8017f62:	d101      	bne.n	8017f68 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8017f64:	7dfb      	ldrb	r3, [r7, #23]
 8017f66:	e006      	b.n	8017f76 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8017f68:	7dfb      	ldrb	r3, [r7, #23]
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8017f6e:	7dfb      	ldrb	r3, [r7, #23]
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	d9d6      	bls.n	8017f22 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8017f74:	23ff      	movs	r3, #255	@ 0xff
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	371c      	adds	r7, #28
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr

08017f82 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8017f82:	b580      	push	{r7, lr}
 8017f84:	b082      	sub	sp, #8
 8017f86:	af00      	add	r7, sp, #0
 8017f88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f000 fd36 	bl	80189fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8017f90:	2101      	movs	r1, #1
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f000 fe0d 	bl	8018bb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8017f98:	2300      	movs	r3, #0
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3708      	adds	r7, #8
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}

08017fa2 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8017fa2:	b480      	push	{r7}
 8017fa4:	b083      	sub	sp, #12
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	6078      	str	r0, [r7, #4]
 8017faa:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8017fb4:	bf00      	nop
 8017fb6:	370c      	adds	r7, #12
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fbe:	4770      	bx	lr

08017fc0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8017fce:	1c5a      	adds	r2, r3, #1
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 f804 	bl	8017fe4 <USBH_HandleSof>
}
 8017fdc:	bf00      	nop
 8017fde:	3708      	adds	r7, #8
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	2b0b      	cmp	r3, #11
 8017ff4:	d10a      	bne.n	801800c <USBH_HandleSof+0x28>
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d005      	beq.n	801800c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8018006:	699b      	ldr	r3, [r3, #24]
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	4798      	blx	r3
  }
}
 801800c:	bf00      	nop
 801800e:	3708      	adds	r7, #8
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8018014:	b480      	push	{r7}
 8018016:	b083      	sub	sp, #12
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2201      	movs	r2, #1
 8018020:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8018024:	bf00      	nop
}
 8018026:	370c      	adds	r7, #12
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr

08018030 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8018030:	b480      	push	{r7}
 8018032:	b083      	sub	sp, #12
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2200      	movs	r2, #0
 801803c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8018040:	bf00      	nop
}
 8018042:	370c      	adds	r7, #12
 8018044:	46bd      	mov	sp, r7
 8018046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804a:	4770      	bx	lr

0801804c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801804c:	b480      	push	{r7}
 801804e:	b083      	sub	sp, #12
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2201      	movs	r2, #1
 8018058:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	2200      	movs	r2, #0
 8018060:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2200      	movs	r2, #0
 8018068:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801806c:	2300      	movs	r3, #0
}
 801806e:	4618      	mov	r0, r3
 8018070:	370c      	adds	r7, #12
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr

0801807a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801807a:	b580      	push	{r7, lr}
 801807c:	b082      	sub	sp, #8
 801807e:	af00      	add	r7, sp, #0
 8018080:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2201      	movs	r2, #1
 8018086:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2200      	movs	r2, #0
 801808e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	2200      	movs	r2, #0
 8018096:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801809a:	6878      	ldr	r0, [r7, #4]
 801809c:	f000 fcc9 	bl	8018a32 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	791b      	ldrb	r3, [r3, #4]
 80180a4:	4619      	mov	r1, r3
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f000 fad0 	bl	801864c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	795b      	ldrb	r3, [r3, #5]
 80180b0:	4619      	mov	r1, r3
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f000 faca 	bl	801864c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80180b8:	2300      	movs	r3, #0
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3708      	adds	r7, #8
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}

080180c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80180c2:	b580      	push	{r7, lr}
 80180c4:	b082      	sub	sp, #8
 80180c6:	af00      	add	r7, sp, #0
 80180c8:	6078      	str	r0, [r7, #4]
 80180ca:	460b      	mov	r3, r1
 80180cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	789b      	ldrb	r3, [r3, #2]
 80180d2:	2b01      	cmp	r3, #1
 80180d4:	d10f      	bne.n	80180f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2202      	movs	r2, #2
 80180da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2201      	movs	r2, #1
 80180e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80180e8:	78fb      	ldrb	r3, [r7, #3]
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2200      	movs	r2, #0
 80180f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80180f6:	2200      	movs	r2, #0
 80180f8:	2100      	movs	r1, #0
 80180fa:	6878      	ldr	r0, [r7, #4]
 80180fc:	f000 f805 	bl	801810a <USBH_CtlReq>
 8018100:	4603      	mov	r3, r0
}
 8018102:	4618      	mov	r0, r3
 8018104:	3708      	adds	r7, #8
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}

0801810a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801810a:	b580      	push	{r7, lr}
 801810c:	b086      	sub	sp, #24
 801810e:	af00      	add	r7, sp, #0
 8018110:	60f8      	str	r0, [r7, #12]
 8018112:	60b9      	str	r1, [r7, #8]
 8018114:	4613      	mov	r3, r2
 8018116:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8018118:	2301      	movs	r3, #1
 801811a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	789b      	ldrb	r3, [r3, #2]
 8018120:	2b01      	cmp	r3, #1
 8018122:	d002      	beq.n	801812a <USBH_CtlReq+0x20>
 8018124:	2b02      	cmp	r3, #2
 8018126:	d00f      	beq.n	8018148 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8018128:	e027      	b.n	801817a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	68ba      	ldr	r2, [r7, #8]
 801812e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	88fa      	ldrh	r2, [r7, #6]
 8018134:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2201      	movs	r2, #1
 801813a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	2202      	movs	r2, #2
 8018140:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8018142:	2301      	movs	r3, #1
 8018144:	75fb      	strb	r3, [r7, #23]
      break;
 8018146:	e018      	b.n	801817a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8018148:	68f8      	ldr	r0, [r7, #12]
 801814a:	f000 f81b 	bl	8018184 <USBH_HandleControl>
 801814e:	4603      	mov	r3, r0
 8018150:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8018152:	7dfb      	ldrb	r3, [r7, #23]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d002      	beq.n	801815e <USBH_CtlReq+0x54>
 8018158:	7dfb      	ldrb	r3, [r7, #23]
 801815a:	2b03      	cmp	r3, #3
 801815c:	d106      	bne.n	801816c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2201      	movs	r2, #1
 8018162:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2200      	movs	r2, #0
 8018168:	761a      	strb	r2, [r3, #24]
      break;
 801816a:	e005      	b.n	8018178 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801816c:	7dfb      	ldrb	r3, [r7, #23]
 801816e:	2b02      	cmp	r3, #2
 8018170:	d102      	bne.n	8018178 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	2201      	movs	r2, #1
 8018176:	709a      	strb	r2, [r3, #2]
      break;
 8018178:	bf00      	nop
  }
  return status;
 801817a:	7dfb      	ldrb	r3, [r7, #23]
}
 801817c:	4618      	mov	r0, r3
 801817e:	3718      	adds	r7, #24
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}

08018184 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b086      	sub	sp, #24
 8018188:	af02      	add	r7, sp, #8
 801818a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801818c:	2301      	movs	r3, #1
 801818e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8018190:	2300      	movs	r3, #0
 8018192:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	7e1b      	ldrb	r3, [r3, #24]
 8018198:	3b01      	subs	r3, #1
 801819a:	2b0a      	cmp	r3, #10
 801819c:	f200 8156 	bhi.w	801844c <USBH_HandleControl+0x2c8>
 80181a0:	a201      	add	r2, pc, #4	@ (adr r2, 80181a8 <USBH_HandleControl+0x24>)
 80181a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a6:	bf00      	nop
 80181a8:	080181d5 	.word	0x080181d5
 80181ac:	080181ef 	.word	0x080181ef
 80181b0:	08018259 	.word	0x08018259
 80181b4:	0801827f 	.word	0x0801827f
 80181b8:	080182b7 	.word	0x080182b7
 80181bc:	080182e1 	.word	0x080182e1
 80181c0:	08018333 	.word	0x08018333
 80181c4:	08018355 	.word	0x08018355
 80181c8:	08018391 	.word	0x08018391
 80181cc:	080183b7 	.word	0x080183b7
 80181d0:	080183f5 	.word	0x080183f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f103 0110 	add.w	r1, r3, #16
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	795b      	ldrb	r3, [r3, #5]
 80181de:	461a      	mov	r2, r3
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f000 f943 	bl	801846c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	2202      	movs	r2, #2
 80181ea:	761a      	strb	r2, [r3, #24]
      break;
 80181ec:	e139      	b.n	8018462 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	795b      	ldrb	r3, [r3, #5]
 80181f2:	4619      	mov	r1, r3
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f000 fcc9 	bl	8018b8c <USBH_LL_GetURBState>
 80181fa:	4603      	mov	r3, r0
 80181fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80181fe:	7bbb      	ldrb	r3, [r7, #14]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d11e      	bne.n	8018242 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	7c1b      	ldrb	r3, [r3, #16]
 8018208:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801820c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	8adb      	ldrh	r3, [r3, #22]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d00a      	beq.n	801822c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8018216:	7b7b      	ldrb	r3, [r7, #13]
 8018218:	2b80      	cmp	r3, #128	@ 0x80
 801821a:	d103      	bne.n	8018224 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2203      	movs	r2, #3
 8018220:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8018222:	e115      	b.n	8018450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2205      	movs	r2, #5
 8018228:	761a      	strb	r2, [r3, #24]
      break;
 801822a:	e111      	b.n	8018450 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 801822c:	7b7b      	ldrb	r3, [r7, #13]
 801822e:	2b80      	cmp	r3, #128	@ 0x80
 8018230:	d103      	bne.n	801823a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	2209      	movs	r2, #9
 8018236:	761a      	strb	r2, [r3, #24]
      break;
 8018238:	e10a      	b.n	8018450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2207      	movs	r2, #7
 801823e:	761a      	strb	r2, [r3, #24]
      break;
 8018240:	e106      	b.n	8018450 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8018242:	7bbb      	ldrb	r3, [r7, #14]
 8018244:	2b04      	cmp	r3, #4
 8018246:	d003      	beq.n	8018250 <USBH_HandleControl+0xcc>
 8018248:	7bbb      	ldrb	r3, [r7, #14]
 801824a:	2b02      	cmp	r3, #2
 801824c:	f040 8100 	bne.w	8018450 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	220b      	movs	r2, #11
 8018254:	761a      	strb	r2, [r3, #24]
      break;
 8018256:	e0fb      	b.n	8018450 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801825e:	b29a      	uxth	r2, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6899      	ldr	r1, [r3, #8]
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	899a      	ldrh	r2, [r3, #12]
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	791b      	ldrb	r3, [r3, #4]
 8018270:	6878      	ldr	r0, [r7, #4]
 8018272:	f000 f93a 	bl	80184ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2204      	movs	r2, #4
 801827a:	761a      	strb	r2, [r3, #24]
      break;
 801827c:	e0f1      	b.n	8018462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	791b      	ldrb	r3, [r3, #4]
 8018282:	4619      	mov	r1, r3
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f000 fc81 	bl	8018b8c <USBH_LL_GetURBState>
 801828a:	4603      	mov	r3, r0
 801828c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801828e:	7bbb      	ldrb	r3, [r7, #14]
 8018290:	2b01      	cmp	r3, #1
 8018292:	d102      	bne.n	801829a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2209      	movs	r2, #9
 8018298:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801829a:	7bbb      	ldrb	r3, [r7, #14]
 801829c:	2b05      	cmp	r3, #5
 801829e:	d102      	bne.n	80182a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80182a0:	2303      	movs	r3, #3
 80182a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80182a4:	e0d6      	b.n	8018454 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80182a6:	7bbb      	ldrb	r3, [r7, #14]
 80182a8:	2b04      	cmp	r3, #4
 80182aa:	f040 80d3 	bne.w	8018454 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	220b      	movs	r2, #11
 80182b2:	761a      	strb	r2, [r3, #24]
      break;
 80182b4:	e0ce      	b.n	8018454 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6899      	ldr	r1, [r3, #8]
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	899a      	ldrh	r2, [r3, #12]
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	795b      	ldrb	r3, [r3, #5]
 80182c2:	2001      	movs	r0, #1
 80182c4:	9000      	str	r0, [sp, #0]
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	f000 f8ea 	bl	80184a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80182d2:	b29a      	uxth	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	2206      	movs	r2, #6
 80182dc:	761a      	strb	r2, [r3, #24]
      break;
 80182de:	e0c0      	b.n	8018462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	795b      	ldrb	r3, [r3, #5]
 80182e4:	4619      	mov	r1, r3
 80182e6:	6878      	ldr	r0, [r7, #4]
 80182e8:	f000 fc50 	bl	8018b8c <USBH_LL_GetURBState>
 80182ec:	4603      	mov	r3, r0
 80182ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80182f0:	7bbb      	ldrb	r3, [r7, #14]
 80182f2:	2b01      	cmp	r3, #1
 80182f4:	d103      	bne.n	80182fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2207      	movs	r2, #7
 80182fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80182fc:	e0ac      	b.n	8018458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80182fe:	7bbb      	ldrb	r3, [r7, #14]
 8018300:	2b05      	cmp	r3, #5
 8018302:	d105      	bne.n	8018310 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	220c      	movs	r2, #12
 8018308:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801830a:	2303      	movs	r3, #3
 801830c:	73fb      	strb	r3, [r7, #15]
      break;
 801830e:	e0a3      	b.n	8018458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8018310:	7bbb      	ldrb	r3, [r7, #14]
 8018312:	2b02      	cmp	r3, #2
 8018314:	d103      	bne.n	801831e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2205      	movs	r2, #5
 801831a:	761a      	strb	r2, [r3, #24]
      break;
 801831c:	e09c      	b.n	8018458 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 801831e:	7bbb      	ldrb	r3, [r7, #14]
 8018320:	2b04      	cmp	r3, #4
 8018322:	f040 8099 	bne.w	8018458 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	220b      	movs	r2, #11
 801832a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801832c:	2302      	movs	r3, #2
 801832e:	73fb      	strb	r3, [r7, #15]
      break;
 8018330:	e092      	b.n	8018458 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	791b      	ldrb	r3, [r3, #4]
 8018336:	2200      	movs	r2, #0
 8018338:	2100      	movs	r1, #0
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f000 f8d5 	bl	80184ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8018346:	b29a      	uxth	r2, r3
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2208      	movs	r2, #8
 8018350:	761a      	strb	r2, [r3, #24]

      break;
 8018352:	e086      	b.n	8018462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	791b      	ldrb	r3, [r3, #4]
 8018358:	4619      	mov	r1, r3
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f000 fc16 	bl	8018b8c <USBH_LL_GetURBState>
 8018360:	4603      	mov	r3, r0
 8018362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8018364:	7bbb      	ldrb	r3, [r7, #14]
 8018366:	2b01      	cmp	r3, #1
 8018368:	d105      	bne.n	8018376 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	220d      	movs	r2, #13
 801836e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8018370:	2300      	movs	r3, #0
 8018372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8018374:	e072      	b.n	801845c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8018376:	7bbb      	ldrb	r3, [r7, #14]
 8018378:	2b04      	cmp	r3, #4
 801837a:	d103      	bne.n	8018384 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	220b      	movs	r2, #11
 8018380:	761a      	strb	r2, [r3, #24]
      break;
 8018382:	e06b      	b.n	801845c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8018384:	7bbb      	ldrb	r3, [r7, #14]
 8018386:	2b05      	cmp	r3, #5
 8018388:	d168      	bne.n	801845c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 801838a:	2303      	movs	r3, #3
 801838c:	73fb      	strb	r3, [r7, #15]
      break;
 801838e:	e065      	b.n	801845c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	795b      	ldrb	r3, [r3, #5]
 8018394:	2201      	movs	r2, #1
 8018396:	9200      	str	r2, [sp, #0]
 8018398:	2200      	movs	r2, #0
 801839a:	2100      	movs	r1, #0
 801839c:	6878      	ldr	r0, [r7, #4]
 801839e:	f000 f87f 	bl	80184a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80183a8:	b29a      	uxth	r2, r3
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	220a      	movs	r2, #10
 80183b2:	761a      	strb	r2, [r3, #24]
      break;
 80183b4:	e055      	b.n	8018462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	795b      	ldrb	r3, [r3, #5]
 80183ba:	4619      	mov	r1, r3
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	f000 fbe5 	bl	8018b8c <USBH_LL_GetURBState>
 80183c2:	4603      	mov	r3, r0
 80183c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80183c6:	7bbb      	ldrb	r3, [r7, #14]
 80183c8:	2b01      	cmp	r3, #1
 80183ca:	d105      	bne.n	80183d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80183cc:	2300      	movs	r3, #0
 80183ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	220d      	movs	r2, #13
 80183d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80183d6:	e043      	b.n	8018460 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80183d8:	7bbb      	ldrb	r3, [r7, #14]
 80183da:	2b02      	cmp	r3, #2
 80183dc:	d103      	bne.n	80183e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	2209      	movs	r2, #9
 80183e2:	761a      	strb	r2, [r3, #24]
      break;
 80183e4:	e03c      	b.n	8018460 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80183e6:	7bbb      	ldrb	r3, [r7, #14]
 80183e8:	2b04      	cmp	r3, #4
 80183ea:	d139      	bne.n	8018460 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	220b      	movs	r2, #11
 80183f0:	761a      	strb	r2, [r3, #24]
      break;
 80183f2:	e035      	b.n	8018460 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	7e5b      	ldrb	r3, [r3, #25]
 80183f8:	3301      	adds	r3, #1
 80183fa:	b2da      	uxtb	r2, r3
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	765a      	strb	r2, [r3, #25]
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	7e5b      	ldrb	r3, [r3, #25]
 8018404:	2b02      	cmp	r3, #2
 8018406:	d806      	bhi.n	8018416 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2201      	movs	r2, #1
 801840c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	2201      	movs	r2, #1
 8018412:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8018414:	e025      	b.n	8018462 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801841c:	2106      	movs	r1, #6
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2200      	movs	r2, #0
 8018426:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	795b      	ldrb	r3, [r3, #5]
 801842c:	4619      	mov	r1, r3
 801842e:	6878      	ldr	r0, [r7, #4]
 8018430:	f000 f90c 	bl	801864c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	791b      	ldrb	r3, [r3, #4]
 8018438:	4619      	mov	r1, r3
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f000 f906 	bl	801864c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2200      	movs	r2, #0
 8018444:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8018446:	2302      	movs	r3, #2
 8018448:	73fb      	strb	r3, [r7, #15]
      break;
 801844a:	e00a      	b.n	8018462 <USBH_HandleControl+0x2de>

    default:
      break;
 801844c:	bf00      	nop
 801844e:	e008      	b.n	8018462 <USBH_HandleControl+0x2de>
      break;
 8018450:	bf00      	nop
 8018452:	e006      	b.n	8018462 <USBH_HandleControl+0x2de>
      break;
 8018454:	bf00      	nop
 8018456:	e004      	b.n	8018462 <USBH_HandleControl+0x2de>
      break;
 8018458:	bf00      	nop
 801845a:	e002      	b.n	8018462 <USBH_HandleControl+0x2de>
      break;
 801845c:	bf00      	nop
 801845e:	e000      	b.n	8018462 <USBH_HandleControl+0x2de>
      break;
 8018460:	bf00      	nop
  }

  return status;
 8018462:	7bfb      	ldrb	r3, [r7, #15]
}
 8018464:	4618      	mov	r0, r3
 8018466:	3710      	adds	r7, #16
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b088      	sub	sp, #32
 8018470:	af04      	add	r7, sp, #16
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	4613      	mov	r3, r2
 8018478:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801847a:	79f9      	ldrb	r1, [r7, #7]
 801847c:	2300      	movs	r3, #0
 801847e:	9303      	str	r3, [sp, #12]
 8018480:	2308      	movs	r3, #8
 8018482:	9302      	str	r3, [sp, #8]
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	9301      	str	r3, [sp, #4]
 8018488:	2300      	movs	r3, #0
 801848a:	9300      	str	r3, [sp, #0]
 801848c:	2300      	movs	r3, #0
 801848e:	2200      	movs	r2, #0
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f000 fb4a 	bl	8018b2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3710      	adds	r7, #16
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b088      	sub	sp, #32
 80184a4:	af04      	add	r7, sp, #16
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	4611      	mov	r1, r2
 80184ac:	461a      	mov	r2, r3
 80184ae:	460b      	mov	r3, r1
 80184b0:	80fb      	strh	r3, [r7, #6]
 80184b2:	4613      	mov	r3, r2
 80184b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d001      	beq.n	80184c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80184c0:	2300      	movs	r3, #0
 80184c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80184c4:	7979      	ldrb	r1, [r7, #5]
 80184c6:	7e3b      	ldrb	r3, [r7, #24]
 80184c8:	9303      	str	r3, [sp, #12]
 80184ca:	88fb      	ldrh	r3, [r7, #6]
 80184cc:	9302      	str	r3, [sp, #8]
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	9301      	str	r3, [sp, #4]
 80184d2:	2301      	movs	r3, #1
 80184d4:	9300      	str	r3, [sp, #0]
 80184d6:	2300      	movs	r3, #0
 80184d8:	2200      	movs	r2, #0
 80184da:	68f8      	ldr	r0, [r7, #12]
 80184dc:	f000 fb25 	bl	8018b2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80184e0:	2300      	movs	r3, #0
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	3710      	adds	r7, #16
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd80      	pop	{r7, pc}

080184ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80184ea:	b580      	push	{r7, lr}
 80184ec:	b088      	sub	sp, #32
 80184ee:	af04      	add	r7, sp, #16
 80184f0:	60f8      	str	r0, [r7, #12]
 80184f2:	60b9      	str	r1, [r7, #8]
 80184f4:	4611      	mov	r1, r2
 80184f6:	461a      	mov	r2, r3
 80184f8:	460b      	mov	r3, r1
 80184fa:	80fb      	strh	r3, [r7, #6]
 80184fc:	4613      	mov	r3, r2
 80184fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018500:	7979      	ldrb	r1, [r7, #5]
 8018502:	2300      	movs	r3, #0
 8018504:	9303      	str	r3, [sp, #12]
 8018506:	88fb      	ldrh	r3, [r7, #6]
 8018508:	9302      	str	r3, [sp, #8]
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	2301      	movs	r3, #1
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	2300      	movs	r3, #0
 8018514:	2201      	movs	r2, #1
 8018516:	68f8      	ldr	r0, [r7, #12]
 8018518:	f000 fb07 	bl	8018b2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801851c:	2300      	movs	r3, #0

}
 801851e:	4618      	mov	r0, r3
 8018520:	3710      	adds	r7, #16
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}

08018526 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8018526:	b580      	push	{r7, lr}
 8018528:	b088      	sub	sp, #32
 801852a:	af04      	add	r7, sp, #16
 801852c:	60f8      	str	r0, [r7, #12]
 801852e:	60b9      	str	r1, [r7, #8]
 8018530:	4611      	mov	r1, r2
 8018532:	461a      	mov	r2, r3
 8018534:	460b      	mov	r3, r1
 8018536:	80fb      	strh	r3, [r7, #6]
 8018538:	4613      	mov	r3, r2
 801853a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8018542:	2b00      	cmp	r3, #0
 8018544:	d001      	beq.n	801854a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8018546:	2300      	movs	r3, #0
 8018548:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801854a:	7979      	ldrb	r1, [r7, #5]
 801854c:	7e3b      	ldrb	r3, [r7, #24]
 801854e:	9303      	str	r3, [sp, #12]
 8018550:	88fb      	ldrh	r3, [r7, #6]
 8018552:	9302      	str	r3, [sp, #8]
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	9301      	str	r3, [sp, #4]
 8018558:	2301      	movs	r3, #1
 801855a:	9300      	str	r3, [sp, #0]
 801855c:	2302      	movs	r3, #2
 801855e:	2200      	movs	r2, #0
 8018560:	68f8      	ldr	r0, [r7, #12]
 8018562:	f000 fae2 	bl	8018b2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8018566:	2300      	movs	r3, #0
}
 8018568:	4618      	mov	r0, r3
 801856a:	3710      	adds	r7, #16
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b088      	sub	sp, #32
 8018574:	af04      	add	r7, sp, #16
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	60b9      	str	r1, [r7, #8]
 801857a:	4611      	mov	r1, r2
 801857c:	461a      	mov	r2, r3
 801857e:	460b      	mov	r3, r1
 8018580:	80fb      	strh	r3, [r7, #6]
 8018582:	4613      	mov	r3, r2
 8018584:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018586:	7979      	ldrb	r1, [r7, #5]
 8018588:	2300      	movs	r3, #0
 801858a:	9303      	str	r3, [sp, #12]
 801858c:	88fb      	ldrh	r3, [r7, #6]
 801858e:	9302      	str	r3, [sp, #8]
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	9301      	str	r3, [sp, #4]
 8018594:	2301      	movs	r3, #1
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	2302      	movs	r3, #2
 801859a:	2201      	movs	r2, #1
 801859c:	68f8      	ldr	r0, [r7, #12]
 801859e:	f000 fac4 	bl	8018b2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80185a2:	2300      	movs	r3, #0
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b086      	sub	sp, #24
 80185b0:	af04      	add	r7, sp, #16
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	4608      	mov	r0, r1
 80185b6:	4611      	mov	r1, r2
 80185b8:	461a      	mov	r2, r3
 80185ba:	4603      	mov	r3, r0
 80185bc:	70fb      	strb	r3, [r7, #3]
 80185be:	460b      	mov	r3, r1
 80185c0:	70bb      	strb	r3, [r7, #2]
 80185c2:	4613      	mov	r3, r2
 80185c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80185c6:	7878      	ldrb	r0, [r7, #1]
 80185c8:	78ba      	ldrb	r2, [r7, #2]
 80185ca:	78f9      	ldrb	r1, [r7, #3]
 80185cc:	8b3b      	ldrh	r3, [r7, #24]
 80185ce:	9302      	str	r3, [sp, #8]
 80185d0:	7d3b      	ldrb	r3, [r7, #20]
 80185d2:	9301      	str	r3, [sp, #4]
 80185d4:	7c3b      	ldrb	r3, [r7, #16]
 80185d6:	9300      	str	r3, [sp, #0]
 80185d8:	4603      	mov	r3, r0
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f000 fa57 	bl	8018a8e <USBH_LL_OpenPipe>

  return USBH_OK;
 80185e0:	2300      	movs	r3, #0
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3708      	adds	r7, #8
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}

080185ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80185ea:	b580      	push	{r7, lr}
 80185ec:	b082      	sub	sp, #8
 80185ee:	af00      	add	r7, sp, #0
 80185f0:	6078      	str	r0, [r7, #4]
 80185f2:	460b      	mov	r3, r1
 80185f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80185f6:	78fb      	ldrb	r3, [r7, #3]
 80185f8:	4619      	mov	r1, r3
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f000 fa76 	bl	8018aec <USBH_LL_ClosePipe>

  return USBH_OK;
 8018600:	2300      	movs	r3, #0
}
 8018602:	4618      	mov	r0, r3
 8018604:	3708      	adds	r7, #8
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}

0801860a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801860a:	b580      	push	{r7, lr}
 801860c:	b084      	sub	sp, #16
 801860e:	af00      	add	r7, sp, #0
 8018610:	6078      	str	r0, [r7, #4]
 8018612:	460b      	mov	r3, r1
 8018614:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f000 f836 	bl	8018688 <USBH_GetFreePipe>
 801861c:	4603      	mov	r3, r0
 801861e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8018620:	89fb      	ldrh	r3, [r7, #14]
 8018622:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018626:	4293      	cmp	r3, r2
 8018628:	d00a      	beq.n	8018640 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801862a:	78fa      	ldrb	r2, [r7, #3]
 801862c:	89fb      	ldrh	r3, [r7, #14]
 801862e:	f003 030f 	and.w	r3, r3, #15
 8018632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8018636:	6879      	ldr	r1, [r7, #4]
 8018638:	33e0      	adds	r3, #224	@ 0xe0
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	440b      	add	r3, r1
 801863e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8018640:	89fb      	ldrh	r3, [r7, #14]
 8018642:	b2db      	uxtb	r3, r3
}
 8018644:	4618      	mov	r0, r3
 8018646:	3710      	adds	r7, #16
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801864c:	b480      	push	{r7}
 801864e:	b083      	sub	sp, #12
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	460b      	mov	r3, r1
 8018656:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8018658:	78fb      	ldrb	r3, [r7, #3]
 801865a:	2b0f      	cmp	r3, #15
 801865c:	d80d      	bhi.n	801867a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801865e:	78fb      	ldrb	r3, [r7, #3]
 8018660:	687a      	ldr	r2, [r7, #4]
 8018662:	33e0      	adds	r3, #224	@ 0xe0
 8018664:	009b      	lsls	r3, r3, #2
 8018666:	4413      	add	r3, r2
 8018668:	685a      	ldr	r2, [r3, #4]
 801866a:	78fb      	ldrb	r3, [r7, #3]
 801866c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8018670:	6879      	ldr	r1, [r7, #4]
 8018672:	33e0      	adds	r3, #224	@ 0xe0
 8018674:	009b      	lsls	r3, r3, #2
 8018676:	440b      	add	r3, r1
 8018678:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801867a:	2300      	movs	r3, #0
}
 801867c:	4618      	mov	r0, r3
 801867e:	370c      	adds	r7, #12
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr

08018688 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8018688:	b480      	push	{r7}
 801868a:	b085      	sub	sp, #20
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8018690:	2300      	movs	r3, #0
 8018692:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8018694:	2300      	movs	r3, #0
 8018696:	73fb      	strb	r3, [r7, #15]
 8018698:	e00f      	b.n	80186ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801869a:	7bfb      	ldrb	r3, [r7, #15]
 801869c:	687a      	ldr	r2, [r7, #4]
 801869e:	33e0      	adds	r3, #224	@ 0xe0
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	4413      	add	r3, r2
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d102      	bne.n	80186b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80186ae:	7bfb      	ldrb	r3, [r7, #15]
 80186b0:	b29b      	uxth	r3, r3
 80186b2:	e007      	b.n	80186c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80186b4:	7bfb      	ldrb	r3, [r7, #15]
 80186b6:	3301      	adds	r3, #1
 80186b8:	73fb      	strb	r3, [r7, #15]
 80186ba:	7bfb      	ldrb	r3, [r7, #15]
 80186bc:	2b0f      	cmp	r3, #15
 80186be:	d9ec      	bls.n	801869a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80186c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3714      	adds	r7, #20
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80186d0:	b480      	push	{r7}
 80186d2:	b087      	sub	sp, #28
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	4613      	mov	r3, r2
 80186dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80186de:	2301      	movs	r3, #1
 80186e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80186e2:	2300      	movs	r3, #0
 80186e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80186e6:	4b1f      	ldr	r3, [pc, #124]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 80186e8:	7a5b      	ldrb	r3, [r3, #9]
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d131      	bne.n	8018754 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80186f0:	4b1c      	ldr	r3, [pc, #112]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 80186f2:	7a5b      	ldrb	r3, [r3, #9]
 80186f4:	b2db      	uxtb	r3, r3
 80186f6:	461a      	mov	r2, r3
 80186f8:	4b1a      	ldr	r3, [pc, #104]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 80186fa:	2100      	movs	r1, #0
 80186fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80186fe:	4b19      	ldr	r3, [pc, #100]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 8018700:	7a5b      	ldrb	r3, [r3, #9]
 8018702:	b2db      	uxtb	r3, r3
 8018704:	4a17      	ldr	r2, [pc, #92]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	4413      	add	r3, r2
 801870a:	68fa      	ldr	r2, [r7, #12]
 801870c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801870e:	4b15      	ldr	r3, [pc, #84]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 8018710:	7a5b      	ldrb	r3, [r3, #9]
 8018712:	b2db      	uxtb	r3, r3
 8018714:	461a      	mov	r2, r3
 8018716:	4b13      	ldr	r3, [pc, #76]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 8018718:	4413      	add	r3, r2
 801871a:	79fa      	ldrb	r2, [r7, #7]
 801871c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801871e:	4b11      	ldr	r3, [pc, #68]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 8018720:	7a5b      	ldrb	r3, [r3, #9]
 8018722:	b2db      	uxtb	r3, r3
 8018724:	1c5a      	adds	r2, r3, #1
 8018726:	b2d1      	uxtb	r1, r2
 8018728:	4a0e      	ldr	r2, [pc, #56]	@ (8018764 <FATFS_LinkDriverEx+0x94>)
 801872a:	7251      	strb	r1, [r2, #9]
 801872c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801872e:	7dbb      	ldrb	r3, [r7, #22]
 8018730:	3330      	adds	r3, #48	@ 0x30
 8018732:	b2da      	uxtb	r2, r3
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	3301      	adds	r3, #1
 801873c:	223a      	movs	r2, #58	@ 0x3a
 801873e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	3302      	adds	r3, #2
 8018744:	222f      	movs	r2, #47	@ 0x2f
 8018746:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	3303      	adds	r3, #3
 801874c:	2200      	movs	r2, #0
 801874e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018750:	2300      	movs	r3, #0
 8018752:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018754:	7dfb      	ldrb	r3, [r7, #23]
}
 8018756:	4618      	mov	r0, r3
 8018758:	371c      	adds	r7, #28
 801875a:	46bd      	mov	sp, r7
 801875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018760:	4770      	bx	lr
 8018762:	bf00      	nop
 8018764:	20000e28 	.word	0x20000e28

08018768 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
 8018770:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018772:	2200      	movs	r2, #0
 8018774:	6839      	ldr	r1, [r7, #0]
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f7ff ffaa 	bl	80186d0 <FATFS_LinkDriverEx>
 801877c:	4603      	mov	r3, r0
}
 801877e:	4618      	mov	r0, r3
 8018780:	3708      	adds	r7, #8
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}
	...

08018788 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801878c:	2201      	movs	r2, #1
 801878e:	490e      	ldr	r1, [pc, #56]	@ (80187c8 <MX_USB_HOST_Init+0x40>)
 8018790:	480e      	ldr	r0, [pc, #56]	@ (80187cc <MX_USB_HOST_Init+0x44>)
 8018792:	f7ff fabd 	bl	8017d10 <USBH_Init>
 8018796:	4603      	mov	r3, r0
 8018798:	2b00      	cmp	r3, #0
 801879a:	d001      	beq.n	80187a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801879c:	f7ea fa82 	bl	8002ca4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80187a0:	490b      	ldr	r1, [pc, #44]	@ (80187d0 <MX_USB_HOST_Init+0x48>)
 80187a2:	480a      	ldr	r0, [pc, #40]	@ (80187cc <MX_USB_HOST_Init+0x44>)
 80187a4:	f7ff fb61 	bl	8017e6a <USBH_RegisterClass>
 80187a8:	4603      	mov	r3, r0
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d001      	beq.n	80187b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80187ae:	f7ea fa79 	bl	8002ca4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80187b2:	4806      	ldr	r0, [pc, #24]	@ (80187cc <MX_USB_HOST_Init+0x44>)
 80187b4:	f7ff fbe5 	bl	8017f82 <USBH_Start>
 80187b8:	4603      	mov	r3, r0
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d001      	beq.n	80187c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80187be:	f7ea fa71 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80187c2:	bf00      	nop
 80187c4:	bd80      	pop	{r7, pc}
 80187c6:	bf00      	nop
 80187c8:	080187d5 	.word	0x080187d5
 80187cc:	20000e34 	.word	0x20000e34
 80187d0:	2000000c 	.word	0x2000000c

080187d4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80187d4:	b480      	push	{r7}
 80187d6:	b083      	sub	sp, #12
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	460b      	mov	r3, r1
 80187de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80187e0:	78fb      	ldrb	r3, [r7, #3]
 80187e2:	3b01      	subs	r3, #1
 80187e4:	2b04      	cmp	r3, #4
 80187e6:	d819      	bhi.n	801881c <USBH_UserProcess+0x48>
 80187e8:	a201      	add	r2, pc, #4	@ (adr r2, 80187f0 <USBH_UserProcess+0x1c>)
 80187ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187ee:	bf00      	nop
 80187f0:	0801881d 	.word	0x0801881d
 80187f4:	0801880d 	.word	0x0801880d
 80187f8:	0801881d 	.word	0x0801881d
 80187fc:	08018815 	.word	0x08018815
 8018800:	08018805 	.word	0x08018805
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018804:	4b09      	ldr	r3, [pc, #36]	@ (801882c <USBH_UserProcess+0x58>)
 8018806:	2203      	movs	r2, #3
 8018808:	701a      	strb	r2, [r3, #0]
  break;
 801880a:	e008      	b.n	801881e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801880c:	4b07      	ldr	r3, [pc, #28]	@ (801882c <USBH_UserProcess+0x58>)
 801880e:	2202      	movs	r2, #2
 8018810:	701a      	strb	r2, [r3, #0]
  break;
 8018812:	e004      	b.n	801881e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018814:	4b05      	ldr	r3, [pc, #20]	@ (801882c <USBH_UserProcess+0x58>)
 8018816:	2201      	movs	r2, #1
 8018818:	701a      	strb	r2, [r3, #0]
  break;
 801881a:	e000      	b.n	801881e <USBH_UserProcess+0x4a>

  default:
  break;
 801881c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801881e:	bf00      	nop
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr
 801882a:	bf00      	nop
 801882c:	2000120c 	.word	0x2000120c

08018830 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b08a      	sub	sp, #40	@ 0x28
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018838:	f107 0314 	add.w	r3, r7, #20
 801883c:	2200      	movs	r2, #0
 801883e:	601a      	str	r2, [r3, #0]
 8018840:	605a      	str	r2, [r3, #4]
 8018842:	609a      	str	r2, [r3, #8]
 8018844:	60da      	str	r2, [r3, #12]
 8018846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018850:	d13c      	bne.n	80188cc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018852:	4b20      	ldr	r3, [pc, #128]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 8018854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018856:	4a1f      	ldr	r2, [pc, #124]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 8018858:	f043 0301 	orr.w	r3, r3, #1
 801885c:	6313      	str	r3, [r2, #48]	@ 0x30
 801885e:	4b1d      	ldr	r3, [pc, #116]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 8018860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018862:	f003 0301 	and.w	r3, r3, #1
 8018866:	613b      	str	r3, [r7, #16]
 8018868:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801886a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801886e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018870:	2302      	movs	r3, #2
 8018872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018874:	2300      	movs	r3, #0
 8018876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018878:	2303      	movs	r3, #3
 801887a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801887c:	230a      	movs	r3, #10
 801887e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018880:	f107 0314 	add.w	r3, r7, #20
 8018884:	4619      	mov	r1, r3
 8018886:	4814      	ldr	r0, [pc, #80]	@ (80188d8 <HAL_HCD_MspInit+0xa8>)
 8018888:	f7ed fbaa 	bl	8005fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801888c:	4b11      	ldr	r3, [pc, #68]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 801888e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018890:	4a10      	ldr	r2, [pc, #64]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 8018892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018896:	6353      	str	r3, [r2, #52]	@ 0x34
 8018898:	4b0e      	ldr	r3, [pc, #56]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 801889a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801889c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188a0:	60fb      	str	r3, [r7, #12]
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	4b0b      	ldr	r3, [pc, #44]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 80188a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188a8:	4a0a      	ldr	r2, [pc, #40]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 80188aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80188ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80188b0:	4b08      	ldr	r3, [pc, #32]	@ (80188d4 <HAL_HCD_MspInit+0xa4>)
 80188b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80188b8:	60bb      	str	r3, [r7, #8]
 80188ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80188bc:	2200      	movs	r2, #0
 80188be:	2100      	movs	r1, #0
 80188c0:	2043      	movs	r0, #67	@ 0x43
 80188c2:	f7ec f909 	bl	8004ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80188c6:	2043      	movs	r0, #67	@ 0x43
 80188c8:	f7ec f922 	bl	8004b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80188cc:	bf00      	nop
 80188ce:	3728      	adds	r7, #40	@ 0x28
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	40023800 	.word	0x40023800
 80188d8:	40020000 	.word	0x40020000

080188dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7ff fb68 	bl	8017fc0 <USBH_LL_IncTimer>
}
 80188f0:	bf00      	nop
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8018906:	4618      	mov	r0, r3
 8018908:	f7ff fba0 	bl	801804c <USBH_LL_Connect>
}
 801890c:	bf00      	nop
 801890e:	3708      	adds	r7, #8
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8018922:	4618      	mov	r0, r3
 8018924:	f7ff fba9 	bl	801807a <USBH_LL_Disconnect>
}
 8018928:	bf00      	nop
 801892a:	3708      	adds	r7, #8
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	460b      	mov	r3, r1
 801893a:	70fb      	strb	r3, [r7, #3]
 801893c:	4613      	mov	r3, r2
 801893e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8018940:	bf00      	nop
 8018942:	370c      	adds	r7, #12
 8018944:	46bd      	mov	sp, r7
 8018946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894a:	4770      	bx	lr

0801894c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801895a:	4618      	mov	r0, r3
 801895c:	f7ff fb5a 	bl	8018014 <USBH_LL_PortEnabled>
}
 8018960:	bf00      	nop
 8018962:	3708      	adds	r7, #8
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8018976:	4618      	mov	r0, r3
 8018978:	f7ff fb5a 	bl	8018030 <USBH_LL_PortDisabled>
}
 801897c:	bf00      	nop
 801897e:	3708      	adds	r7, #8
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}

08018984 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8018992:	2b01      	cmp	r3, #1
 8018994:	d12a      	bne.n	80189ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8018996:	4a18      	ldr	r2, [pc, #96]	@ (80189f8 <USBH_LL_Init+0x74>)
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	4a15      	ldr	r2, [pc, #84]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189a2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80189a6:	4b14      	ldr	r3, [pc, #80]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80189ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80189ae:	4b12      	ldr	r3, [pc, #72]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189b0:	2208      	movs	r2, #8
 80189b2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80189b4:	4b10      	ldr	r3, [pc, #64]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189b6:	2201      	movs	r2, #1
 80189b8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80189ba:	4b0f      	ldr	r3, [pc, #60]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189bc:	2200      	movs	r2, #0
 80189be:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80189c0:	4b0d      	ldr	r3, [pc, #52]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189c2:	2202      	movs	r2, #2
 80189c4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80189c6:	4b0c      	ldr	r3, [pc, #48]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189c8:	2200      	movs	r2, #0
 80189ca:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80189cc:	480a      	ldr	r0, [pc, #40]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189ce:	f7ed fd08 	bl	80063e2 <HAL_HCD_Init>
 80189d2:	4603      	mov	r3, r0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d001      	beq.n	80189dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80189d8:	f7ea f964 	bl	8002ca4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80189dc:	4806      	ldr	r0, [pc, #24]	@ (80189f8 <USBH_LL_Init+0x74>)
 80189de:	f7ee f95b 	bl	8006c98 <HAL_HCD_GetCurrentFrame>
 80189e2:	4603      	mov	r3, r0
 80189e4:	4619      	mov	r1, r3
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f7ff fadb 	bl	8017fa2 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80189ec:	2300      	movs	r3, #0
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3708      	adds	r7, #8
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	20001210 	.word	0x20001210

080189fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b084      	sub	sp, #16
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a04:	2300      	movs	r3, #0
 8018a06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7ee f8d6 	bl	8006bc4 <HAL_HCD_Start>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018a1c:	7bfb      	ldrb	r3, [r7, #15]
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f000 f912 	bl	8018c48 <USBH_Get_USB_Status>
 8018a24:	4603      	mov	r3, r0
 8018a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	3710      	adds	r7, #16
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}

08018a32 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8018a32:	b580      	push	{r7, lr}
 8018a34:	b084      	sub	sp, #16
 8018a36:	af00      	add	r7, sp, #0
 8018a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7ee f8de 	bl	8006c0a <HAL_HCD_Stop>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018a52:	7bfb      	ldrb	r3, [r7, #15]
 8018a54:	4618      	mov	r0, r3
 8018a56:	f000 f8f7 	bl	8018c48 <USBH_Get_USB_Status>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3710      	adds	r7, #16
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}

08018a68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
 8018a70:	460b      	mov	r3, r1
 8018a72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018a7a:	78fa      	ldrb	r2, [r7, #3]
 8018a7c:	4611      	mov	r1, r2
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7ee f8f5 	bl	8006c6e <HAL_HCD_HC_GetXferCount>
 8018a84:	4603      	mov	r3, r0
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3708      	adds	r7, #8
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}

08018a8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018a8e:	b590      	push	{r4, r7, lr}
 8018a90:	b089      	sub	sp, #36	@ 0x24
 8018a92:	af04      	add	r7, sp, #16
 8018a94:	6078      	str	r0, [r7, #4]
 8018a96:	4608      	mov	r0, r1
 8018a98:	4611      	mov	r1, r2
 8018a9a:	461a      	mov	r2, r3
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	70fb      	strb	r3, [r7, #3]
 8018aa0:	460b      	mov	r3, r1
 8018aa2:	70bb      	strb	r3, [r7, #2]
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018aac:	2300      	movs	r3, #0
 8018aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8018ab6:	787c      	ldrb	r4, [r7, #1]
 8018ab8:	78ba      	ldrb	r2, [r7, #2]
 8018aba:	78f9      	ldrb	r1, [r7, #3]
 8018abc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018abe:	9302      	str	r3, [sp, #8]
 8018ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018ac4:	9301      	str	r3, [sp, #4]
 8018ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018aca:	9300      	str	r3, [sp, #0]
 8018acc:	4623      	mov	r3, r4
 8018ace:	f7ed fcef 	bl	80064b0 <HAL_HCD_HC_Init>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018ad6:	7bfb      	ldrb	r3, [r7, #15]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f000 f8b5 	bl	8018c48 <USBH_Get_USB_Status>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3714      	adds	r7, #20
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd90      	pop	{r4, r7, pc}

08018aec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
 8018af4:	460b      	mov	r3, r1
 8018af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018af8:	2300      	movs	r3, #0
 8018afa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018afc:	2300      	movs	r3, #0
 8018afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018b06:	78fa      	ldrb	r2, [r7, #3]
 8018b08:	4611      	mov	r1, r2
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f7ed fd88 	bl	8006620 <HAL_HCD_HC_Halt>
 8018b10:	4603      	mov	r3, r0
 8018b12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018b14:	7bfb      	ldrb	r3, [r7, #15]
 8018b16:	4618      	mov	r0, r3
 8018b18:	f000 f896 	bl	8018c48 <USBH_Get_USB_Status>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b22:	4618      	mov	r0, r3
 8018b24:	3710      	adds	r7, #16
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}

08018b2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018b2a:	b590      	push	{r4, r7, lr}
 8018b2c:	b089      	sub	sp, #36	@ 0x24
 8018b2e:	af04      	add	r7, sp, #16
 8018b30:	6078      	str	r0, [r7, #4]
 8018b32:	4608      	mov	r0, r1
 8018b34:	4611      	mov	r1, r2
 8018b36:	461a      	mov	r2, r3
 8018b38:	4603      	mov	r3, r0
 8018b3a:	70fb      	strb	r3, [r7, #3]
 8018b3c:	460b      	mov	r3, r1
 8018b3e:	70bb      	strb	r3, [r7, #2]
 8018b40:	4613      	mov	r3, r2
 8018b42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b44:	2300      	movs	r3, #0
 8018b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8018b52:	787c      	ldrb	r4, [r7, #1]
 8018b54:	78ba      	ldrb	r2, [r7, #2]
 8018b56:	78f9      	ldrb	r1, [r7, #3]
 8018b58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018b5c:	9303      	str	r3, [sp, #12]
 8018b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018b60:	9302      	str	r3, [sp, #8]
 8018b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b64:	9301      	str	r3, [sp, #4]
 8018b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b6a:	9300      	str	r3, [sp, #0]
 8018b6c:	4623      	mov	r3, r4
 8018b6e:	f7ed fd7b 	bl	8006668 <HAL_HCD_HC_SubmitRequest>
 8018b72:	4603      	mov	r3, r0
 8018b74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018b76:	7bfb      	ldrb	r3, [r7, #15]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f000 f865 	bl	8018c48 <USBH_Get_USB_Status>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3714      	adds	r7, #20
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd90      	pop	{r4, r7, pc}

08018b8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	460b      	mov	r3, r1
 8018b96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018b9e:	78fa      	ldrb	r2, [r7, #3]
 8018ba0:	4611      	mov	r1, r2
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7ee f84e 	bl	8006c44 <HAL_HCD_HC_GetURBState>
 8018ba8:	4603      	mov	r3, r0
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3708      	adds	r7, #8
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}

08018bb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8018bb2:	b580      	push	{r7, lr}
 8018bb4:	b082      	sub	sp, #8
 8018bb6:	af00      	add	r7, sp, #0
 8018bb8:	6078      	str	r0, [r7, #4]
 8018bba:	460b      	mov	r3, r1
 8018bbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8018bc4:	2b01      	cmp	r3, #1
 8018bc6:	d103      	bne.n	8018bd0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018bc8:	78fb      	ldrb	r3, [r7, #3]
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f000 f868 	bl	8018ca0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018bd0:	20c8      	movs	r0, #200	@ 0xc8
 8018bd2:	f7eb fc11 	bl	80043f8 <HAL_Delay>
  return USBH_OK;
 8018bd6:	2300      	movs	r3, #0
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3708      	adds	r7, #8
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018be0:	b480      	push	{r7}
 8018be2:	b085      	sub	sp, #20
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	460b      	mov	r3, r1
 8018bea:	70fb      	strb	r3, [r7, #3]
 8018bec:	4613      	mov	r3, r2
 8018bee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018bf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018bf8:	78fa      	ldrb	r2, [r7, #3]
 8018bfa:	68f9      	ldr	r1, [r7, #12]
 8018bfc:	4613      	mov	r3, r2
 8018bfe:	011b      	lsls	r3, r3, #4
 8018c00:	1a9b      	subs	r3, r3, r2
 8018c02:	009b      	lsls	r3, r3, #2
 8018c04:	440b      	add	r3, r1
 8018c06:	3317      	adds	r3, #23
 8018c08:	781b      	ldrb	r3, [r3, #0]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d00a      	beq.n	8018c24 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018c0e:	78fa      	ldrb	r2, [r7, #3]
 8018c10:	68f9      	ldr	r1, [r7, #12]
 8018c12:	4613      	mov	r3, r2
 8018c14:	011b      	lsls	r3, r3, #4
 8018c16:	1a9b      	subs	r3, r3, r2
 8018c18:	009b      	lsls	r3, r3, #2
 8018c1a:	440b      	add	r3, r1
 8018c1c:	333c      	adds	r3, #60	@ 0x3c
 8018c1e:	78ba      	ldrb	r2, [r7, #2]
 8018c20:	701a      	strb	r2, [r3, #0]
 8018c22:	e009      	b.n	8018c38 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018c24:	78fa      	ldrb	r2, [r7, #3]
 8018c26:	68f9      	ldr	r1, [r7, #12]
 8018c28:	4613      	mov	r3, r2
 8018c2a:	011b      	lsls	r3, r3, #4
 8018c2c:	1a9b      	subs	r3, r3, r2
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	440b      	add	r3, r1
 8018c32:	333d      	adds	r3, #61	@ 0x3d
 8018c34:	78ba      	ldrb	r2, [r7, #2]
 8018c36:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018c38:	2300      	movs	r3, #0
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	3714      	adds	r7, #20
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c44:	4770      	bx	lr
	...

08018c48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018c48:	b480      	push	{r7}
 8018c4a:	b085      	sub	sp, #20
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	4603      	mov	r3, r0
 8018c50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018c52:	2300      	movs	r3, #0
 8018c54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018c56:	79fb      	ldrb	r3, [r7, #7]
 8018c58:	2b03      	cmp	r3, #3
 8018c5a:	d817      	bhi.n	8018c8c <USBH_Get_USB_Status+0x44>
 8018c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8018c64 <USBH_Get_USB_Status+0x1c>)
 8018c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c62:	bf00      	nop
 8018c64:	08018c75 	.word	0x08018c75
 8018c68:	08018c7b 	.word	0x08018c7b
 8018c6c:	08018c81 	.word	0x08018c81
 8018c70:	08018c87 	.word	0x08018c87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018c74:	2300      	movs	r3, #0
 8018c76:	73fb      	strb	r3, [r7, #15]
    break;
 8018c78:	e00b      	b.n	8018c92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018c7a:	2302      	movs	r3, #2
 8018c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8018c7e:	e008      	b.n	8018c92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018c80:	2301      	movs	r3, #1
 8018c82:	73fb      	strb	r3, [r7, #15]
    break;
 8018c84:	e005      	b.n	8018c92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018c86:	2302      	movs	r3, #2
 8018c88:	73fb      	strb	r3, [r7, #15]
    break;
 8018c8a:	e002      	b.n	8018c92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018c8c:	2302      	movs	r3, #2
 8018c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8018c90:	bf00      	nop
  }
  return usb_status;
 8018c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3714      	adds	r7, #20
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b084      	sub	sp, #16
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8018caa:	79fb      	ldrb	r3, [r7, #7]
 8018cac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018cae:	79fb      	ldrb	r3, [r7, #7]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d102      	bne.n	8018cba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	73fb      	strb	r3, [r7, #15]
 8018cb8:	e001      	b.n	8018cbe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8018cba:	2301      	movs	r3, #1
 8018cbc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018cbe:	7bfb      	ldrb	r3, [r7, #15]
 8018cc0:	461a      	mov	r2, r3
 8018cc2:	2120      	movs	r1, #32
 8018cc4:	4803      	ldr	r0, [pc, #12]	@ (8018cd4 <MX_DriverVbusFS+0x34>)
 8018cc6:	f7ed fb4f 	bl	8006368 <HAL_GPIO_WritePin>
}
 8018cca:	bf00      	nop
 8018ccc:	3710      	adds	r7, #16
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}
 8018cd2:	bf00      	nop
 8018cd4:	40020c00 	.word	0x40020c00

08018cd8 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b086      	sub	sp, #24
 8018cdc:	af04      	add	r7, sp, #16
 8018cde:	4603      	mov	r3, r0
 8018ce0:	460a      	mov	r2, r1
 8018ce2:	71fb      	strb	r3, [r7, #7]
 8018ce4:	4613      	mov	r3, r2
 8018ce6:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8018ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8018d1c <writeReg+0x44>)
 8018cea:	79bb      	ldrb	r3, [r7, #6]
 8018cec:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8018cee:	4b0c      	ldr	r3, [pc, #48]	@ (8018d20 <writeReg+0x48>)
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	79fb      	ldrb	r3, [r7, #7]
 8018cf6:	b29a      	uxth	r2, r3
 8018cf8:	2364      	movs	r3, #100	@ 0x64
 8018cfa:	9302      	str	r3, [sp, #8]
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	9301      	str	r3, [sp, #4]
 8018d00:	4b06      	ldr	r3, [pc, #24]	@ (8018d1c <writeReg+0x44>)
 8018d02:	9300      	str	r3, [sp, #0]
 8018d04:	2301      	movs	r3, #1
 8018d06:	4807      	ldr	r0, [pc, #28]	@ (8018d24 <writeReg+0x4c>)
 8018d08:	f7ef fd06 	bl	8008718 <HAL_I2C_Mem_Write>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4b05      	ldr	r3, [pc, #20]	@ (8018d28 <writeReg+0x50>)
 8018d12:	701a      	strb	r2, [r3, #0]
}
 8018d14:	bf00      	nop
 8018d16:	3708      	adds	r7, #8
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	bd80      	pop	{r7, pc}
 8018d1c:	20001650 	.word	0x20001650
 8018d20:	2000002c 	.word	0x2000002c
 8018d24:	200015fc 	.word	0x200015fc
 8018d28:	20001654 	.word	0x20001654

08018d2c <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b086      	sub	sp, #24
 8018d30:	af04      	add	r7, sp, #16
 8018d32:	4603      	mov	r3, r0
 8018d34:	460a      	mov	r2, r1
 8018d36:	71fb      	strb	r3, [r7, #7]
 8018d38:	4613      	mov	r3, r2
 8018d3a:	80bb      	strh	r3, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8018d3c:	88ba      	ldrh	r2, [r7, #4]
 8018d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8018d70 <writeReg16Bit+0x44>)
 8018d40:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8018d42:	4b0c      	ldr	r3, [pc, #48]	@ (8018d74 <writeReg16Bit+0x48>)
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	4619      	mov	r1, r3
 8018d48:	79fb      	ldrb	r3, [r7, #7]
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	2364      	movs	r3, #100	@ 0x64
 8018d4e:	9302      	str	r3, [sp, #8]
 8018d50:	2302      	movs	r3, #2
 8018d52:	9301      	str	r3, [sp, #4]
 8018d54:	4b06      	ldr	r3, [pc, #24]	@ (8018d70 <writeReg16Bit+0x44>)
 8018d56:	9300      	str	r3, [sp, #0]
 8018d58:	2301      	movs	r3, #1
 8018d5a:	4807      	ldr	r0, [pc, #28]	@ (8018d78 <writeReg16Bit+0x4c>)
 8018d5c:	f7ef fcdc 	bl	8008718 <HAL_I2C_Mem_Write>
 8018d60:	4603      	mov	r3, r0
 8018d62:	461a      	mov	r2, r3
 8018d64:	4b05      	ldr	r3, [pc, #20]	@ (8018d7c <writeReg16Bit+0x50>)
 8018d66:	701a      	strb	r2, [r3, #0]
}
 8018d68:	bf00      	nop
 8018d6a:	3708      	adds	r7, #8
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}
 8018d70:	20001650 	.word	0x20001650
 8018d74:	2000002c 	.word	0x2000002c
 8018d78:	200015fc 	.word	0x200015fc
 8018d7c:	20001654 	.word	0x20001654

08018d80 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b088      	sub	sp, #32
 8018d84:	af04      	add	r7, sp, #16
 8018d86:	4603      	mov	r3, r0
 8018d88:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8018d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8018dc8 <readReg+0x48>)
 8018d8c:	781b      	ldrb	r3, [r3, #0]
 8018d8e:	f043 0301 	orr.w	r3, r3, #1
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	4619      	mov	r1, r3
 8018d96:	79fb      	ldrb	r3, [r7, #7]
 8018d98:	b29a      	uxth	r2, r3
 8018d9a:	2364      	movs	r3, #100	@ 0x64
 8018d9c:	9302      	str	r3, [sp, #8]
 8018d9e:	2301      	movs	r3, #1
 8018da0:	9301      	str	r3, [sp, #4]
 8018da2:	4b0a      	ldr	r3, [pc, #40]	@ (8018dcc <readReg+0x4c>)
 8018da4:	9300      	str	r3, [sp, #0]
 8018da6:	2301      	movs	r3, #1
 8018da8:	4809      	ldr	r0, [pc, #36]	@ (8018dd0 <readReg+0x50>)
 8018daa:	f7ef fdc9 	bl	8008940 <HAL_I2C_Mem_Read>
 8018dae:	4603      	mov	r3, r0
 8018db0:	461a      	mov	r2, r3
 8018db2:	4b08      	ldr	r3, [pc, #32]	@ (8018dd4 <readReg+0x54>)
 8018db4:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8018db6:	4b05      	ldr	r3, [pc, #20]	@ (8018dcc <readReg+0x4c>)
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	73fb      	strb	r3, [r7, #15]

  return value;
 8018dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	3710      	adds	r7, #16
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}
 8018dc6:	bf00      	nop
 8018dc8:	2000002c 	.word	0x2000002c
 8018dcc:	20001650 	.word	0x20001650
 8018dd0:	200015fc 	.word	0x200015fc
 8018dd4:	20001654 	.word	0x20001654

08018dd8 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b088      	sub	sp, #32
 8018ddc:	af04      	add	r7, sp, #16
 8018dde:	4603      	mov	r3, r0
 8018de0:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8018de2:	4b0f      	ldr	r3, [pc, #60]	@ (8018e20 <readReg16Bit+0x48>)
 8018de4:	781b      	ldrb	r3, [r3, #0]
 8018de6:	f043 0301 	orr.w	r3, r3, #1
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	4619      	mov	r1, r3
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	2364      	movs	r3, #100	@ 0x64
 8018df4:	9302      	str	r3, [sp, #8]
 8018df6:	2302      	movs	r3, #2
 8018df8:	9301      	str	r3, [sp, #4]
 8018dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8018e24 <readReg16Bit+0x4c>)
 8018dfc:	9300      	str	r3, [sp, #0]
 8018dfe:	2301      	movs	r3, #1
 8018e00:	4809      	ldr	r0, [pc, #36]	@ (8018e28 <readReg16Bit+0x50>)
 8018e02:	f7ef fd9d 	bl	8008940 <HAL_I2C_Mem_Read>
 8018e06:	4603      	mov	r3, r0
 8018e08:	461a      	mov	r2, r3
 8018e0a:	4b08      	ldr	r3, [pc, #32]	@ (8018e2c <readReg16Bit+0x54>)
 8018e0c:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8018e0e:	4b05      	ldr	r3, [pc, #20]	@ (8018e24 <readReg16Bit+0x4c>)
 8018e10:	881b      	ldrh	r3, [r3, #0]
 8018e12:	81fb      	strh	r3, [r7, #14]

  return value;
 8018e14:	89fb      	ldrh	r3, [r7, #14]
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	3710      	adds	r7, #16
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	2000002c 	.word	0x2000002c
 8018e24:	20001650 	.word	0x20001650
 8018e28:	200015fc 	.word	0x200015fc
 8018e2c:	20001654 	.word	0x20001654

08018e30 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af04      	add	r7, sp, #16
 8018e36:	4603      	mov	r3, r0
 8018e38:	6039      	str	r1, [r7, #0]
 8018e3a:	71fb      	strb	r3, [r7, #7]
 8018e3c:	4613      	mov	r3, r2
 8018e3e:	71bb      	strb	r3, [r7, #6]

  memcpy(msgBuffer, src, 4);
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	461a      	mov	r2, r3
 8018e46:	4b0d      	ldr	r3, [pc, #52]	@ (8018e7c <writeMulti+0x4c>)
 8018e48:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8018e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8018e80 <writeMulti+0x50>)
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	4618      	mov	r0, r3
 8018e50:	79fb      	ldrb	r3, [r7, #7]
 8018e52:	b29a      	uxth	r2, r3
 8018e54:	79bb      	ldrb	r3, [r7, #6]
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	2164      	movs	r1, #100	@ 0x64
 8018e5a:	9102      	str	r1, [sp, #8]
 8018e5c:	9301      	str	r3, [sp, #4]
 8018e5e:	4b07      	ldr	r3, [pc, #28]	@ (8018e7c <writeMulti+0x4c>)
 8018e60:	9300      	str	r3, [sp, #0]
 8018e62:	2301      	movs	r3, #1
 8018e64:	4601      	mov	r1, r0
 8018e66:	4807      	ldr	r0, [pc, #28]	@ (8018e84 <writeMulti+0x54>)
 8018e68:	f7ef fc56 	bl	8008718 <HAL_I2C_Mem_Write>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	461a      	mov	r2, r3
 8018e70:	4b05      	ldr	r3, [pc, #20]	@ (8018e88 <writeMulti+0x58>)
 8018e72:	701a      	strb	r2, [r3, #0]
}
 8018e74:	bf00      	nop
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	20001650 	.word	0x20001650
 8018e80:	2000002c 	.word	0x2000002c
 8018e84:	200015fc 	.word	0x200015fc
 8018e88:	20001654 	.word	0x20001654

08018e8c <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af04      	add	r7, sp, #16
 8018e92:	4603      	mov	r3, r0
 8018e94:	6039      	str	r1, [r7, #0]
 8018e96:	71fb      	strb	r3, [r7, #7]
 8018e98:	4613      	mov	r3, r2
 8018e9a:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8018e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8018ed4 <readMulti+0x48>)
 8018e9e:	781b      	ldrb	r3, [r3, #0]
 8018ea0:	f043 0301 	orr.w	r3, r3, #1
 8018ea4:	b2db      	uxtb	r3, r3
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	79fb      	ldrb	r3, [r7, #7]
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	79bb      	ldrb	r3, [r7, #6]
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	2164      	movs	r1, #100	@ 0x64
 8018eb2:	9102      	str	r1, [sp, #8]
 8018eb4:	9301      	str	r3, [sp, #4]
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	9300      	str	r3, [sp, #0]
 8018eba:	2301      	movs	r3, #1
 8018ebc:	4601      	mov	r1, r0
 8018ebe:	4806      	ldr	r0, [pc, #24]	@ (8018ed8 <readMulti+0x4c>)
 8018ec0:	f7ef fd3e 	bl	8008940 <HAL_I2C_Mem_Read>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	4b04      	ldr	r3, [pc, #16]	@ (8018edc <readMulti+0x50>)
 8018eca:	701a      	strb	r2, [r3, #0]
}
 8018ecc:	bf00      	nop
 8018ece:	3708      	adds	r7, #8
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	2000002c 	.word	0x2000002c
 8018ed8:	200015fc 	.word	0x200015fc
 8018edc:	20001654 	.word	0x20001654

08018ee0 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b086      	sub	sp, #24
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	6039      	str	r1, [r7, #0]
 8018eea:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8018eec:	2254      	movs	r2, #84	@ 0x54
 8018eee:	6839      	ldr	r1, [r7, #0]
 8018ef0:	4854      	ldr	r0, [pc, #336]	@ (8019044 <initVL53L0X+0x164>)
 8018ef2:	f002 fec4 	bl	801bc7e <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8018ef6:	4b54      	ldr	r3, [pc, #336]	@ (8019048 <initVL53L0X+0x168>)
 8018ef8:	2200      	movs	r2, #0
 8018efa:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8018efc:	4b52      	ldr	r3, [pc, #328]	@ (8019048 <initVL53L0X+0x168>)
 8018efe:	2200      	movs	r2, #0
 8018f00:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8018f02:	4b51      	ldr	r3, [pc, #324]	@ (8019048 <initVL53L0X+0x168>)
 8018f04:	2200      	movs	r2, #0
 8018f06:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8018f08:	4b4f      	ldr	r3, [pc, #316]	@ (8019048 <initVL53L0X+0x168>)
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8018f0e:	79fb      	ldrb	r3, [r7, #7]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d00a      	beq.n	8018f2a <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8018f14:	2089      	movs	r0, #137	@ 0x89
 8018f16:	f7ff ff33 	bl	8018d80 <readReg>
 8018f1a:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8018f1c:	f043 0301 	orr.w	r3, r3, #1
 8018f20:	b2db      	uxtb	r3, r3
 8018f22:	4619      	mov	r1, r3
 8018f24:	2089      	movs	r0, #137	@ 0x89
 8018f26:	f7ff fed7 	bl	8018cd8 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8018f2a:	2100      	movs	r1, #0
 8018f2c:	2088      	movs	r0, #136	@ 0x88
 8018f2e:	f7ff fed3 	bl	8018cd8 <writeReg>

  writeReg(0x80, 0x01);
 8018f32:	2101      	movs	r1, #1
 8018f34:	2080      	movs	r0, #128	@ 0x80
 8018f36:	f7ff fecf 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x01);
 8018f3a:	2101      	movs	r1, #1
 8018f3c:	20ff      	movs	r0, #255	@ 0xff
 8018f3e:	f7ff fecb 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x00);
 8018f42:	2100      	movs	r1, #0
 8018f44:	2000      	movs	r0, #0
 8018f46:	f7ff fec7 	bl	8018cd8 <writeReg>
  g_stopVariable = readReg(0x91);
 8018f4a:	2091      	movs	r0, #145	@ 0x91
 8018f4c:	f7ff ff18 	bl	8018d80 <readReg>
 8018f50:	4603      	mov	r3, r0
 8018f52:	461a      	mov	r2, r3
 8018f54:	4b3d      	ldr	r3, [pc, #244]	@ (801904c <initVL53L0X+0x16c>)
 8018f56:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8018f58:	2101      	movs	r1, #1
 8018f5a:	2000      	movs	r0, #0
 8018f5c:	f7ff febc 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x00);
 8018f60:	2100      	movs	r1, #0
 8018f62:	20ff      	movs	r0, #255	@ 0xff
 8018f64:	f7ff feb8 	bl	8018cd8 <writeReg>
  writeReg(0x80, 0x00);
 8018f68:	2100      	movs	r1, #0
 8018f6a:	2080      	movs	r0, #128	@ 0x80
 8018f6c:	f7ff feb4 	bl	8018cd8 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8018f70:	2060      	movs	r0, #96	@ 0x60
 8018f72:	f7ff ff05 	bl	8018d80 <readReg>
 8018f76:	4603      	mov	r3, r0
 8018f78:	f043 0312 	orr.w	r3, r3, #18
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	4619      	mov	r1, r3
 8018f80:	2060      	movs	r0, #96	@ 0x60
 8018f82:	f7ff fea9 	bl	8018cd8 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8018f86:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8018f8a:	f000 fa09 	bl	80193a0 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8018f8e:	21ff      	movs	r1, #255	@ 0xff
 8018f90:	2001      	movs	r0, #1
 8018f92:	f7ff fea1 	bl	8018cd8 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8018f96:	f107 0213 	add.w	r2, r7, #19
 8018f9a:	f107 0314 	add.w	r3, r7, #20
 8018f9e:	4611      	mov	r1, r2
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f000 fd6f 	bl	8019a84 <getSpadInfo>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d101      	bne.n	8018fb0 <initVL53L0X+0xd0>
 8018fac:	2300      	movs	r3, #0
 8018fae:	e1ee      	b.n	801938e <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8018fb0:	f107 030c 	add.w	r3, r7, #12
 8018fb4:	2206      	movs	r2, #6
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	20b0      	movs	r0, #176	@ 0xb0
 8018fba:	f7ff ff67 	bl	8018e8c <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8018fbe:	2101      	movs	r1, #1
 8018fc0:	20ff      	movs	r0, #255	@ 0xff
 8018fc2:	f7ff fe89 	bl	8018cd8 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8018fc6:	2100      	movs	r1, #0
 8018fc8:	204f      	movs	r0, #79	@ 0x4f
 8018fca:	f7ff fe85 	bl	8018cd8 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8018fce:	212c      	movs	r1, #44	@ 0x2c
 8018fd0:	204e      	movs	r0, #78	@ 0x4e
 8018fd2:	f7ff fe81 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x00);
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	20ff      	movs	r0, #255	@ 0xff
 8018fda:	f7ff fe7d 	bl	8018cd8 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8018fde:	21b4      	movs	r1, #180	@ 0xb4
 8018fe0:	20b6      	movs	r0, #182	@ 0xb6
 8018fe2:	f7ff fe79 	bl	8018cd8 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8018fe6:	7cfb      	ldrb	r3, [r7, #19]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d001      	beq.n	8018ff0 <initVL53L0X+0x110>
 8018fec:	230c      	movs	r3, #12
 8018fee:	e000      	b.n	8018ff2 <initVL53L0X+0x112>
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	75bb      	strb	r3, [r7, #22]
 8018ffc:	e03f      	b.n	801907e <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8018ffe:	7dba      	ldrb	r2, [r7, #22]
 8019000:	7d7b      	ldrb	r3, [r7, #21]
 8019002:	429a      	cmp	r2, r3
 8019004:	d303      	bcc.n	801900e <initVL53L0X+0x12e>
 8019006:	7d3b      	ldrb	r3, [r7, #20]
 8019008:	7dfa      	ldrb	r2, [r7, #23]
 801900a:	429a      	cmp	r2, r3
 801900c:	d120      	bne.n	8019050 <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 801900e:	7dbb      	ldrb	r3, [r7, #22]
 8019010:	08db      	lsrs	r3, r3, #3
 8019012:	b2d8      	uxtb	r0, r3
 8019014:	4603      	mov	r3, r0
 8019016:	3318      	adds	r3, #24
 8019018:	443b      	add	r3, r7
 801901a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801901e:	b25a      	sxtb	r2, r3
 8019020:	7dbb      	ldrb	r3, [r7, #22]
 8019022:	f003 0307 	and.w	r3, r3, #7
 8019026:	2101      	movs	r1, #1
 8019028:	fa01 f303 	lsl.w	r3, r1, r3
 801902c:	b25b      	sxtb	r3, r3
 801902e:	43db      	mvns	r3, r3
 8019030:	b25b      	sxtb	r3, r3
 8019032:	4013      	ands	r3, r2
 8019034:	b25a      	sxtb	r2, r3
 8019036:	4603      	mov	r3, r0
 8019038:	b2d2      	uxtb	r2, r2
 801903a:	3318      	adds	r3, #24
 801903c:	443b      	add	r3, r7
 801903e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8019042:	e019      	b.n	8019078 <initVL53L0X+0x198>
 8019044:	200015fc 	.word	0x200015fc
 8019048:	20001650 	.word	0x20001650
 801904c:	200015f6 	.word	0x200015f6
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8019050:	7dbb      	ldrb	r3, [r7, #22]
 8019052:	08db      	lsrs	r3, r3, #3
 8019054:	b2db      	uxtb	r3, r3
 8019056:	3318      	adds	r3, #24
 8019058:	443b      	add	r3, r7
 801905a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801905e:	461a      	mov	r2, r3
 8019060:	7dbb      	ldrb	r3, [r7, #22]
 8019062:	f003 0307 	and.w	r3, r3, #7
 8019066:	fa42 f303 	asr.w	r3, r2, r3
 801906a:	f003 0301 	and.w	r3, r3, #1
 801906e:	2b00      	cmp	r3, #0
 8019070:	d002      	beq.n	8019078 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8019072:	7dfb      	ldrb	r3, [r7, #23]
 8019074:	3301      	adds	r3, #1
 8019076:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8019078:	7dbb      	ldrb	r3, [r7, #22]
 801907a:	3301      	adds	r3, #1
 801907c:	75bb      	strb	r3, [r7, #22]
 801907e:	7dbb      	ldrb	r3, [r7, #22]
 8019080:	2b2f      	cmp	r3, #47	@ 0x2f
 8019082:	d9bc      	bls.n	8018ffe <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8019084:	f107 030c 	add.w	r3, r7, #12
 8019088:	2206      	movs	r2, #6
 801908a:	4619      	mov	r1, r3
 801908c:	20b0      	movs	r0, #176	@ 0xb0
 801908e:	f7ff fecf 	bl	8018e30 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8019092:	2101      	movs	r1, #1
 8019094:	20ff      	movs	r0, #255	@ 0xff
 8019096:	f7ff fe1f 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x00);
 801909a:	2100      	movs	r1, #0
 801909c:	2000      	movs	r0, #0
 801909e:	f7ff fe1b 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 80190a2:	2100      	movs	r1, #0
 80190a4:	20ff      	movs	r0, #255	@ 0xff
 80190a6:	f7ff fe17 	bl	8018cd8 <writeReg>
  writeReg(0x09, 0x00);
 80190aa:	2100      	movs	r1, #0
 80190ac:	2009      	movs	r0, #9
 80190ae:	f7ff fe13 	bl	8018cd8 <writeReg>
  writeReg(0x10, 0x00);
 80190b2:	2100      	movs	r1, #0
 80190b4:	2010      	movs	r0, #16
 80190b6:	f7ff fe0f 	bl	8018cd8 <writeReg>
  writeReg(0x11, 0x00);
 80190ba:	2100      	movs	r1, #0
 80190bc:	2011      	movs	r0, #17
 80190be:	f7ff fe0b 	bl	8018cd8 <writeReg>

  writeReg(0x24, 0x01);
 80190c2:	2101      	movs	r1, #1
 80190c4:	2024      	movs	r0, #36	@ 0x24
 80190c6:	f7ff fe07 	bl	8018cd8 <writeReg>
  writeReg(0x25, 0xFF);
 80190ca:	21ff      	movs	r1, #255	@ 0xff
 80190cc:	2025      	movs	r0, #37	@ 0x25
 80190ce:	f7ff fe03 	bl	8018cd8 <writeReg>
  writeReg(0x75, 0x00);
 80190d2:	2100      	movs	r1, #0
 80190d4:	2075      	movs	r0, #117	@ 0x75
 80190d6:	f7ff fdff 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 80190da:	2101      	movs	r1, #1
 80190dc:	20ff      	movs	r0, #255	@ 0xff
 80190de:	f7ff fdfb 	bl	8018cd8 <writeReg>
  writeReg(0x4E, 0x2C);
 80190e2:	212c      	movs	r1, #44	@ 0x2c
 80190e4:	204e      	movs	r0, #78	@ 0x4e
 80190e6:	f7ff fdf7 	bl	8018cd8 <writeReg>
  writeReg(0x48, 0x00);
 80190ea:	2100      	movs	r1, #0
 80190ec:	2048      	movs	r0, #72	@ 0x48
 80190ee:	f7ff fdf3 	bl	8018cd8 <writeReg>
  writeReg(0x30, 0x20);
 80190f2:	2120      	movs	r1, #32
 80190f4:	2030      	movs	r0, #48	@ 0x30
 80190f6:	f7ff fdef 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 80190fa:	2100      	movs	r1, #0
 80190fc:	20ff      	movs	r0, #255	@ 0xff
 80190fe:	f7ff fdeb 	bl	8018cd8 <writeReg>
  writeReg(0x30, 0x09);
 8019102:	2109      	movs	r1, #9
 8019104:	2030      	movs	r0, #48	@ 0x30
 8019106:	f7ff fde7 	bl	8018cd8 <writeReg>
  writeReg(0x54, 0x00);
 801910a:	2100      	movs	r1, #0
 801910c:	2054      	movs	r0, #84	@ 0x54
 801910e:	f7ff fde3 	bl	8018cd8 <writeReg>
  writeReg(0x31, 0x04);
 8019112:	2104      	movs	r1, #4
 8019114:	2031      	movs	r0, #49	@ 0x31
 8019116:	f7ff fddf 	bl	8018cd8 <writeReg>
  writeReg(0x32, 0x03);
 801911a:	2103      	movs	r1, #3
 801911c:	2032      	movs	r0, #50	@ 0x32
 801911e:	f7ff fddb 	bl	8018cd8 <writeReg>
  writeReg(0x40, 0x83);
 8019122:	2183      	movs	r1, #131	@ 0x83
 8019124:	2040      	movs	r0, #64	@ 0x40
 8019126:	f7ff fdd7 	bl	8018cd8 <writeReg>
  writeReg(0x46, 0x25);
 801912a:	2125      	movs	r1, #37	@ 0x25
 801912c:	2046      	movs	r0, #70	@ 0x46
 801912e:	f7ff fdd3 	bl	8018cd8 <writeReg>
  writeReg(0x60, 0x00);
 8019132:	2100      	movs	r1, #0
 8019134:	2060      	movs	r0, #96	@ 0x60
 8019136:	f7ff fdcf 	bl	8018cd8 <writeReg>
  writeReg(0x27, 0x00);
 801913a:	2100      	movs	r1, #0
 801913c:	2027      	movs	r0, #39	@ 0x27
 801913e:	f7ff fdcb 	bl	8018cd8 <writeReg>
  writeReg(0x50, 0x06);
 8019142:	2106      	movs	r1, #6
 8019144:	2050      	movs	r0, #80	@ 0x50
 8019146:	f7ff fdc7 	bl	8018cd8 <writeReg>
  writeReg(0x51, 0x00);
 801914a:	2100      	movs	r1, #0
 801914c:	2051      	movs	r0, #81	@ 0x51
 801914e:	f7ff fdc3 	bl	8018cd8 <writeReg>
  writeReg(0x52, 0x96);
 8019152:	2196      	movs	r1, #150	@ 0x96
 8019154:	2052      	movs	r0, #82	@ 0x52
 8019156:	f7ff fdbf 	bl	8018cd8 <writeReg>
  writeReg(0x56, 0x08);
 801915a:	2108      	movs	r1, #8
 801915c:	2056      	movs	r0, #86	@ 0x56
 801915e:	f7ff fdbb 	bl	8018cd8 <writeReg>
  writeReg(0x57, 0x30);
 8019162:	2130      	movs	r1, #48	@ 0x30
 8019164:	2057      	movs	r0, #87	@ 0x57
 8019166:	f7ff fdb7 	bl	8018cd8 <writeReg>
  writeReg(0x61, 0x00);
 801916a:	2100      	movs	r1, #0
 801916c:	2061      	movs	r0, #97	@ 0x61
 801916e:	f7ff fdb3 	bl	8018cd8 <writeReg>
  writeReg(0x62, 0x00);
 8019172:	2100      	movs	r1, #0
 8019174:	2062      	movs	r0, #98	@ 0x62
 8019176:	f7ff fdaf 	bl	8018cd8 <writeReg>
  writeReg(0x64, 0x00);
 801917a:	2100      	movs	r1, #0
 801917c:	2064      	movs	r0, #100	@ 0x64
 801917e:	f7ff fdab 	bl	8018cd8 <writeReg>
  writeReg(0x65, 0x00);
 8019182:	2100      	movs	r1, #0
 8019184:	2065      	movs	r0, #101	@ 0x65
 8019186:	f7ff fda7 	bl	8018cd8 <writeReg>
  writeReg(0x66, 0xA0);
 801918a:	21a0      	movs	r1, #160	@ 0xa0
 801918c:	2066      	movs	r0, #102	@ 0x66
 801918e:	f7ff fda3 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 8019192:	2101      	movs	r1, #1
 8019194:	20ff      	movs	r0, #255	@ 0xff
 8019196:	f7ff fd9f 	bl	8018cd8 <writeReg>
  writeReg(0x22, 0x32);
 801919a:	2132      	movs	r1, #50	@ 0x32
 801919c:	2022      	movs	r0, #34	@ 0x22
 801919e:	f7ff fd9b 	bl	8018cd8 <writeReg>
  writeReg(0x47, 0x14);
 80191a2:	2114      	movs	r1, #20
 80191a4:	2047      	movs	r0, #71	@ 0x47
 80191a6:	f7ff fd97 	bl	8018cd8 <writeReg>
  writeReg(0x49, 0xFF);
 80191aa:	21ff      	movs	r1, #255	@ 0xff
 80191ac:	2049      	movs	r0, #73	@ 0x49
 80191ae:	f7ff fd93 	bl	8018cd8 <writeReg>
  writeReg(0x4A, 0x00);
 80191b2:	2100      	movs	r1, #0
 80191b4:	204a      	movs	r0, #74	@ 0x4a
 80191b6:	f7ff fd8f 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 80191ba:	2100      	movs	r1, #0
 80191bc:	20ff      	movs	r0, #255	@ 0xff
 80191be:	f7ff fd8b 	bl	8018cd8 <writeReg>
  writeReg(0x7A, 0x0A);
 80191c2:	210a      	movs	r1, #10
 80191c4:	207a      	movs	r0, #122	@ 0x7a
 80191c6:	f7ff fd87 	bl	8018cd8 <writeReg>
  writeReg(0x7B, 0x00);
 80191ca:	2100      	movs	r1, #0
 80191cc:	207b      	movs	r0, #123	@ 0x7b
 80191ce:	f7ff fd83 	bl	8018cd8 <writeReg>
  writeReg(0x78, 0x21);
 80191d2:	2121      	movs	r1, #33	@ 0x21
 80191d4:	2078      	movs	r0, #120	@ 0x78
 80191d6:	f7ff fd7f 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 80191da:	2101      	movs	r1, #1
 80191dc:	20ff      	movs	r0, #255	@ 0xff
 80191de:	f7ff fd7b 	bl	8018cd8 <writeReg>
  writeReg(0x23, 0x34);
 80191e2:	2134      	movs	r1, #52	@ 0x34
 80191e4:	2023      	movs	r0, #35	@ 0x23
 80191e6:	f7ff fd77 	bl	8018cd8 <writeReg>
  writeReg(0x42, 0x00);
 80191ea:	2100      	movs	r1, #0
 80191ec:	2042      	movs	r0, #66	@ 0x42
 80191ee:	f7ff fd73 	bl	8018cd8 <writeReg>
  writeReg(0x44, 0xFF);
 80191f2:	21ff      	movs	r1, #255	@ 0xff
 80191f4:	2044      	movs	r0, #68	@ 0x44
 80191f6:	f7ff fd6f 	bl	8018cd8 <writeReg>
  writeReg(0x45, 0x26);
 80191fa:	2126      	movs	r1, #38	@ 0x26
 80191fc:	2045      	movs	r0, #69	@ 0x45
 80191fe:	f7ff fd6b 	bl	8018cd8 <writeReg>
  writeReg(0x46, 0x05);
 8019202:	2105      	movs	r1, #5
 8019204:	2046      	movs	r0, #70	@ 0x46
 8019206:	f7ff fd67 	bl	8018cd8 <writeReg>
  writeReg(0x40, 0x40);
 801920a:	2140      	movs	r1, #64	@ 0x40
 801920c:	2040      	movs	r0, #64	@ 0x40
 801920e:	f7ff fd63 	bl	8018cd8 <writeReg>
  writeReg(0x0E, 0x06);
 8019212:	2106      	movs	r1, #6
 8019214:	200e      	movs	r0, #14
 8019216:	f7ff fd5f 	bl	8018cd8 <writeReg>
  writeReg(0x20, 0x1A);
 801921a:	211a      	movs	r1, #26
 801921c:	2020      	movs	r0, #32
 801921e:	f7ff fd5b 	bl	8018cd8 <writeReg>
  writeReg(0x43, 0x40);
 8019222:	2140      	movs	r1, #64	@ 0x40
 8019224:	2043      	movs	r0, #67	@ 0x43
 8019226:	f7ff fd57 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 801922a:	2100      	movs	r1, #0
 801922c:	20ff      	movs	r0, #255	@ 0xff
 801922e:	f7ff fd53 	bl	8018cd8 <writeReg>
  writeReg(0x34, 0x03);
 8019232:	2103      	movs	r1, #3
 8019234:	2034      	movs	r0, #52	@ 0x34
 8019236:	f7ff fd4f 	bl	8018cd8 <writeReg>
  writeReg(0x35, 0x44);
 801923a:	2144      	movs	r1, #68	@ 0x44
 801923c:	2035      	movs	r0, #53	@ 0x35
 801923e:	f7ff fd4b 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 8019242:	2101      	movs	r1, #1
 8019244:	20ff      	movs	r0, #255	@ 0xff
 8019246:	f7ff fd47 	bl	8018cd8 <writeReg>
  writeReg(0x31, 0x04);
 801924a:	2104      	movs	r1, #4
 801924c:	2031      	movs	r0, #49	@ 0x31
 801924e:	f7ff fd43 	bl	8018cd8 <writeReg>
  writeReg(0x4B, 0x09);
 8019252:	2109      	movs	r1, #9
 8019254:	204b      	movs	r0, #75	@ 0x4b
 8019256:	f7ff fd3f 	bl	8018cd8 <writeReg>
  writeReg(0x4C, 0x05);
 801925a:	2105      	movs	r1, #5
 801925c:	204c      	movs	r0, #76	@ 0x4c
 801925e:	f7ff fd3b 	bl	8018cd8 <writeReg>
  writeReg(0x4D, 0x04);
 8019262:	2104      	movs	r1, #4
 8019264:	204d      	movs	r0, #77	@ 0x4d
 8019266:	f7ff fd37 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 801926a:	2100      	movs	r1, #0
 801926c:	20ff      	movs	r0, #255	@ 0xff
 801926e:	f7ff fd33 	bl	8018cd8 <writeReg>
  writeReg(0x44, 0x00);
 8019272:	2100      	movs	r1, #0
 8019274:	2044      	movs	r0, #68	@ 0x44
 8019276:	f7ff fd2f 	bl	8018cd8 <writeReg>
  writeReg(0x45, 0x20);
 801927a:	2120      	movs	r1, #32
 801927c:	2045      	movs	r0, #69	@ 0x45
 801927e:	f7ff fd2b 	bl	8018cd8 <writeReg>
  writeReg(0x47, 0x08);
 8019282:	2108      	movs	r1, #8
 8019284:	2047      	movs	r0, #71	@ 0x47
 8019286:	f7ff fd27 	bl	8018cd8 <writeReg>
  writeReg(0x48, 0x28);
 801928a:	2128      	movs	r1, #40	@ 0x28
 801928c:	2048      	movs	r0, #72	@ 0x48
 801928e:	f7ff fd23 	bl	8018cd8 <writeReg>
  writeReg(0x67, 0x00);
 8019292:	2100      	movs	r1, #0
 8019294:	2067      	movs	r0, #103	@ 0x67
 8019296:	f7ff fd1f 	bl	8018cd8 <writeReg>
  writeReg(0x70, 0x04);
 801929a:	2104      	movs	r1, #4
 801929c:	2070      	movs	r0, #112	@ 0x70
 801929e:	f7ff fd1b 	bl	8018cd8 <writeReg>
  writeReg(0x71, 0x01);
 80192a2:	2101      	movs	r1, #1
 80192a4:	2071      	movs	r0, #113	@ 0x71
 80192a6:	f7ff fd17 	bl	8018cd8 <writeReg>
  writeReg(0x72, 0xFE);
 80192aa:	21fe      	movs	r1, #254	@ 0xfe
 80192ac:	2072      	movs	r0, #114	@ 0x72
 80192ae:	f7ff fd13 	bl	8018cd8 <writeReg>
  writeReg(0x76, 0x00);
 80192b2:	2100      	movs	r1, #0
 80192b4:	2076      	movs	r0, #118	@ 0x76
 80192b6:	f7ff fd0f 	bl	8018cd8 <writeReg>
  writeReg(0x77, 0x00);
 80192ba:	2100      	movs	r1, #0
 80192bc:	2077      	movs	r0, #119	@ 0x77
 80192be:	f7ff fd0b 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 80192c2:	2101      	movs	r1, #1
 80192c4:	20ff      	movs	r0, #255	@ 0xff
 80192c6:	f7ff fd07 	bl	8018cd8 <writeReg>
  writeReg(0x0D, 0x01);
 80192ca:	2101      	movs	r1, #1
 80192cc:	200d      	movs	r0, #13
 80192ce:	f7ff fd03 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 80192d2:	2100      	movs	r1, #0
 80192d4:	20ff      	movs	r0, #255	@ 0xff
 80192d6:	f7ff fcff 	bl	8018cd8 <writeReg>
  writeReg(0x80, 0x01);
 80192da:	2101      	movs	r1, #1
 80192dc:	2080      	movs	r0, #128	@ 0x80
 80192de:	f7ff fcfb 	bl	8018cd8 <writeReg>
  writeReg(0x01, 0xF8);
 80192e2:	21f8      	movs	r1, #248	@ 0xf8
 80192e4:	2001      	movs	r0, #1
 80192e6:	f7ff fcf7 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x01);
 80192ea:	2101      	movs	r1, #1
 80192ec:	20ff      	movs	r0, #255	@ 0xff
 80192ee:	f7ff fcf3 	bl	8018cd8 <writeReg>
  writeReg(0x8E, 0x01);
 80192f2:	2101      	movs	r1, #1
 80192f4:	208e      	movs	r0, #142	@ 0x8e
 80192f6:	f7ff fcef 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x01);
 80192fa:	2101      	movs	r1, #1
 80192fc:	2000      	movs	r0, #0
 80192fe:	f7ff fceb 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x00);
 8019302:	2100      	movs	r1, #0
 8019304:	20ff      	movs	r0, #255	@ 0xff
 8019306:	f7ff fce7 	bl	8018cd8 <writeReg>
  writeReg(0x80, 0x00);
 801930a:	2100      	movs	r1, #0
 801930c:	2080      	movs	r0, #128	@ 0x80
 801930e:	f7ff fce3 	bl	8018cd8 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8019312:	2104      	movs	r1, #4
 8019314:	200a      	movs	r0, #10
 8019316:	f7ff fcdf 	bl	8018cd8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 801931a:	2084      	movs	r0, #132	@ 0x84
 801931c:	f7ff fd30 	bl	8018d80 <readReg>
 8019320:	4603      	mov	r3, r0
 8019322:	f023 0310 	bic.w	r3, r3, #16
 8019326:	b2db      	uxtb	r3, r3
 8019328:	4619      	mov	r1, r3
 801932a:	2084      	movs	r0, #132	@ 0x84
 801932c:	f7ff fcd4 	bl	8018cd8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8019330:	2101      	movs	r1, #1
 8019332:	200b      	movs	r0, #11
 8019334:	f7ff fcd0 	bl	8018cd8 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8019338:	f000 f900 	bl	801953c <getMeasurementTimingBudget>
 801933c:	4603      	mov	r3, r0
 801933e:	4a16      	ldr	r2, [pc, #88]	@ (8019398 <initVL53L0X+0x4b8>)
 8019340:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8019342:	21e8      	movs	r1, #232	@ 0xe8
 8019344:	2001      	movs	r0, #1
 8019346:	f7ff fcc7 	bl	8018cd8 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 801934a:	4b13      	ldr	r3, [pc, #76]	@ (8019398 <initVL53L0X+0x4b8>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	4618      	mov	r0, r3
 8019350:	f000 f85c 	bl	801940c <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8019354:	2101      	movs	r1, #1
 8019356:	2001      	movs	r0, #1
 8019358:	f7ff fcbe 	bl	8018cd8 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 801935c:	2040      	movs	r0, #64	@ 0x40
 801935e:	f000 fd49 	bl	8019df4 <performSingleRefCalibration>
 8019362:	4603      	mov	r3, r0
 8019364:	2b00      	cmp	r3, #0
 8019366:	d101      	bne.n	801936c <initVL53L0X+0x48c>
 8019368:	2300      	movs	r3, #0
 801936a:	e010      	b.n	801938e <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 801936c:	2102      	movs	r1, #2
 801936e:	2001      	movs	r0, #1
 8019370:	f7ff fcb2 	bl	8018cd8 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8019374:	2000      	movs	r0, #0
 8019376:	f000 fd3d 	bl	8019df4 <performSingleRefCalibration>
 801937a:	4603      	mov	r3, r0
 801937c:	2b00      	cmp	r3, #0
 801937e:	d101      	bne.n	8019384 <initVL53L0X+0x4a4>
 8019380:	2300      	movs	r3, #0
 8019382:	e004      	b.n	801938e <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8019384:	21e8      	movs	r1, #232	@ 0xe8
 8019386:	2001      	movs	r0, #1
 8019388:	f7ff fca6 	bl	8018cd8 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 801938c:	2301      	movs	r3, #1
}
 801938e:	4618      	mov	r0, r3
 8019390:	3718      	adds	r7, #24
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
 8019396:	bf00      	nop
 8019398:	200015f8 	.word	0x200015f8
 801939c:	00000000 	.word	0x00000000

080193a0 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80193aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80193ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80193b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193b6:	d40a      	bmi.n	80193ce <setSignalRateLimit+0x2e>
 80193b8:	6878      	ldr	r0, [r7, #4]
 80193ba:	f7e7 f8e5 	bl	8000588 <__aeabi_f2d>
 80193be:	a311      	add	r3, pc, #68	@ (adr r3, 8019404 <setSignalRateLimit+0x64>)
 80193c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c4:	f7e7 fbc8 	bl	8000b58 <__aeabi_dcmpgt>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d001      	beq.n	80193d2 <setSignalRateLimit+0x32>
 80193ce:	2300      	movs	r3, #0
 80193d0:	e00f      	b.n	80193f2 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80193d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80193d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8019400 <setSignalRateLimit+0x60>
 80193da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80193de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80193e2:	ee17 3a90 	vmov	r3, s15
 80193e6:	b29b      	uxth	r3, r3
 80193e8:	4619      	mov	r1, r3
 80193ea:	2044      	movs	r0, #68	@ 0x44
 80193ec:	f7ff fc9e 	bl	8018d2c <writeReg16Bit>
  return true;
 80193f0:	2301      	movs	r3, #1
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	3708      	adds	r7, #8
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}
 80193fa:	bf00      	nop
 80193fc:	f3af 8000 	nop.w
 8019400:	43000000 	.word	0x43000000
 8019404:	0a3d70a4 	.word	0x0a3d70a4
 8019408:	407fffd7 	.word	0x407fffd7

0801940c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b092      	sub	sp, #72	@ 0x48
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8019414:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8019418:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 801941c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8019420:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 8019422:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8019426:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 8019428:	f240 234e 	movw	r3, #590	@ 0x24e
 801942c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 801942e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8019432:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 8019434:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8019438:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 801943a:	f240 2326 	movw	r3, #550	@ 0x226
 801943e:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 8019440:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019444:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801944a:	429a      	cmp	r2, r3
 801944c:	d201      	bcs.n	8019452 <setMeasurementTimingBudget+0x46>
 801944e:	2300      	movs	r3, #0
 8019450:	e06e      	b.n	8019530 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8019452:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019456:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019458:	4413      	add	r3, r2
 801945a:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 801945c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019460:	4618      	mov	r0, r3
 8019462:	f000 fba3 	bl	8019bac <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8019466:	f107 020c 	add.w	r2, r7, #12
 801946a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801946e:	4611      	mov	r1, r2
 8019470:	4618      	mov	r0, r3
 8019472:	f000 fbcd 	bl	8019c10 <getSequenceStepTimeouts>

  if (enables.tcc)
 8019476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801947a:	2b00      	cmp	r3, #0
 801947c:	d005      	beq.n	801948a <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 801947e:	69ba      	ldr	r2, [r7, #24]
 8019480:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019482:	4413      	add	r3, r2
 8019484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019486:	4413      	add	r3, r2
 8019488:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 801948a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801948e:	2b00      	cmp	r3, #0
 8019490:	d007      	beq.n	80194a2 <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8019492:	69ba      	ldr	r2, [r7, #24]
 8019494:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019496:	4413      	add	r3, r2
 8019498:	005b      	lsls	r3, r3, #1
 801949a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801949c:	4413      	add	r3, r2
 801949e:	647b      	str	r3, [r7, #68]	@ 0x44
 80194a0:	e009      	b.n	80194b6 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80194a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d005      	beq.n	80194b6 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80194aa:	69ba      	ldr	r2, [r7, #24]
 80194ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80194ae:	4413      	add	r3, r2
 80194b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80194b2:	4413      	add	r3, r2
 80194b4:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 80194b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d005      	beq.n	80194ca <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80194be:	69fa      	ldr	r2, [r7, #28]
 80194c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80194c2:	4413      	add	r3, r2
 80194c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80194c6:	4413      	add	r3, r2
 80194c8:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 80194ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d02d      	beq.n	801952e <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 80194d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80194d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80194d6:	4413      	add	r3, r2
 80194d8:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80194da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	429a      	cmp	r2, r3
 80194e0:	d901      	bls.n	80194e6 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 80194e2:	2300      	movs	r3, #0
 80194e4:	e024      	b.n	8019530 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80194e6:	687a      	ldr	r2, [r7, #4]
 80194e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80194ea:	1ad3      	subs	r3, r2, r3
 80194ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80194ee:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	4619      	mov	r1, r3
 80194f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80194f6:	f000 fc57 	bl	8019da8 <timeoutMicrosecondsToMclks>
 80194fa:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80194fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 8019500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019504:	2b00      	cmp	r3, #0
 8019506:	d005      	beq.n	8019514 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8019508:	8a7a      	ldrh	r2, [r7, #18]
 801950a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801950e:	4413      	add	r3, r2
 8019510:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8019514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019518:	4618      	mov	r0, r3
 801951a:	f000 fbf2 	bl	8019d02 <encodeTimeout>
 801951e:	4603      	mov	r3, r0
 8019520:	4619      	mov	r1, r3
 8019522:	2071      	movs	r0, #113	@ 0x71
 8019524:	f7ff fc02 	bl	8018d2c <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 8019528:	4a03      	ldr	r2, [pc, #12]	@ (8019538 <setMeasurementTimingBudget+0x12c>)
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6013      	str	r3, [r2, #0]
  }
  return true;
 801952e:	2301      	movs	r3, #1
}
 8019530:	4618      	mov	r0, r3
 8019532:	3748      	adds	r7, #72	@ 0x48
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}
 8019538:	200015f8 	.word	0x200015f8

0801953c <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b08c      	sub	sp, #48	@ 0x30
 8019540:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8019542:	f240 7376 	movw	r3, #1910	@ 0x776
 8019546:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 8019548:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 801954c:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 801954e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8019552:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 8019554:	f240 234e 	movw	r3, #590	@ 0x24e
 8019558:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 801955a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 801955e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 8019560:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8019564:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8019566:	f240 2326 	movw	r3, #550	@ 0x226
 801956a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 801956c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 801956e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019570:	4413      	add	r3, r2
 8019572:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8019574:	f107 0318 	add.w	r3, r7, #24
 8019578:	4618      	mov	r0, r3
 801957a:	f000 fb17 	bl	8019bac <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 801957e:	463a      	mov	r2, r7
 8019580:	f107 0318 	add.w	r3, r7, #24
 8019584:	4611      	mov	r1, r2
 8019586:	4618      	mov	r0, r3
 8019588:	f000 fb42 	bl	8019c10 <getSequenceStepTimeouts>

  if (enables.tcc)
 801958c:	7e3b      	ldrb	r3, [r7, #24]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d005      	beq.n	801959e <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8019592:	68fa      	ldr	r2, [r7, #12]
 8019594:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019596:	4413      	add	r3, r2
 8019598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801959a:	4413      	add	r3, r2
 801959c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 801959e:	7ebb      	ldrb	r3, [r7, #26]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d007      	beq.n	80195b4 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80195a4:	68fa      	ldr	r2, [r7, #12]
 80195a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80195a8:	4413      	add	r3, r2
 80195aa:	005b      	lsls	r3, r3, #1
 80195ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195ae:	4413      	add	r3, r2
 80195b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195b2:	e008      	b.n	80195c6 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 80195b4:	7e7b      	ldrb	r3, [r7, #25]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d005      	beq.n	80195c6 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80195ba:	68fa      	ldr	r2, [r7, #12]
 80195bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80195be:	4413      	add	r3, r2
 80195c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195c2:	4413      	add	r3, r2
 80195c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 80195c6:	7efb      	ldrb	r3, [r7, #27]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d005      	beq.n	80195d8 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80195cc:	693a      	ldr	r2, [r7, #16]
 80195ce:	8c3b      	ldrh	r3, [r7, #32]
 80195d0:	4413      	add	r3, r2
 80195d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195d4:	4413      	add	r3, r2
 80195d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 80195d8:	7f3b      	ldrb	r3, [r7, #28]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d005      	beq.n	80195ea <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80195de:	697a      	ldr	r2, [r7, #20]
 80195e0:	8bfb      	ldrh	r3, [r7, #30]
 80195e2:	4413      	add	r3, r2
 80195e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80195e6:	4413      	add	r3, r2
 80195e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 80195ea:	4a04      	ldr	r2, [pc, #16]	@ (80195fc <getMeasurementTimingBudget+0xc0>)
 80195ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195ee:	6013      	str	r3, [r2, #0]
  return budget_us;
 80195f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	3730      	adds	r7, #48	@ 0x30
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	200015f8 	.word	0x200015f8

08019600 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b08c      	sub	sp, #48	@ 0x30
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	460a      	mov	r2, r1
 801960a:	71fb      	strb	r3, [r7, #7]
 801960c:	4613      	mov	r3, r2
 801960e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8019610:	79bb      	ldrb	r3, [r7, #6]
 8019612:	085b      	lsrs	r3, r3, #1
 8019614:	b2db      	uxtb	r3, r3
 8019616:	3b01      	subs	r3, #1
 8019618:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 801961c:	f107 0320 	add.w	r3, r7, #32
 8019620:	4618      	mov	r0, r3
 8019622:	f000 fac3 	bl	8019bac <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8019626:	f107 0208 	add.w	r2, r7, #8
 801962a:	f107 0320 	add.w	r3, r7, #32
 801962e:	4611      	mov	r1, r2
 8019630:	4618      	mov	r0, r3
 8019632:	f000 faed 	bl	8019c10 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8019636:	79fb      	ldrb	r3, [r7, #7]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d15d      	bne.n	80196f8 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 801963c:	79bb      	ldrb	r3, [r7, #6]
 801963e:	3b0c      	subs	r3, #12
 8019640:	2b06      	cmp	r3, #6
 8019642:	d825      	bhi.n	8019690 <setVcselPulsePeriod+0x90>
 8019644:	a201      	add	r2, pc, #4	@ (adr r2, 801964c <setVcselPulsePeriod+0x4c>)
 8019646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801964a:	bf00      	nop
 801964c:	08019669 	.word	0x08019669
 8019650:	08019691 	.word	0x08019691
 8019654:	08019673 	.word	0x08019673
 8019658:	08019691 	.word	0x08019691
 801965c:	0801967d 	.word	0x0801967d
 8019660:	08019691 	.word	0x08019691
 8019664:	08019687 	.word	0x08019687
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8019668:	2118      	movs	r1, #24
 801966a:	2057      	movs	r0, #87	@ 0x57
 801966c:	f7ff fb34 	bl	8018cd8 <writeReg>
        break;
 8019670:	e010      	b.n	8019694 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8019672:	2130      	movs	r1, #48	@ 0x30
 8019674:	2057      	movs	r0, #87	@ 0x57
 8019676:	f7ff fb2f 	bl	8018cd8 <writeReg>
        break;
 801967a:	e00b      	b.n	8019694 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 801967c:	2140      	movs	r1, #64	@ 0x40
 801967e:	2057      	movs	r0, #87	@ 0x57
 8019680:	f7ff fb2a 	bl	8018cd8 <writeReg>
        break;
 8019684:	e006      	b.n	8019694 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8019686:	2150      	movs	r1, #80	@ 0x50
 8019688:	2057      	movs	r0, #87	@ 0x57
 801968a:	f7ff fb25 	bl	8018cd8 <writeReg>
        break;
 801968e:	e001      	b.n	8019694 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 8019690:	2300      	movs	r3, #0
 8019692:	e0fc      	b.n	801988e <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8019694:	2108      	movs	r1, #8
 8019696:	2056      	movs	r0, #86	@ 0x56
 8019698:	f7ff fb1e 	bl	8018cd8 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 801969c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80196a0:	4619      	mov	r1, r3
 80196a2:	2050      	movs	r0, #80	@ 0x50
 80196a4:	f7ff fb18 	bl	8018cd8 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80196a8:	69bb      	ldr	r3, [r7, #24]
 80196aa:	79ba      	ldrb	r2, [r7, #6]
 80196ac:	4611      	mov	r1, r2
 80196ae:	4618      	mov	r0, r3
 80196b0:	f000 fb7a 	bl	8019da8 <timeoutMicrosecondsToMclks>
 80196b4:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 80196b6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80196b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80196ba:	4618      	mov	r0, r3
 80196bc:	f000 fb21 	bl	8019d02 <encodeTimeout>
 80196c0:	4603      	mov	r3, r0
 80196c2:	4619      	mov	r1, r3
 80196c4:	2051      	movs	r0, #81	@ 0x51
 80196c6:	f7ff fb31 	bl	8018d2c <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	79ba      	ldrb	r2, [r7, #6]
 80196ce:	4611      	mov	r1, r2
 80196d0:	4618      	mov	r0, r3
 80196d2:	f000 fb69 	bl	8019da8 <timeoutMicrosecondsToMclks>
 80196d6:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 80196d8:	853b      	strh	r3, [r7, #40]	@ 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80196da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80196dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196e0:	d804      	bhi.n	80196ec <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80196e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80196e4:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80196e6:	3b01      	subs	r3, #1
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	e000      	b.n	80196ee <setVcselPulsePeriod+0xee>
 80196ec:	23ff      	movs	r3, #255	@ 0xff
 80196ee:	4619      	mov	r1, r3
 80196f0:	2046      	movs	r0, #70	@ 0x46
 80196f2:	f7ff faf1 	bl	8018cd8 <writeReg>
 80196f6:	e0b1      	b.n	801985c <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 80196f8:	79fb      	ldrb	r3, [r7, #7]
 80196fa:	2b01      	cmp	r3, #1
 80196fc:	f040 80ac 	bne.w	8019858 <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 8019700:	79bb      	ldrb	r3, [r7, #6]
 8019702:	3b08      	subs	r3, #8
 8019704:	2b06      	cmp	r3, #6
 8019706:	f200 8085 	bhi.w	8019814 <setVcselPulsePeriod+0x214>
 801970a:	a201      	add	r2, pc, #4	@ (adr r2, 8019710 <setVcselPulsePeriod+0x110>)
 801970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019710:	0801972d 	.word	0x0801972d
 8019714:	08019815 	.word	0x08019815
 8019718:	08019767 	.word	0x08019767
 801971c:	08019815 	.word	0x08019815
 8019720:	080197a1 	.word	0x080197a1
 8019724:	08019815 	.word	0x08019815
 8019728:	080197db 	.word	0x080197db
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 801972c:	2110      	movs	r1, #16
 801972e:	2048      	movs	r0, #72	@ 0x48
 8019730:	f7ff fad2 	bl	8018cd8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8019734:	2108      	movs	r1, #8
 8019736:	2047      	movs	r0, #71	@ 0x47
 8019738:	f7ff face 	bl	8018cd8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 801973c:	2102      	movs	r1, #2
 801973e:	2032      	movs	r0, #50	@ 0x32
 8019740:	f7ff faca 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8019744:	210c      	movs	r1, #12
 8019746:	2030      	movs	r0, #48	@ 0x30
 8019748:	f7ff fac6 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x01);
 801974c:	2101      	movs	r1, #1
 801974e:	20ff      	movs	r0, #255	@ 0xff
 8019750:	f7ff fac2 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8019754:	2130      	movs	r1, #48	@ 0x30
 8019756:	2030      	movs	r0, #48	@ 0x30
 8019758:	f7ff fabe 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x00);
 801975c:	2100      	movs	r1, #0
 801975e:	20ff      	movs	r0, #255	@ 0xff
 8019760:	f7ff faba 	bl	8018cd8 <writeReg>
        break;
 8019764:	e058      	b.n	8019818 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8019766:	2128      	movs	r1, #40	@ 0x28
 8019768:	2048      	movs	r0, #72	@ 0x48
 801976a:	f7ff fab5 	bl	8018cd8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 801976e:	2108      	movs	r1, #8
 8019770:	2047      	movs	r0, #71	@ 0x47
 8019772:	f7ff fab1 	bl	8018cd8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8019776:	2103      	movs	r1, #3
 8019778:	2032      	movs	r0, #50	@ 0x32
 801977a:	f7ff faad 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 801977e:	2109      	movs	r1, #9
 8019780:	2030      	movs	r0, #48	@ 0x30
 8019782:	f7ff faa9 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x01);
 8019786:	2101      	movs	r1, #1
 8019788:	20ff      	movs	r0, #255	@ 0xff
 801978a:	f7ff faa5 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 801978e:	2120      	movs	r1, #32
 8019790:	2030      	movs	r0, #48	@ 0x30
 8019792:	f7ff faa1 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x00);
 8019796:	2100      	movs	r1, #0
 8019798:	20ff      	movs	r0, #255	@ 0xff
 801979a:	f7ff fa9d 	bl	8018cd8 <writeReg>
        break;
 801979e:	e03b      	b.n	8019818 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80197a0:	2138      	movs	r1, #56	@ 0x38
 80197a2:	2048      	movs	r0, #72	@ 0x48
 80197a4:	f7ff fa98 	bl	8018cd8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80197a8:	2108      	movs	r1, #8
 80197aa:	2047      	movs	r0, #71	@ 0x47
 80197ac:	f7ff fa94 	bl	8018cd8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80197b0:	2103      	movs	r1, #3
 80197b2:	2032      	movs	r0, #50	@ 0x32
 80197b4:	f7ff fa90 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80197b8:	2108      	movs	r1, #8
 80197ba:	2030      	movs	r0, #48	@ 0x30
 80197bc:	f7ff fa8c 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x01);
 80197c0:	2101      	movs	r1, #1
 80197c2:	20ff      	movs	r0, #255	@ 0xff
 80197c4:	f7ff fa88 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80197c8:	2120      	movs	r1, #32
 80197ca:	2030      	movs	r0, #48	@ 0x30
 80197cc:	f7ff fa84 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x00);
 80197d0:	2100      	movs	r1, #0
 80197d2:	20ff      	movs	r0, #255	@ 0xff
 80197d4:	f7ff fa80 	bl	8018cd8 <writeReg>
        break;
 80197d8:	e01e      	b.n	8019818 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80197da:	2148      	movs	r1, #72	@ 0x48
 80197dc:	2048      	movs	r0, #72	@ 0x48
 80197de:	f7ff fa7b 	bl	8018cd8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80197e2:	2108      	movs	r1, #8
 80197e4:	2047      	movs	r0, #71	@ 0x47
 80197e6:	f7ff fa77 	bl	8018cd8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80197ea:	2103      	movs	r1, #3
 80197ec:	2032      	movs	r0, #50	@ 0x32
 80197ee:	f7ff fa73 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80197f2:	2107      	movs	r1, #7
 80197f4:	2030      	movs	r0, #48	@ 0x30
 80197f6:	f7ff fa6f 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x01);
 80197fa:	2101      	movs	r1, #1
 80197fc:	20ff      	movs	r0, #255	@ 0xff
 80197fe:	f7ff fa6b 	bl	8018cd8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8019802:	2120      	movs	r1, #32
 8019804:	2030      	movs	r0, #48	@ 0x30
 8019806:	f7ff fa67 	bl	8018cd8 <writeReg>
        writeReg(0xFF, 0x00);
 801980a:	2100      	movs	r1, #0
 801980c:	20ff      	movs	r0, #255	@ 0xff
 801980e:	f7ff fa63 	bl	8018cd8 <writeReg>
        break;
 8019812:	e001      	b.n	8019818 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 8019814:	2300      	movs	r3, #0
 8019816:	e03a      	b.n	801988e <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8019818:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801981c:	4619      	mov	r1, r3
 801981e:	2070      	movs	r0, #112	@ 0x70
 8019820:	f7ff fa5a 	bl	8018cd8 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8019824:	69fb      	ldr	r3, [r7, #28]
 8019826:	79ba      	ldrb	r2, [r7, #6]
 8019828:	4611      	mov	r1, r2
 801982a:	4618      	mov	r0, r3
 801982c:	f000 fabc 	bl	8019da8 <timeoutMicrosecondsToMclks>
 8019830:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8019832:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (enables.pre_range)
 8019834:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019838:	2b00      	cmp	r3, #0
 801983a:	d003      	beq.n	8019844 <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 801983c:	89fa      	ldrh	r2, [r7, #14]
 801983e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019840:	4413      	add	r3, r2
 8019842:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8019844:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019846:	4618      	mov	r0, r3
 8019848:	f000 fa5b 	bl	8019d02 <encodeTimeout>
 801984c:	4603      	mov	r3, r0
 801984e:	4619      	mov	r1, r3
 8019850:	2071      	movs	r0, #113	@ 0x71
 8019852:	f7ff fa6b 	bl	8018d2c <writeReg16Bit>
 8019856:	e001      	b.n	801985c <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8019858:	2300      	movs	r3, #0
 801985a:	e018      	b.n	801988e <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 801985c:	4b0e      	ldr	r3, [pc, #56]	@ (8019898 <setVcselPulsePeriod+0x298>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	4618      	mov	r0, r3
 8019862:	f7ff fdd3 	bl	801940c <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8019866:	2001      	movs	r0, #1
 8019868:	f7ff fa8a 	bl	8018d80 <readReg>
 801986c:	4603      	mov	r3, r0
 801986e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8019872:	2102      	movs	r1, #2
 8019874:	2001      	movs	r0, #1
 8019876:	f7ff fa2f 	bl	8018cd8 <writeReg>
  performSingleRefCalibration(0x0);
 801987a:	2000      	movs	r0, #0
 801987c:	f000 faba 	bl	8019df4 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8019880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019884:	4619      	mov	r1, r3
 8019886:	2001      	movs	r0, #1
 8019888:	f7ff fa26 	bl	8018cd8 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 801988c:	2301      	movs	r3, #1
}
 801988e:	4618      	mov	r0, r3
 8019890:	3730      	adds	r7, #48	@ 0x30
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}
 8019896:	bf00      	nop
 8019898:	200015f8 	.word	0x200015f8

0801989c <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 80198a6:	79fb      	ldrb	r3, [r7, #7]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d108      	bne.n	80198be <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80198ac:	2050      	movs	r0, #80	@ 0x50
 80198ae:	f7ff fa67 	bl	8018d80 <readReg>
 80198b2:	4603      	mov	r3, r0
 80198b4:	3301      	adds	r3, #1
 80198b6:	b2db      	uxtb	r3, r3
 80198b8:	005b      	lsls	r3, r3, #1
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	e00c      	b.n	80198d8 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 80198be:	79fb      	ldrb	r3, [r7, #7]
 80198c0:	2b01      	cmp	r3, #1
 80198c2:	d108      	bne.n	80198d6 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80198c4:	2070      	movs	r0, #112	@ 0x70
 80198c6:	f7ff fa5b 	bl	8018d80 <readReg>
 80198ca:	4603      	mov	r3, r0
 80198cc:	3301      	adds	r3, #1
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	005b      	lsls	r3, r3, #1
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	e000      	b.n	80198d8 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 80198d6:	23ff      	movs	r3, #255	@ 0xff
}
 80198d8:	4618      	mov	r0, r3
 80198da:	3708      	adds	r7, #8
 80198dc:	46bd      	mov	sp, r7
 80198de:	bd80      	pop	{r7, pc}

080198e0 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b086      	sub	sp, #24
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 80198e8:	f7ea fd7a 	bl	80043e0 <HAL_GetTick>
 80198ec:	4603      	mov	r3, r0
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	4b33      	ldr	r3, [pc, #204]	@ (80199c0 <readRangeContinuousMillimeters+0xe0>)
 80198f2:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 80198f4:	e015      	b.n	8019922 <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 80198f6:	4b33      	ldr	r3, [pc, #204]	@ (80199c4 <readRangeContinuousMillimeters+0xe4>)
 80198f8:	881b      	ldrh	r3, [r3, #0]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d011      	beq.n	8019922 <readRangeContinuousMillimeters+0x42>
 80198fe:	f7ea fd6f 	bl	80043e0 <HAL_GetTick>
 8019902:	4603      	mov	r3, r0
 8019904:	b29b      	uxth	r3, r3
 8019906:	461a      	mov	r2, r3
 8019908:	4b2d      	ldr	r3, [pc, #180]	@ (80199c0 <readRangeContinuousMillimeters+0xe0>)
 801990a:	881b      	ldrh	r3, [r3, #0]
 801990c:	1ad3      	subs	r3, r2, r3
 801990e:	4a2d      	ldr	r2, [pc, #180]	@ (80199c4 <readRangeContinuousMillimeters+0xe4>)
 8019910:	8812      	ldrh	r2, [r2, #0]
 8019912:	4293      	cmp	r3, r2
 8019914:	dd05      	ble.n	8019922 <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8019916:	4b2c      	ldr	r3, [pc, #176]	@ (80199c8 <readRangeContinuousMillimeters+0xe8>)
 8019918:	2201      	movs	r2, #1
 801991a:	701a      	strb	r2, [r3, #0]
      return 65535;
 801991c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019920:	e04a      	b.n	80199b8 <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8019922:	2013      	movs	r0, #19
 8019924:	f7ff fa2c 	bl	8018d80 <readReg>
 8019928:	4603      	mov	r3, r0
 801992a:	f003 0307 	and.w	r3, r3, #7
 801992e:	2b00      	cmp	r3, #0
 8019930:	d0e1      	beq.n	80198f6 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d105      	bne.n	8019944 <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8019938:	201e      	movs	r0, #30
 801993a:	f7ff fa4d 	bl	8018dd8 <readReg16Bit>
 801993e:	4603      	mov	r3, r0
 8019940:	82fb      	strh	r3, [r7, #22]
 8019942:	e034      	b.n	80199ae <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8019944:	f107 0308 	add.w	r3, r7, #8
 8019948:	220c      	movs	r2, #12
 801994a:	4619      	mov	r1, r3
 801994c:	2014      	movs	r0, #20
 801994e:	f7ff fa9d 	bl	8018e8c <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8019952:	7a3b      	ldrb	r3, [r7, #8]
 8019954:	08db      	lsrs	r3, r3, #3
 8019956:	b2da      	uxtb	r2, r3
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 801995c:	7abb      	ldrb	r3, [r7, #10]
 801995e:	021b      	lsls	r3, r3, #8
 8019960:	b21a      	sxth	r2, r3
 8019962:	7afb      	ldrb	r3, [r7, #11]
 8019964:	b21b      	sxth	r3, r3
 8019966:	4313      	orrs	r3, r2
 8019968:	b21b      	sxth	r3, r3
 801996a:	b29a      	uxth	r2, r3
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8019970:	7bbb      	ldrb	r3, [r7, #14]
 8019972:	021b      	lsls	r3, r3, #8
 8019974:	b21a      	sxth	r2, r3
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	b21b      	sxth	r3, r3
 801997a:	4313      	orrs	r3, r2
 801997c:	b21b      	sxth	r3, r3
 801997e:	b29a      	uxth	r2, r3
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8019984:	7c3b      	ldrb	r3, [r7, #16]
 8019986:	021b      	lsls	r3, r3, #8
 8019988:	b21a      	sxth	r2, r3
 801998a:	7c7b      	ldrb	r3, [r7, #17]
 801998c:	b21b      	sxth	r3, r3
 801998e:	4313      	orrs	r3, r2
 8019990:	b21b      	sxth	r3, r3
 8019992:	b29a      	uxth	r2, r3
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8019998:	7cbb      	ldrb	r3, [r7, #18]
 801999a:	021b      	lsls	r3, r3, #8
 801999c:	b21a      	sxth	r2, r3
 801999e:	7cfb      	ldrb	r3, [r7, #19]
 80199a0:	b21b      	sxth	r3, r3
 80199a2:	4313      	orrs	r3, r2
 80199a4:	b21b      	sxth	r3, r3
 80199a6:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	8afa      	ldrh	r2, [r7, #22]
 80199ac:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80199ae:	2101      	movs	r1, #1
 80199b0:	200b      	movs	r0, #11
 80199b2:	f7ff f991 	bl	8018cd8 <writeReg>
  return temp;
 80199b6:	8afb      	ldrh	r3, [r7, #22]
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	3718      	adds	r7, #24
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}
 80199c0:	200015f4 	.word	0x200015f4
 80199c4:	200015f0 	.word	0x200015f0
 80199c8:	200015f2 	.word	0x200015f2

080199cc <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 80199d4:	2101      	movs	r1, #1
 80199d6:	2080      	movs	r0, #128	@ 0x80
 80199d8:	f7ff f97e 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x01);
 80199dc:	2101      	movs	r1, #1
 80199de:	20ff      	movs	r0, #255	@ 0xff
 80199e0:	f7ff f97a 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x00);
 80199e4:	2100      	movs	r1, #0
 80199e6:	2000      	movs	r0, #0
 80199e8:	f7ff f976 	bl	8018cd8 <writeReg>
  writeReg(0x91, g_stopVariable);
 80199ec:	4b21      	ldr	r3, [pc, #132]	@ (8019a74 <readRangeSingleMillimeters+0xa8>)
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	4619      	mov	r1, r3
 80199f2:	2091      	movs	r0, #145	@ 0x91
 80199f4:	f7ff f970 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x01);
 80199f8:	2101      	movs	r1, #1
 80199fa:	2000      	movs	r0, #0
 80199fc:	f7ff f96c 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x00);
 8019a00:	2100      	movs	r1, #0
 8019a02:	20ff      	movs	r0, #255	@ 0xff
 8019a04:	f7ff f968 	bl	8018cd8 <writeReg>
  writeReg(0x80, 0x00);
 8019a08:	2100      	movs	r1, #0
 8019a0a:	2080      	movs	r0, #128	@ 0x80
 8019a0c:	f7ff f964 	bl	8018cd8 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8019a10:	2101      	movs	r1, #1
 8019a12:	2000      	movs	r0, #0
 8019a14:	f7ff f960 	bl	8018cd8 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8019a18:	f7ea fce2 	bl	80043e0 <HAL_GetTick>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	b29a      	uxth	r2, r3
 8019a20:	4b15      	ldr	r3, [pc, #84]	@ (8019a78 <readRangeSingleMillimeters+0xac>)
 8019a22:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8019a24:	e015      	b.n	8019a52 <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 8019a26:	4b15      	ldr	r3, [pc, #84]	@ (8019a7c <readRangeSingleMillimeters+0xb0>)
 8019a28:	881b      	ldrh	r3, [r3, #0]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d011      	beq.n	8019a52 <readRangeSingleMillimeters+0x86>
 8019a2e:	f7ea fcd7 	bl	80043e0 <HAL_GetTick>
 8019a32:	4603      	mov	r3, r0
 8019a34:	b29b      	uxth	r3, r3
 8019a36:	461a      	mov	r2, r3
 8019a38:	4b0f      	ldr	r3, [pc, #60]	@ (8019a78 <readRangeSingleMillimeters+0xac>)
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	1ad3      	subs	r3, r2, r3
 8019a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8019a7c <readRangeSingleMillimeters+0xb0>)
 8019a40:	8812      	ldrh	r2, [r2, #0]
 8019a42:	4293      	cmp	r3, r2
 8019a44:	dd05      	ble.n	8019a52 <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 8019a46:	4b0e      	ldr	r3, [pc, #56]	@ (8019a80 <readRangeSingleMillimeters+0xb4>)
 8019a48:	2201      	movs	r2, #1
 8019a4a:	701a      	strb	r2, [r3, #0]
      return 65535;
 8019a4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a50:	e00b      	b.n	8019a6a <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8019a52:	2000      	movs	r0, #0
 8019a54:	f7ff f994 	bl	8018d80 <readReg>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	f003 0301 	and.w	r3, r3, #1
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1e1      	bne.n	8019a26 <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f7ff ff3c 	bl	80198e0 <readRangeContinuousMillimeters>
 8019a68:	4603      	mov	r3, r0
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3708      	adds	r7, #8
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bd80      	pop	{r7, pc}
 8019a72:	bf00      	nop
 8019a74:	200015f6 	.word	0x200015f6
 8019a78:	200015f4 	.word	0x200015f4
 8019a7c:	200015f0 	.word	0x200015f0
 8019a80:	200015f2 	.word	0x200015f2

08019a84 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b084      	sub	sp, #16
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
 8019a8c:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8019a8e:	2101      	movs	r1, #1
 8019a90:	2080      	movs	r0, #128	@ 0x80
 8019a92:	f7ff f921 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x01);
 8019a96:	2101      	movs	r1, #1
 8019a98:	20ff      	movs	r0, #255	@ 0xff
 8019a9a:	f7ff f91d 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x00);
 8019a9e:	2100      	movs	r1, #0
 8019aa0:	2000      	movs	r0, #0
 8019aa2:	f7ff f919 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x06);
 8019aa6:	2106      	movs	r1, #6
 8019aa8:	20ff      	movs	r0, #255	@ 0xff
 8019aaa:	f7ff f915 	bl	8018cd8 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8019aae:	2083      	movs	r0, #131	@ 0x83
 8019ab0:	f7ff f966 	bl	8018d80 <readReg>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	f043 0304 	orr.w	r3, r3, #4
 8019aba:	b2db      	uxtb	r3, r3
 8019abc:	4619      	mov	r1, r3
 8019abe:	2083      	movs	r0, #131	@ 0x83
 8019ac0:	f7ff f90a 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x07);
 8019ac4:	2107      	movs	r1, #7
 8019ac6:	20ff      	movs	r0, #255	@ 0xff
 8019ac8:	f7ff f906 	bl	8018cd8 <writeReg>
  writeReg(0x81, 0x01);
 8019acc:	2101      	movs	r1, #1
 8019ace:	2081      	movs	r0, #129	@ 0x81
 8019ad0:	f7ff f902 	bl	8018cd8 <writeReg>

  writeReg(0x80, 0x01);
 8019ad4:	2101      	movs	r1, #1
 8019ad6:	2080      	movs	r0, #128	@ 0x80
 8019ad8:	f7ff f8fe 	bl	8018cd8 <writeReg>

  writeReg(0x94, 0x6b);
 8019adc:	216b      	movs	r1, #107	@ 0x6b
 8019ade:	2094      	movs	r0, #148	@ 0x94
 8019ae0:	f7ff f8fa 	bl	8018cd8 <writeReg>
  writeReg(0x83, 0x00);
 8019ae4:	2100      	movs	r1, #0
 8019ae6:	2083      	movs	r0, #131	@ 0x83
 8019ae8:	f7ff f8f6 	bl	8018cd8 <writeReg>
  startTimeout();
 8019aec:	f7ea fc78 	bl	80043e0 <HAL_GetTick>
 8019af0:	4603      	mov	r3, r0
 8019af2:	b29a      	uxth	r2, r3
 8019af4:	4b2b      	ldr	r3, [pc, #172]	@ (8019ba4 <getSpadInfo+0x120>)
 8019af6:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8019af8:	e011      	b.n	8019b1e <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8019afa:	4b2b      	ldr	r3, [pc, #172]	@ (8019ba8 <getSpadInfo+0x124>)
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d00d      	beq.n	8019b1e <getSpadInfo+0x9a>
 8019b02:	f7ea fc6d 	bl	80043e0 <HAL_GetTick>
 8019b06:	4603      	mov	r3, r0
 8019b08:	b29b      	uxth	r3, r3
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	4b25      	ldr	r3, [pc, #148]	@ (8019ba4 <getSpadInfo+0x120>)
 8019b0e:	881b      	ldrh	r3, [r3, #0]
 8019b10:	1ad3      	subs	r3, r2, r3
 8019b12:	4a25      	ldr	r2, [pc, #148]	@ (8019ba8 <getSpadInfo+0x124>)
 8019b14:	8812      	ldrh	r2, [r2, #0]
 8019b16:	4293      	cmp	r3, r2
 8019b18:	dd01      	ble.n	8019b1e <getSpadInfo+0x9a>
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	e03d      	b.n	8019b9a <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8019b1e:	2083      	movs	r0, #131	@ 0x83
 8019b20:	f7ff f92e 	bl	8018d80 <readReg>
 8019b24:	4603      	mov	r3, r0
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d0e7      	beq.n	8019afa <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8019b2a:	2101      	movs	r1, #1
 8019b2c:	2083      	movs	r0, #131	@ 0x83
 8019b2e:	f7ff f8d3 	bl	8018cd8 <writeReg>
  tmp = readReg(0x92);
 8019b32:	2092      	movs	r0, #146	@ 0x92
 8019b34:	f7ff f924 	bl	8018d80 <readReg>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8019b3c:	7bfb      	ldrb	r3, [r7, #15]
 8019b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019b42:	b2da      	uxtb	r2, r3
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8019b48:	7bfb      	ldrb	r3, [r7, #15]
 8019b4a:	09db      	lsrs	r3, r3, #7
 8019b4c:	b2da      	uxtb	r2, r3
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8019b52:	2100      	movs	r1, #0
 8019b54:	2081      	movs	r0, #129	@ 0x81
 8019b56:	f7ff f8bf 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x06);
 8019b5a:	2106      	movs	r1, #6
 8019b5c:	20ff      	movs	r0, #255	@ 0xff
 8019b5e:	f7ff f8bb 	bl	8018cd8 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8019b62:	2083      	movs	r0, #131	@ 0x83
 8019b64:	f7ff f90c 	bl	8018d80 <readReg>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	f023 0304 	bic.w	r3, r3, #4
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	4619      	mov	r1, r3
 8019b72:	2083      	movs	r0, #131	@ 0x83
 8019b74:	f7ff f8b0 	bl	8018cd8 <writeReg>
  writeReg(0xFF, 0x01);
 8019b78:	2101      	movs	r1, #1
 8019b7a:	20ff      	movs	r0, #255	@ 0xff
 8019b7c:	f7ff f8ac 	bl	8018cd8 <writeReg>
  writeReg(0x00, 0x01);
 8019b80:	2101      	movs	r1, #1
 8019b82:	2000      	movs	r0, #0
 8019b84:	f7ff f8a8 	bl	8018cd8 <writeReg>

  writeReg(0xFF, 0x00);
 8019b88:	2100      	movs	r1, #0
 8019b8a:	20ff      	movs	r0, #255	@ 0xff
 8019b8c:	f7ff f8a4 	bl	8018cd8 <writeReg>
  writeReg(0x80, 0x00);
 8019b90:	2100      	movs	r1, #0
 8019b92:	2080      	movs	r0, #128	@ 0x80
 8019b94:	f7ff f8a0 	bl	8018cd8 <writeReg>

  return true;
 8019b98:	2301      	movs	r3, #1
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3710      	adds	r7, #16
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}
 8019ba2:	bf00      	nop
 8019ba4:	200015f4 	.word	0x200015f4
 8019ba8:	200015f0 	.word	0x200015f0

08019bac <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8019bb4:	2001      	movs	r0, #1
 8019bb6:	f7ff f8e3 	bl	8018d80 <readReg>
 8019bba:	4603      	mov	r3, r0
 8019bbc:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8019bbe:	7bfb      	ldrb	r3, [r7, #15]
 8019bc0:	091b      	lsrs	r3, r3, #4
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	f003 0301 	and.w	r3, r3, #1
 8019bc8:	b2da      	uxtb	r2, r3
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8019bce:	7bfb      	ldrb	r3, [r7, #15]
 8019bd0:	08db      	lsrs	r3, r3, #3
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f003 0301 	and.w	r3, r3, #1
 8019bd8:	b2da      	uxtb	r2, r3
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8019bde:	7bfb      	ldrb	r3, [r7, #15]
 8019be0:	089b      	lsrs	r3, r3, #2
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	f003 0301 	and.w	r3, r3, #1
 8019be8:	b2da      	uxtb	r2, r3
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8019bee:	7bfb      	ldrb	r3, [r7, #15]
 8019bf0:	099b      	lsrs	r3, r3, #6
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	f003 0301 	and.w	r3, r3, #1
 8019bf8:	b2da      	uxtb	r2, r3
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8019bfe:	7bfb      	ldrb	r3, [r7, #15]
 8019c00:	09db      	lsrs	r3, r3, #7
 8019c02:	b2da      	uxtb	r2, r3
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	711a      	strb	r2, [r3, #4]
}
 8019c08:	bf00      	nop
 8019c0a:	3710      	adds	r7, #16
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd80      	pop	{r7, pc}

08019c10 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
 8019c18:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	f7ff fe3e 	bl	801989c <getVcselPulsePeriod>
 8019c20:	4603      	mov	r3, r0
 8019c22:	461a      	mov	r2, r3
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8019c28:	2046      	movs	r0, #70	@ 0x46
 8019c2a:	f7ff f8a9 	bl	8018d80 <readReg>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	3301      	adds	r3, #1
 8019c32:	b29a      	uxth	r2, r3
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8019c40:	b2db      	uxtb	r3, r3
 8019c42:	4619      	mov	r1, r3
 8019c44:	4610      	mov	r0, r2
 8019c46:	f000 f887 	bl	8019d58 <timeoutMclksToMicroseconds>
 8019c4a:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8019c50:	2051      	movs	r0, #81	@ 0x51
 8019c52:	f7ff f8c1 	bl	8018dd8 <readReg16Bit>
 8019c56:	4603      	mov	r3, r0
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f000 f83e 	bl	8019cda <decodeTimeout>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8019c6e:	b2db      	uxtb	r3, r3
 8019c70:	4619      	mov	r1, r3
 8019c72:	4610      	mov	r0, r2
 8019c74:	f000 f870 	bl	8019d58 <timeoutMclksToMicroseconds>
 8019c78:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8019c7a:	683b      	ldr	r3, [r7, #0]
 8019c7c:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8019c7e:	2001      	movs	r0, #1
 8019c80:	f7ff fe0c 	bl	801989c <getVcselPulsePeriod>
 8019c84:	4603      	mov	r3, r0
 8019c86:	461a      	mov	r2, r3
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8019c8c:	2071      	movs	r0, #113	@ 0x71
 8019c8e:	f7ff f8a3 	bl	8018dd8 <readReg16Bit>
 8019c92:	4603      	mov	r3, r0
 8019c94:	4618      	mov	r0, r3
 8019c96:	f000 f820 	bl	8019cda <decodeTimeout>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	78db      	ldrb	r3, [r3, #3]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d007      	beq.n	8019cba <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	891a      	ldrh	r2, [r3, #8]
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	88db      	ldrh	r3, [r3, #6]
 8019cb2:	1ad3      	subs	r3, r2, r3
 8019cb4:	b29a      	uxth	r2, r3
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8019cc2:	b2db      	uxtb	r3, r3
 8019cc4:	4619      	mov	r1, r3
 8019cc6:	4610      	mov	r0, r2
 8019cc8:	f000 f846 	bl	8019d58 <timeoutMclksToMicroseconds>
 8019ccc:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	615a      	str	r2, [r3, #20]
}
 8019cd2:	bf00      	nop
 8019cd4:	3708      	adds	r7, #8
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	bd80      	pop	{r7, pc}

08019cda <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8019cda:	b480      	push	{r7}
 8019cdc:	b083      	sub	sp, #12
 8019cde:	af00      	add	r7, sp, #0
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8019ce4:	88fb      	ldrh	r3, [r7, #6]
 8019ce6:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8019ce8:	88fa      	ldrh	r2, [r7, #6]
 8019cea:	0a12      	lsrs	r2, r2, #8
 8019cec:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8019cee:	4093      	lsls	r3, r2
 8019cf0:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	b29b      	uxth	r3, r3
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	370c      	adds	r7, #12
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr

08019d02 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8019d02:	b480      	push	{r7}
 8019d04:	b085      	sub	sp, #20
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	4603      	mov	r3, r0
 8019d0a:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8019d10:	2300      	movs	r3, #0
 8019d12:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8019d14:	88fb      	ldrh	r3, [r7, #6]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d016      	beq.n	8019d48 <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 8019d1a:	88fb      	ldrh	r3, [r7, #6]
 8019d1c:	3b01      	subs	r3, #1
 8019d1e:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8019d20:	e005      	b.n	8019d2e <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	085b      	lsrs	r3, r3, #1
 8019d26:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8019d28:	897b      	ldrh	r3, [r7, #10]
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	2bff      	cmp	r3, #255	@ 0xff
 8019d32:	d8f6      	bhi.n	8019d22 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8019d34:	897b      	ldrh	r3, [r7, #10]
 8019d36:	021b      	lsls	r3, r3, #8
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	b29b      	uxth	r3, r3
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	4313      	orrs	r3, r2
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	e000      	b.n	8019d4a <encodeTimeout+0x48>
  }
  else { return 0; }
 8019d48:	2300      	movs	r3, #0
}
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	3714      	adds	r7, #20
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d54:	4770      	bx	lr
	...

08019d58 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b085      	sub	sp, #20
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	4603      	mov	r3, r0
 8019d60:	460a      	mov	r2, r1
 8019d62:	80fb      	strh	r3, [r7, #6]
 8019d64:	4613      	mov	r3, r2
 8019d66:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8019d68:	797b      	ldrb	r3, [r7, #5]
 8019d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8019da0 <timeoutMclksToMicroseconds+0x48>)
 8019d6c:	fb02 f303 	mul.w	r3, r2, r3
 8019d70:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019d74:	4a0b      	ldr	r2, [pc, #44]	@ (8019da4 <timeoutMclksToMicroseconds+0x4c>)
 8019d76:	fba2 2303 	umull	r2, r3, r2, r3
 8019d7a:	099b      	lsrs	r3, r3, #6
 8019d7c:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8019d7e:	88fb      	ldrh	r3, [r7, #6]
 8019d80:	68fa      	ldr	r2, [r7, #12]
 8019d82:	fb03 f202 	mul.w	r2, r3, r2
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	085b      	lsrs	r3, r3, #1
 8019d8a:	4413      	add	r3, r2
 8019d8c:	4a05      	ldr	r2, [pc, #20]	@ (8019da4 <timeoutMclksToMicroseconds+0x4c>)
 8019d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8019d92:	099b      	lsrs	r3, r3, #6
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	3714      	adds	r7, #20
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9e:	4770      	bx	lr
 8019da0:	003a2f00 	.word	0x003a2f00
 8019da4:	10624dd3 	.word	0x10624dd3

08019da8 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8019da8:	b480      	push	{r7}
 8019daa:	b085      	sub	sp, #20
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
 8019db0:	460b      	mov	r3, r1
 8019db2:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8019db4:	78fb      	ldrb	r3, [r7, #3]
 8019db6:	4a0d      	ldr	r2, [pc, #52]	@ (8019dec <timeoutMicrosecondsToMclks+0x44>)
 8019db8:	fb02 f303 	mul.w	r3, r2, r3
 8019dbc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8019df0 <timeoutMicrosecondsToMclks+0x48>)
 8019dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8019dc6:	099b      	lsrs	r3, r3, #6
 8019dc8:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019dd0:	fb03 f202 	mul.w	r2, r3, r2
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	085b      	lsrs	r3, r3, #1
 8019dd8:	441a      	add	r2, r3
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3714      	adds	r7, #20
 8019de4:	46bd      	mov	sp, r7
 8019de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dea:	4770      	bx	lr
 8019dec:	003a2f00 	.word	0x003a2f00
 8019df0:	10624dd3 	.word	0x10624dd3

08019df4 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8019dfe:	79fb      	ldrb	r3, [r7, #7]
 8019e00:	f043 0301 	orr.w	r3, r3, #1
 8019e04:	b2db      	uxtb	r3, r3
 8019e06:	4619      	mov	r1, r3
 8019e08:	2000      	movs	r0, #0
 8019e0a:	f7fe ff65 	bl	8018cd8 <writeReg>

  startTimeout();
 8019e0e:	f7ea fae7 	bl	80043e0 <HAL_GetTick>
 8019e12:	4603      	mov	r3, r0
 8019e14:	b29a      	uxth	r2, r3
 8019e16:	4b15      	ldr	r3, [pc, #84]	@ (8019e6c <performSingleRefCalibration+0x78>)
 8019e18:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8019e1a:	e011      	b.n	8019e40 <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8019e1c:	4b14      	ldr	r3, [pc, #80]	@ (8019e70 <performSingleRefCalibration+0x7c>)
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d00d      	beq.n	8019e40 <performSingleRefCalibration+0x4c>
 8019e24:	f7ea fadc 	bl	80043e0 <HAL_GetTick>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8019e6c <performSingleRefCalibration+0x78>)
 8019e30:	881b      	ldrh	r3, [r3, #0]
 8019e32:	1ad3      	subs	r3, r2, r3
 8019e34:	4a0e      	ldr	r2, [pc, #56]	@ (8019e70 <performSingleRefCalibration+0x7c>)
 8019e36:	8812      	ldrh	r2, [r2, #0]
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	dd01      	ble.n	8019e40 <performSingleRefCalibration+0x4c>
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	e010      	b.n	8019e62 <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8019e40:	2013      	movs	r0, #19
 8019e42:	f7fe ff9d 	bl	8018d80 <readReg>
 8019e46:	4603      	mov	r3, r0
 8019e48:	f003 0307 	and.w	r3, r3, #7
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d0e5      	beq.n	8019e1c <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8019e50:	2101      	movs	r1, #1
 8019e52:	200b      	movs	r0, #11
 8019e54:	f7fe ff40 	bl	8018cd8 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8019e58:	2100      	movs	r1, #0
 8019e5a:	2000      	movs	r0, #0
 8019e5c:	f7fe ff3c 	bl	8018cd8 <writeReg>

  return true;
 8019e60:	2301      	movs	r3, #1
 8019e62:	4618      	mov	r0, r3
 8019e64:	3708      	adds	r7, #8
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}
 8019e6a:	bf00      	nop
 8019e6c:	200015f4 	.word	0x200015f4
 8019e70:	200015f0 	.word	0x200015f0

08019e74 <atan2f>:
 8019e74:	f000 ba58 	b.w	801a328 <__ieee754_atan2f>

08019e78 <sqrtf>:
 8019e78:	b508      	push	{r3, lr}
 8019e7a:	ed2d 8b02 	vpush	{d8}
 8019e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8019e82:	f000 f8cd 	bl	801a020 <__ieee754_sqrtf>
 8019e86:	eeb4 8a48 	vcmp.f32	s16, s16
 8019e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e8e:	d60c      	bvs.n	8019eaa <sqrtf+0x32>
 8019e90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019eb0 <sqrtf+0x38>
 8019e94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e9c:	d505      	bpl.n	8019eaa <sqrtf+0x32>
 8019e9e:	f001 fec1 	bl	801bc24 <__errno>
 8019ea2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019ea6:	2321      	movs	r3, #33	@ 0x21
 8019ea8:	6003      	str	r3, [r0, #0]
 8019eaa:	ecbd 8b02 	vpop	{d8}
 8019eae:	bd08      	pop	{r3, pc}
 8019eb0:	00000000 	.word	0x00000000

08019eb4 <cosf>:
 8019eb4:	ee10 3a10 	vmov	r3, s0
 8019eb8:	b507      	push	{r0, r1, r2, lr}
 8019eba:	4a1e      	ldr	r2, [pc, #120]	@ (8019f34 <cosf+0x80>)
 8019ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	d806      	bhi.n	8019ed2 <cosf+0x1e>
 8019ec4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019f38 <cosf+0x84>
 8019ec8:	b003      	add	sp, #12
 8019eca:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ece:	f000 b8ab 	b.w	801a028 <__kernel_cosf>
 8019ed2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019ed6:	d304      	bcc.n	8019ee2 <cosf+0x2e>
 8019ed8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019edc:	b003      	add	sp, #12
 8019ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ee2:	4668      	mov	r0, sp
 8019ee4:	f000 fac0 	bl	801a468 <__ieee754_rem_pio2f>
 8019ee8:	f000 0003 	and.w	r0, r0, #3
 8019eec:	2801      	cmp	r0, #1
 8019eee:	d009      	beq.n	8019f04 <cosf+0x50>
 8019ef0:	2802      	cmp	r0, #2
 8019ef2:	d010      	beq.n	8019f16 <cosf+0x62>
 8019ef4:	b9b0      	cbnz	r0, 8019f24 <cosf+0x70>
 8019ef6:	eddd 0a01 	vldr	s1, [sp, #4]
 8019efa:	ed9d 0a00 	vldr	s0, [sp]
 8019efe:	f000 f893 	bl	801a028 <__kernel_cosf>
 8019f02:	e7eb      	b.n	8019edc <cosf+0x28>
 8019f04:	eddd 0a01 	vldr	s1, [sp, #4]
 8019f08:	ed9d 0a00 	vldr	s0, [sp]
 8019f0c:	f000 f8e4 	bl	801a0d8 <__kernel_sinf>
 8019f10:	eeb1 0a40 	vneg.f32	s0, s0
 8019f14:	e7e2      	b.n	8019edc <cosf+0x28>
 8019f16:	eddd 0a01 	vldr	s1, [sp, #4]
 8019f1a:	ed9d 0a00 	vldr	s0, [sp]
 8019f1e:	f000 f883 	bl	801a028 <__kernel_cosf>
 8019f22:	e7f5      	b.n	8019f10 <cosf+0x5c>
 8019f24:	eddd 0a01 	vldr	s1, [sp, #4]
 8019f28:	ed9d 0a00 	vldr	s0, [sp]
 8019f2c:	2001      	movs	r0, #1
 8019f2e:	f000 f8d3 	bl	801a0d8 <__kernel_sinf>
 8019f32:	e7d3      	b.n	8019edc <cosf+0x28>
 8019f34:	3f490fd8 	.word	0x3f490fd8
 8019f38:	00000000 	.word	0x00000000

08019f3c <sinf>:
 8019f3c:	ee10 3a10 	vmov	r3, s0
 8019f40:	b507      	push	{r0, r1, r2, lr}
 8019f42:	4a1f      	ldr	r2, [pc, #124]	@ (8019fc0 <sinf+0x84>)
 8019f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019f48:	4293      	cmp	r3, r2
 8019f4a:	d807      	bhi.n	8019f5c <sinf+0x20>
 8019f4c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019fc4 <sinf+0x88>
 8019f50:	2000      	movs	r0, #0
 8019f52:	b003      	add	sp, #12
 8019f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f58:	f000 b8be 	b.w	801a0d8 <__kernel_sinf>
 8019f5c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019f60:	d304      	bcc.n	8019f6c <sinf+0x30>
 8019f62:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019f66:	b003      	add	sp, #12
 8019f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f6c:	4668      	mov	r0, sp
 8019f6e:	f000 fa7b 	bl	801a468 <__ieee754_rem_pio2f>
 8019f72:	f000 0003 	and.w	r0, r0, #3
 8019f76:	2801      	cmp	r0, #1
 8019f78:	d00a      	beq.n	8019f90 <sinf+0x54>
 8019f7a:	2802      	cmp	r0, #2
 8019f7c:	d00f      	beq.n	8019f9e <sinf+0x62>
 8019f7e:	b9c0      	cbnz	r0, 8019fb2 <sinf+0x76>
 8019f80:	eddd 0a01 	vldr	s1, [sp, #4]
 8019f84:	ed9d 0a00 	vldr	s0, [sp]
 8019f88:	2001      	movs	r0, #1
 8019f8a:	f000 f8a5 	bl	801a0d8 <__kernel_sinf>
 8019f8e:	e7ea      	b.n	8019f66 <sinf+0x2a>
 8019f90:	eddd 0a01 	vldr	s1, [sp, #4]
 8019f94:	ed9d 0a00 	vldr	s0, [sp]
 8019f98:	f000 f846 	bl	801a028 <__kernel_cosf>
 8019f9c:	e7e3      	b.n	8019f66 <sinf+0x2a>
 8019f9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019fa2:	ed9d 0a00 	vldr	s0, [sp]
 8019fa6:	2001      	movs	r0, #1
 8019fa8:	f000 f896 	bl	801a0d8 <__kernel_sinf>
 8019fac:	eeb1 0a40 	vneg.f32	s0, s0
 8019fb0:	e7d9      	b.n	8019f66 <sinf+0x2a>
 8019fb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8019fb6:	ed9d 0a00 	vldr	s0, [sp]
 8019fba:	f000 f835 	bl	801a028 <__kernel_cosf>
 8019fbe:	e7f5      	b.n	8019fac <sinf+0x70>
 8019fc0:	3f490fd8 	.word	0x3f490fd8
 8019fc4:	00000000 	.word	0x00000000

08019fc8 <tanf>:
 8019fc8:	ee10 3a10 	vmov	r3, s0
 8019fcc:	b507      	push	{r0, r1, r2, lr}
 8019fce:	4a12      	ldr	r2, [pc, #72]	@ (801a018 <tanf+0x50>)
 8019fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019fd4:	4293      	cmp	r3, r2
 8019fd6:	d807      	bhi.n	8019fe8 <tanf+0x20>
 8019fd8:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801a01c <tanf+0x54>
 8019fdc:	2001      	movs	r0, #1
 8019fde:	b003      	add	sp, #12
 8019fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019fe4:	f000 b8c0 	b.w	801a168 <__kernel_tanf>
 8019fe8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019fec:	d304      	bcc.n	8019ff8 <tanf+0x30>
 8019fee:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019ff2:	b003      	add	sp, #12
 8019ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ff8:	4668      	mov	r0, sp
 8019ffa:	f000 fa35 	bl	801a468 <__ieee754_rem_pio2f>
 8019ffe:	0040      	lsls	r0, r0, #1
 801a000:	f000 0002 	and.w	r0, r0, #2
 801a004:	eddd 0a01 	vldr	s1, [sp, #4]
 801a008:	ed9d 0a00 	vldr	s0, [sp]
 801a00c:	f1c0 0001 	rsb	r0, r0, #1
 801a010:	f000 f8aa 	bl	801a168 <__kernel_tanf>
 801a014:	e7ed      	b.n	8019ff2 <tanf+0x2a>
 801a016:	bf00      	nop
 801a018:	3f490fda 	.word	0x3f490fda
 801a01c:	00000000 	.word	0x00000000

0801a020 <__ieee754_sqrtf>:
 801a020:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a024:	4770      	bx	lr
	...

0801a028 <__kernel_cosf>:
 801a028:	ee10 3a10 	vmov	r3, s0
 801a02c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a030:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801a034:	eef0 6a40 	vmov.f32	s13, s0
 801a038:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a03c:	d204      	bcs.n	801a048 <__kernel_cosf+0x20>
 801a03e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801a042:	ee17 2a90 	vmov	r2, s15
 801a046:	b342      	cbz	r2, 801a09a <__kernel_cosf+0x72>
 801a048:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a04c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801a0b8 <__kernel_cosf+0x90>
 801a050:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801a0bc <__kernel_cosf+0x94>
 801a054:	4a1a      	ldr	r2, [pc, #104]	@ (801a0c0 <__kernel_cosf+0x98>)
 801a056:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a05a:	4293      	cmp	r3, r2
 801a05c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a0c4 <__kernel_cosf+0x9c>
 801a060:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a064:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801a0c8 <__kernel_cosf+0xa0>
 801a068:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a06c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801a0cc <__kernel_cosf+0xa4>
 801a070:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a074:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801a0d0 <__kernel_cosf+0xa8>
 801a078:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a07c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801a080:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a084:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a088:	eee7 0a06 	vfma.f32	s1, s14, s12
 801a08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a090:	d804      	bhi.n	801a09c <__kernel_cosf+0x74>
 801a092:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a096:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a09a:	4770      	bx	lr
 801a09c:	4a0d      	ldr	r2, [pc, #52]	@ (801a0d4 <__kernel_cosf+0xac>)
 801a09e:	4293      	cmp	r3, r2
 801a0a0:	bf9a      	itte	ls
 801a0a2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801a0a6:	ee07 3a10 	vmovls	s14, r3
 801a0aa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801a0ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a0b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0b6:	e7ec      	b.n	801a092 <__kernel_cosf+0x6a>
 801a0b8:	ad47d74e 	.word	0xad47d74e
 801a0bc:	310f74f6 	.word	0x310f74f6
 801a0c0:	3e999999 	.word	0x3e999999
 801a0c4:	b493f27c 	.word	0xb493f27c
 801a0c8:	37d00d01 	.word	0x37d00d01
 801a0cc:	bab60b61 	.word	0xbab60b61
 801a0d0:	3d2aaaab 	.word	0x3d2aaaab
 801a0d4:	3f480000 	.word	0x3f480000

0801a0d8 <__kernel_sinf>:
 801a0d8:	ee10 3a10 	vmov	r3, s0
 801a0dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a0e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801a0e4:	d204      	bcs.n	801a0f0 <__kernel_sinf+0x18>
 801a0e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a0ea:	ee17 3a90 	vmov	r3, s15
 801a0ee:	b35b      	cbz	r3, 801a148 <__kernel_sinf+0x70>
 801a0f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a0f4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801a14c <__kernel_sinf+0x74>
 801a0f8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801a150 <__kernel_sinf+0x78>
 801a0fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a100:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801a154 <__kernel_sinf+0x7c>
 801a104:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a108:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801a158 <__kernel_sinf+0x80>
 801a10c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a110:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801a15c <__kernel_sinf+0x84>
 801a114:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a118:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a11c:	b930      	cbnz	r0, 801a12c <__kernel_sinf+0x54>
 801a11e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801a160 <__kernel_sinf+0x88>
 801a122:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a126:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a12a:	4770      	bx	lr
 801a12c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a130:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801a134:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a138:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a13c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801a164 <__kernel_sinf+0x8c>
 801a140:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a144:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a148:	4770      	bx	lr
 801a14a:	bf00      	nop
 801a14c:	2f2ec9d3 	.word	0x2f2ec9d3
 801a150:	b2d72f34 	.word	0xb2d72f34
 801a154:	3638ef1b 	.word	0x3638ef1b
 801a158:	b9500d01 	.word	0xb9500d01
 801a15c:	3c088889 	.word	0x3c088889
 801a160:	be2aaaab 	.word	0xbe2aaaab
 801a164:	3e2aaaab 	.word	0x3e2aaaab

0801a168 <__kernel_tanf>:
 801a168:	b508      	push	{r3, lr}
 801a16a:	ee10 3a10 	vmov	r3, s0
 801a16e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a172:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801a176:	eef0 7a40 	vmov.f32	s15, s0
 801a17a:	d217      	bcs.n	801a1ac <__kernel_tanf+0x44>
 801a17c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801a180:	ee17 1a10 	vmov	r1, s14
 801a184:	bb41      	cbnz	r1, 801a1d8 <__kernel_tanf+0x70>
 801a186:	1c43      	adds	r3, r0, #1
 801a188:	4313      	orrs	r3, r2
 801a18a:	d108      	bne.n	801a19e <__kernel_tanf+0x36>
 801a18c:	f000 fb70 	bl	801a870 <fabsf>
 801a190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a194:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a198:	eeb0 0a67 	vmov.f32	s0, s15
 801a19c:	bd08      	pop	{r3, pc}
 801a19e:	2801      	cmp	r0, #1
 801a1a0:	d0fa      	beq.n	801a198 <__kernel_tanf+0x30>
 801a1a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a1a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a1aa:	e7f5      	b.n	801a198 <__kernel_tanf+0x30>
 801a1ac:	494c      	ldr	r1, [pc, #304]	@ (801a2e0 <__kernel_tanf+0x178>)
 801a1ae:	428a      	cmp	r2, r1
 801a1b0:	d312      	bcc.n	801a1d8 <__kernel_tanf+0x70>
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801a2e4 <__kernel_tanf+0x17c>
 801a1b8:	bfb8      	it	lt
 801a1ba:	eef1 7a40 	vneglt.f32	s15, s0
 801a1be:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a1c2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801a2e8 <__kernel_tanf+0x180>
 801a1c6:	bfb8      	it	lt
 801a1c8:	eef1 0a60 	vneglt.f32	s1, s1
 801a1cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a1d0:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801a2ec <__kernel_tanf+0x184>
 801a1d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1d8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a1dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801a2f0 <__kernel_tanf+0x188>
 801a1e0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801a2f4 <__kernel_tanf+0x18c>
 801a1e4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801a2f8 <__kernel_tanf+0x190>
 801a1e8:	493d      	ldr	r1, [pc, #244]	@ (801a2e0 <__kernel_tanf+0x178>)
 801a1ea:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a1ee:	428a      	cmp	r2, r1
 801a1f0:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a1f4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801a2fc <__kernel_tanf+0x194>
 801a1f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a1fc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 801a300 <__kernel_tanf+0x198>
 801a200:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a204:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801a304 <__kernel_tanf+0x19c>
 801a208:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a20c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801a308 <__kernel_tanf+0x1a0>
 801a210:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a214:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801a30c <__kernel_tanf+0x1a4>
 801a218:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a21c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801a310 <__kernel_tanf+0x1a8>
 801a220:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a224:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801a314 <__kernel_tanf+0x1ac>
 801a228:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a22c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801a318 <__kernel_tanf+0x1b0>
 801a230:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a234:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801a31c <__kernel_tanf+0x1b4>
 801a238:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a23c:	eeb0 7a46 	vmov.f32	s14, s12
 801a240:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a244:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801a248:	eeb0 6a60 	vmov.f32	s12, s1
 801a24c:	eea7 6a05 	vfma.f32	s12, s14, s10
 801a250:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801a320 <__kernel_tanf+0x1b8>
 801a254:	eee6 0a26 	vfma.f32	s1, s12, s13
 801a258:	eee5 0a07 	vfma.f32	s1, s10, s14
 801a25c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 801a260:	d31d      	bcc.n	801a29e <__kernel_tanf+0x136>
 801a262:	ee07 0a10 	vmov	s14, r0
 801a266:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a26a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a26e:	ee36 6a07 	vadd.f32	s12, s12, s14
 801a272:	179b      	asrs	r3, r3, #30
 801a274:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801a278:	f003 0302 	and.w	r3, r3, #2
 801a27c:	f1c3 0301 	rsb	r3, r3, #1
 801a280:	ee06 3a90 	vmov	s13, r3
 801a284:	ee35 6ae0 	vsub.f32	s12, s11, s1
 801a288:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a28c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a290:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801a294:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801a298:	ee66 7a87 	vmul.f32	s15, s13, s14
 801a29c:	e77c      	b.n	801a198 <__kernel_tanf+0x30>
 801a29e:	2801      	cmp	r0, #1
 801a2a0:	d01b      	beq.n	801a2da <__kernel_tanf+0x172>
 801a2a2:	4b20      	ldr	r3, [pc, #128]	@ (801a324 <__kernel_tanf+0x1bc>)
 801a2a4:	ee16 2a10 	vmov	r2, s12
 801a2a8:	401a      	ands	r2, r3
 801a2aa:	ee05 2a90 	vmov	s11, r2
 801a2ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801a2b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a2b6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a2ba:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801a2be:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801a2c2:	ee16 2a90 	vmov	r2, s13
 801a2c6:	4013      	ands	r3, r2
 801a2c8:	ee07 3a90 	vmov	s15, r3
 801a2cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a2d0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801a2d4:	eee7 7a26 	vfma.f32	s15, s14, s13
 801a2d8:	e75e      	b.n	801a198 <__kernel_tanf+0x30>
 801a2da:	eef0 7a46 	vmov.f32	s15, s12
 801a2de:	e75b      	b.n	801a198 <__kernel_tanf+0x30>
 801a2e0:	3f2ca140 	.word	0x3f2ca140
 801a2e4:	3f490fda 	.word	0x3f490fda
 801a2e8:	33222168 	.word	0x33222168
 801a2ec:	00000000 	.word	0x00000000
 801a2f0:	b79bae5f 	.word	0xb79bae5f
 801a2f4:	38a3f445 	.word	0x38a3f445
 801a2f8:	37d95384 	.word	0x37d95384
 801a2fc:	3a1a26c8 	.word	0x3a1a26c8
 801a300:	3b6b6916 	.word	0x3b6b6916
 801a304:	3cb327a4 	.word	0x3cb327a4
 801a308:	3e088889 	.word	0x3e088889
 801a30c:	3895c07a 	.word	0x3895c07a
 801a310:	398137b9 	.word	0x398137b9
 801a314:	3abede48 	.word	0x3abede48
 801a318:	3c11371f 	.word	0x3c11371f
 801a31c:	3d5d0dd1 	.word	0x3d5d0dd1
 801a320:	3eaaaaab 	.word	0x3eaaaaab
 801a324:	fffff000 	.word	0xfffff000

0801a328 <__ieee754_atan2f>:
 801a328:	ee10 2a90 	vmov	r2, s1
 801a32c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801a330:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a334:	b510      	push	{r4, lr}
 801a336:	eef0 7a40 	vmov.f32	s15, s0
 801a33a:	d806      	bhi.n	801a34a <__ieee754_atan2f+0x22>
 801a33c:	ee10 0a10 	vmov	r0, s0
 801a340:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801a344:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a348:	d904      	bls.n	801a354 <__ieee754_atan2f+0x2c>
 801a34a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801a34e:	eeb0 0a67 	vmov.f32	s0, s15
 801a352:	bd10      	pop	{r4, pc}
 801a354:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801a358:	d103      	bne.n	801a362 <__ieee754_atan2f+0x3a>
 801a35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a35e:	f000 b9b3 	b.w	801a6c8 <atanf>
 801a362:	1794      	asrs	r4, r2, #30
 801a364:	f004 0402 	and.w	r4, r4, #2
 801a368:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801a36c:	b943      	cbnz	r3, 801a380 <__ieee754_atan2f+0x58>
 801a36e:	2c02      	cmp	r4, #2
 801a370:	d05e      	beq.n	801a430 <__ieee754_atan2f+0x108>
 801a372:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801a444 <__ieee754_atan2f+0x11c>
 801a376:	2c03      	cmp	r4, #3
 801a378:	bf08      	it	eq
 801a37a:	eef0 7a47 	vmoveq.f32	s15, s14
 801a37e:	e7e6      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a380:	b941      	cbnz	r1, 801a394 <__ieee754_atan2f+0x6c>
 801a382:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801a448 <__ieee754_atan2f+0x120>
 801a386:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801a44c <__ieee754_atan2f+0x124>
 801a38a:	2800      	cmp	r0, #0
 801a38c:	bfb8      	it	lt
 801a38e:	eef0 7a47 	vmovlt.f32	s15, s14
 801a392:	e7dc      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a394:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a398:	d110      	bne.n	801a3bc <__ieee754_atan2f+0x94>
 801a39a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a39e:	f104 34ff 	add.w	r4, r4, #4294967295
 801a3a2:	d107      	bne.n	801a3b4 <__ieee754_atan2f+0x8c>
 801a3a4:	2c02      	cmp	r4, #2
 801a3a6:	d846      	bhi.n	801a436 <__ieee754_atan2f+0x10e>
 801a3a8:	4b29      	ldr	r3, [pc, #164]	@ (801a450 <__ieee754_atan2f+0x128>)
 801a3aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a3ae:	edd3 7a00 	vldr	s15, [r3]
 801a3b2:	e7cc      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a3b4:	2c02      	cmp	r4, #2
 801a3b6:	d841      	bhi.n	801a43c <__ieee754_atan2f+0x114>
 801a3b8:	4b26      	ldr	r3, [pc, #152]	@ (801a454 <__ieee754_atan2f+0x12c>)
 801a3ba:	e7f6      	b.n	801a3aa <__ieee754_atan2f+0x82>
 801a3bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a3c0:	d0df      	beq.n	801a382 <__ieee754_atan2f+0x5a>
 801a3c2:	1a5b      	subs	r3, r3, r1
 801a3c4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801a3c8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801a3cc:	da1a      	bge.n	801a404 <__ieee754_atan2f+0xdc>
 801a3ce:	2a00      	cmp	r2, #0
 801a3d0:	da01      	bge.n	801a3d6 <__ieee754_atan2f+0xae>
 801a3d2:	313c      	adds	r1, #60	@ 0x3c
 801a3d4:	db19      	blt.n	801a40a <__ieee754_atan2f+0xe2>
 801a3d6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801a3da:	f000 fa49 	bl	801a870 <fabsf>
 801a3de:	f000 f973 	bl	801a6c8 <atanf>
 801a3e2:	eef0 7a40 	vmov.f32	s15, s0
 801a3e6:	2c01      	cmp	r4, #1
 801a3e8:	d012      	beq.n	801a410 <__ieee754_atan2f+0xe8>
 801a3ea:	2c02      	cmp	r4, #2
 801a3ec:	d017      	beq.n	801a41e <__ieee754_atan2f+0xf6>
 801a3ee:	2c00      	cmp	r4, #0
 801a3f0:	d0ad      	beq.n	801a34e <__ieee754_atan2f+0x26>
 801a3f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801a458 <__ieee754_atan2f+0x130>
 801a3f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3fa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801a45c <__ieee754_atan2f+0x134>
 801a3fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a402:	e7a4      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a404:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801a448 <__ieee754_atan2f+0x120>
 801a408:	e7ed      	b.n	801a3e6 <__ieee754_atan2f+0xbe>
 801a40a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801a460 <__ieee754_atan2f+0x138>
 801a40e:	e7ea      	b.n	801a3e6 <__ieee754_atan2f+0xbe>
 801a410:	ee17 3a90 	vmov	r3, s15
 801a414:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801a418:	ee07 3a90 	vmov	s15, r3
 801a41c:	e797      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a41e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801a458 <__ieee754_atan2f+0x130>
 801a422:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a426:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801a45c <__ieee754_atan2f+0x134>
 801a42a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a42e:	e78e      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a430:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801a45c <__ieee754_atan2f+0x134>
 801a434:	e78b      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a436:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801a464 <__ieee754_atan2f+0x13c>
 801a43a:	e788      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a43c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801a460 <__ieee754_atan2f+0x138>
 801a440:	e785      	b.n	801a34e <__ieee754_atan2f+0x26>
 801a442:	bf00      	nop
 801a444:	c0490fdb 	.word	0xc0490fdb
 801a448:	3fc90fdb 	.word	0x3fc90fdb
 801a44c:	bfc90fdb 	.word	0xbfc90fdb
 801a450:	0801dd34 	.word	0x0801dd34
 801a454:	0801dd28 	.word	0x0801dd28
 801a458:	33bbbd2e 	.word	0x33bbbd2e
 801a45c:	40490fdb 	.word	0x40490fdb
 801a460:	00000000 	.word	0x00000000
 801a464:	3f490fdb 	.word	0x3f490fdb

0801a468 <__ieee754_rem_pio2f>:
 801a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a46a:	ee10 6a10 	vmov	r6, s0
 801a46e:	4b88      	ldr	r3, [pc, #544]	@ (801a690 <__ieee754_rem_pio2f+0x228>)
 801a470:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801a474:	429d      	cmp	r5, r3
 801a476:	b087      	sub	sp, #28
 801a478:	4604      	mov	r4, r0
 801a47a:	d805      	bhi.n	801a488 <__ieee754_rem_pio2f+0x20>
 801a47c:	2300      	movs	r3, #0
 801a47e:	ed80 0a00 	vstr	s0, [r0]
 801a482:	6043      	str	r3, [r0, #4]
 801a484:	2000      	movs	r0, #0
 801a486:	e022      	b.n	801a4ce <__ieee754_rem_pio2f+0x66>
 801a488:	4b82      	ldr	r3, [pc, #520]	@ (801a694 <__ieee754_rem_pio2f+0x22c>)
 801a48a:	429d      	cmp	r5, r3
 801a48c:	d83a      	bhi.n	801a504 <__ieee754_rem_pio2f+0x9c>
 801a48e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a492:	2e00      	cmp	r6, #0
 801a494:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801a698 <__ieee754_rem_pio2f+0x230>
 801a498:	4a80      	ldr	r2, [pc, #512]	@ (801a69c <__ieee754_rem_pio2f+0x234>)
 801a49a:	f023 030f 	bic.w	r3, r3, #15
 801a49e:	dd18      	ble.n	801a4d2 <__ieee754_rem_pio2f+0x6a>
 801a4a0:	4293      	cmp	r3, r2
 801a4a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a4a6:	bf09      	itett	eq
 801a4a8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801a6a0 <__ieee754_rem_pio2f+0x238>
 801a4ac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801a6a4 <__ieee754_rem_pio2f+0x23c>
 801a4b0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801a6a8 <__ieee754_rem_pio2f+0x240>
 801a4b4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a4b8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801a4bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4c0:	ed80 7a00 	vstr	s14, [r0]
 801a4c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a4c8:	edc0 7a01 	vstr	s15, [r0, #4]
 801a4cc:	2001      	movs	r0, #1
 801a4ce:	b007      	add	sp, #28
 801a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4d2:	4293      	cmp	r3, r2
 801a4d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a4d8:	bf09      	itett	eq
 801a4da:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801a6a0 <__ieee754_rem_pio2f+0x238>
 801a4de:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801a6a4 <__ieee754_rem_pio2f+0x23c>
 801a4e2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801a6a8 <__ieee754_rem_pio2f+0x240>
 801a4e6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a4ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a4ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4f2:	ed80 7a00 	vstr	s14, [r0]
 801a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4fa:	edc0 7a01 	vstr	s15, [r0, #4]
 801a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a502:	e7e4      	b.n	801a4ce <__ieee754_rem_pio2f+0x66>
 801a504:	4b69      	ldr	r3, [pc, #420]	@ (801a6ac <__ieee754_rem_pio2f+0x244>)
 801a506:	429d      	cmp	r5, r3
 801a508:	d873      	bhi.n	801a5f2 <__ieee754_rem_pio2f+0x18a>
 801a50a:	f000 f9b1 	bl	801a870 <fabsf>
 801a50e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801a6b0 <__ieee754_rem_pio2f+0x248>
 801a512:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a516:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a51a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a51e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a522:	ee17 0a90 	vmov	r0, s15
 801a526:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a698 <__ieee754_rem_pio2f+0x230>
 801a52a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a52e:	281f      	cmp	r0, #31
 801a530:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a6a4 <__ieee754_rem_pio2f+0x23c>
 801a534:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a538:	eeb1 6a47 	vneg.f32	s12, s14
 801a53c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a540:	ee16 1a90 	vmov	r1, s13
 801a544:	dc09      	bgt.n	801a55a <__ieee754_rem_pio2f+0xf2>
 801a546:	4a5b      	ldr	r2, [pc, #364]	@ (801a6b4 <__ieee754_rem_pio2f+0x24c>)
 801a548:	1e47      	subs	r7, r0, #1
 801a54a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a54e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801a552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801a556:	4293      	cmp	r3, r2
 801a558:	d107      	bne.n	801a56a <__ieee754_rem_pio2f+0x102>
 801a55a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801a55e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801a562:	2a08      	cmp	r2, #8
 801a564:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a568:	dc14      	bgt.n	801a594 <__ieee754_rem_pio2f+0x12c>
 801a56a:	6021      	str	r1, [r4, #0]
 801a56c:	ed94 7a00 	vldr	s14, [r4]
 801a570:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a574:	2e00      	cmp	r6, #0
 801a576:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a57a:	ed84 0a01 	vstr	s0, [r4, #4]
 801a57e:	daa6      	bge.n	801a4ce <__ieee754_rem_pio2f+0x66>
 801a580:	eeb1 7a47 	vneg.f32	s14, s14
 801a584:	eeb1 0a40 	vneg.f32	s0, s0
 801a588:	ed84 7a00 	vstr	s14, [r4]
 801a58c:	ed84 0a01 	vstr	s0, [r4, #4]
 801a590:	4240      	negs	r0, r0
 801a592:	e79c      	b.n	801a4ce <__ieee754_rem_pio2f+0x66>
 801a594:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801a6a0 <__ieee754_rem_pio2f+0x238>
 801a598:	eef0 6a40 	vmov.f32	s13, s0
 801a59c:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a5a0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a5a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a5a8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801a6a8 <__ieee754_rem_pio2f+0x240>
 801a5ac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a5b0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a5b4:	ee15 2a90 	vmov	r2, s11
 801a5b8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a5bc:	1a5b      	subs	r3, r3, r1
 801a5be:	2b19      	cmp	r3, #25
 801a5c0:	dc04      	bgt.n	801a5cc <__ieee754_rem_pio2f+0x164>
 801a5c2:	edc4 5a00 	vstr	s11, [r4]
 801a5c6:	eeb0 0a66 	vmov.f32	s0, s13
 801a5ca:	e7cf      	b.n	801a56c <__ieee754_rem_pio2f+0x104>
 801a5cc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801a6b8 <__ieee754_rem_pio2f+0x250>
 801a5d0:	eeb0 0a66 	vmov.f32	s0, s13
 801a5d4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a5d8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a5dc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801a6bc <__ieee754_rem_pio2f+0x254>
 801a5e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a5e4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a5e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a5ec:	ed84 7a00 	vstr	s14, [r4]
 801a5f0:	e7bc      	b.n	801a56c <__ieee754_rem_pio2f+0x104>
 801a5f2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801a5f6:	d306      	bcc.n	801a606 <__ieee754_rem_pio2f+0x19e>
 801a5f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a5fc:	edc0 7a01 	vstr	s15, [r0, #4]
 801a600:	edc0 7a00 	vstr	s15, [r0]
 801a604:	e73e      	b.n	801a484 <__ieee754_rem_pio2f+0x1c>
 801a606:	15ea      	asrs	r2, r5, #23
 801a608:	3a86      	subs	r2, #134	@ 0x86
 801a60a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a60e:	ee07 3a90 	vmov	s15, r3
 801a612:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a616:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801a6c0 <__ieee754_rem_pio2f+0x258>
 801a61a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a61e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a622:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a626:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a62a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a62e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a632:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a636:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a63a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a63e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a646:	edcd 7a05 	vstr	s15, [sp, #20]
 801a64a:	d11e      	bne.n	801a68a <__ieee754_rem_pio2f+0x222>
 801a64c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a654:	bf0c      	ite	eq
 801a656:	2301      	moveq	r3, #1
 801a658:	2302      	movne	r3, #2
 801a65a:	491a      	ldr	r1, [pc, #104]	@ (801a6c4 <__ieee754_rem_pio2f+0x25c>)
 801a65c:	9101      	str	r1, [sp, #4]
 801a65e:	2102      	movs	r1, #2
 801a660:	9100      	str	r1, [sp, #0]
 801a662:	a803      	add	r0, sp, #12
 801a664:	4621      	mov	r1, r4
 801a666:	f000 f90b 	bl	801a880 <__kernel_rem_pio2f>
 801a66a:	2e00      	cmp	r6, #0
 801a66c:	f6bf af2f 	bge.w	801a4ce <__ieee754_rem_pio2f+0x66>
 801a670:	edd4 7a00 	vldr	s15, [r4]
 801a674:	eef1 7a67 	vneg.f32	s15, s15
 801a678:	edc4 7a00 	vstr	s15, [r4]
 801a67c:	edd4 7a01 	vldr	s15, [r4, #4]
 801a680:	eef1 7a67 	vneg.f32	s15, s15
 801a684:	edc4 7a01 	vstr	s15, [r4, #4]
 801a688:	e782      	b.n	801a590 <__ieee754_rem_pio2f+0x128>
 801a68a:	2303      	movs	r3, #3
 801a68c:	e7e5      	b.n	801a65a <__ieee754_rem_pio2f+0x1f2>
 801a68e:	bf00      	nop
 801a690:	3f490fd8 	.word	0x3f490fd8
 801a694:	4016cbe3 	.word	0x4016cbe3
 801a698:	3fc90f80 	.word	0x3fc90f80
 801a69c:	3fc90fd0 	.word	0x3fc90fd0
 801a6a0:	37354400 	.word	0x37354400
 801a6a4:	37354443 	.word	0x37354443
 801a6a8:	2e85a308 	.word	0x2e85a308
 801a6ac:	43490f80 	.word	0x43490f80
 801a6b0:	3f22f984 	.word	0x3f22f984
 801a6b4:	0801dd40 	.word	0x0801dd40
 801a6b8:	2e85a300 	.word	0x2e85a300
 801a6bc:	248d3132 	.word	0x248d3132
 801a6c0:	43800000 	.word	0x43800000
 801a6c4:	0801ddc0 	.word	0x0801ddc0

0801a6c8 <atanf>:
 801a6c8:	b538      	push	{r3, r4, r5, lr}
 801a6ca:	ee10 5a10 	vmov	r5, s0
 801a6ce:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801a6d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801a6d6:	eef0 7a40 	vmov.f32	s15, s0
 801a6da:	d310      	bcc.n	801a6fe <atanf+0x36>
 801a6dc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801a6e0:	d904      	bls.n	801a6ec <atanf+0x24>
 801a6e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a6e6:	eeb0 0a67 	vmov.f32	s0, s15
 801a6ea:	bd38      	pop	{r3, r4, r5, pc}
 801a6ec:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801a824 <atanf+0x15c>
 801a6f0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801a828 <atanf+0x160>
 801a6f4:	2d00      	cmp	r5, #0
 801a6f6:	bfc8      	it	gt
 801a6f8:	eef0 7a47 	vmovgt.f32	s15, s14
 801a6fc:	e7f3      	b.n	801a6e6 <atanf+0x1e>
 801a6fe:	4b4b      	ldr	r3, [pc, #300]	@ (801a82c <atanf+0x164>)
 801a700:	429c      	cmp	r4, r3
 801a702:	d810      	bhi.n	801a726 <atanf+0x5e>
 801a704:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801a708:	d20a      	bcs.n	801a720 <atanf+0x58>
 801a70a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801a830 <atanf+0x168>
 801a70e:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a716:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71e:	dce2      	bgt.n	801a6e6 <atanf+0x1e>
 801a720:	f04f 33ff 	mov.w	r3, #4294967295
 801a724:	e013      	b.n	801a74e <atanf+0x86>
 801a726:	f000 f8a3 	bl	801a870 <fabsf>
 801a72a:	4b42      	ldr	r3, [pc, #264]	@ (801a834 <atanf+0x16c>)
 801a72c:	429c      	cmp	r4, r3
 801a72e:	d84f      	bhi.n	801a7d0 <atanf+0x108>
 801a730:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801a734:	429c      	cmp	r4, r3
 801a736:	d841      	bhi.n	801a7bc <atanf+0xf4>
 801a738:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801a73c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a740:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a744:	2300      	movs	r3, #0
 801a746:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a74a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a74e:	1c5a      	adds	r2, r3, #1
 801a750:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a754:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801a838 <atanf+0x170>
 801a758:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801a83c <atanf+0x174>
 801a75c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801a840 <atanf+0x178>
 801a760:	ee66 6a06 	vmul.f32	s13, s12, s12
 801a764:	eee6 5a87 	vfma.f32	s11, s13, s14
 801a768:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801a844 <atanf+0x17c>
 801a76c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a770:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801a848 <atanf+0x180>
 801a774:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a778:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801a84c <atanf+0x184>
 801a77c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a780:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801a850 <atanf+0x188>
 801a784:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a788:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801a854 <atanf+0x18c>
 801a78c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a790:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801a858 <atanf+0x190>
 801a794:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a798:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801a85c <atanf+0x194>
 801a79c:	eea7 5a26 	vfma.f32	s10, s14, s13
 801a7a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801a860 <atanf+0x198>
 801a7a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a7a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a7ac:	eea5 7a86 	vfma.f32	s14, s11, s12
 801a7b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a7b4:	d121      	bne.n	801a7fa <atanf+0x132>
 801a7b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a7ba:	e794      	b.n	801a6e6 <atanf+0x1e>
 801a7bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a7c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a7c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a7c8:	2301      	movs	r3, #1
 801a7ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a7ce:	e7be      	b.n	801a74e <atanf+0x86>
 801a7d0:	4b24      	ldr	r3, [pc, #144]	@ (801a864 <atanf+0x19c>)
 801a7d2:	429c      	cmp	r4, r3
 801a7d4:	d80b      	bhi.n	801a7ee <atanf+0x126>
 801a7d6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801a7da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a7de:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a7e2:	2302      	movs	r3, #2
 801a7e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a7e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a7ec:	e7af      	b.n	801a74e <atanf+0x86>
 801a7ee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a7f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a7f6:	2303      	movs	r3, #3
 801a7f8:	e7a9      	b.n	801a74e <atanf+0x86>
 801a7fa:	4a1b      	ldr	r2, [pc, #108]	@ (801a868 <atanf+0x1a0>)
 801a7fc:	491b      	ldr	r1, [pc, #108]	@ (801a86c <atanf+0x1a4>)
 801a7fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a802:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a806:	edd3 6a00 	vldr	s13, [r3]
 801a80a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a80e:	2d00      	cmp	r5, #0
 801a810:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a814:	edd2 7a00 	vldr	s15, [r2]
 801a818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a81c:	bfb8      	it	lt
 801a81e:	eef1 7a67 	vneglt.f32	s15, s15
 801a822:	e760      	b.n	801a6e6 <atanf+0x1e>
 801a824:	bfc90fdb 	.word	0xbfc90fdb
 801a828:	3fc90fdb 	.word	0x3fc90fdb
 801a82c:	3edfffff 	.word	0x3edfffff
 801a830:	7149f2ca 	.word	0x7149f2ca
 801a834:	3f97ffff 	.word	0x3f97ffff
 801a838:	3c8569d7 	.word	0x3c8569d7
 801a83c:	3d4bda59 	.word	0x3d4bda59
 801a840:	bd6ef16b 	.word	0xbd6ef16b
 801a844:	3d886b35 	.word	0x3d886b35
 801a848:	3dba2e6e 	.word	0x3dba2e6e
 801a84c:	3e124925 	.word	0x3e124925
 801a850:	3eaaaaab 	.word	0x3eaaaaab
 801a854:	bd15a221 	.word	0xbd15a221
 801a858:	bd9d8795 	.word	0xbd9d8795
 801a85c:	bde38e38 	.word	0xbde38e38
 801a860:	be4ccccd 	.word	0xbe4ccccd
 801a864:	401bffff 	.word	0x401bffff
 801a868:	0801e0e8 	.word	0x0801e0e8
 801a86c:	0801e0d8 	.word	0x0801e0d8

0801a870 <fabsf>:
 801a870:	ee10 3a10 	vmov	r3, s0
 801a874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a878:	ee00 3a10 	vmov	s0, r3
 801a87c:	4770      	bx	lr
	...

0801a880 <__kernel_rem_pio2f>:
 801a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a884:	ed2d 8b04 	vpush	{d8-d9}
 801a888:	b0d9      	sub	sp, #356	@ 0x164
 801a88a:	4690      	mov	r8, r2
 801a88c:	9001      	str	r0, [sp, #4]
 801a88e:	4ab9      	ldr	r2, [pc, #740]	@ (801ab74 <__kernel_rem_pio2f+0x2f4>)
 801a890:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801a892:	f118 0f04 	cmn.w	r8, #4
 801a896:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801a89a:	460f      	mov	r7, r1
 801a89c:	f103 3bff 	add.w	fp, r3, #4294967295
 801a8a0:	db27      	blt.n	801a8f2 <__kernel_rem_pio2f+0x72>
 801a8a2:	f1b8 0203 	subs.w	r2, r8, #3
 801a8a6:	bf48      	it	mi
 801a8a8:	f108 0204 	addmi.w	r2, r8, #4
 801a8ac:	10d2      	asrs	r2, r2, #3
 801a8ae:	1c55      	adds	r5, r2, #1
 801a8b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a8b2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801a8b6:	00e8      	lsls	r0, r5, #3
 801a8b8:	eba2 060b 	sub.w	r6, r2, fp
 801a8bc:	9002      	str	r0, [sp, #8]
 801a8be:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801a8c2:	eb0a 0c0b 	add.w	ip, sl, fp
 801a8c6:	ac1c      	add	r4, sp, #112	@ 0x70
 801a8c8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801a8cc:	2000      	movs	r0, #0
 801a8ce:	4560      	cmp	r0, ip
 801a8d0:	dd11      	ble.n	801a8f6 <__kernel_rem_pio2f+0x76>
 801a8d2:	a91c      	add	r1, sp, #112	@ 0x70
 801a8d4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801a8d8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801a8dc:	f04f 0c00 	mov.w	ip, #0
 801a8e0:	45d4      	cmp	ip, sl
 801a8e2:	dc27      	bgt.n	801a934 <__kernel_rem_pio2f+0xb4>
 801a8e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a8e8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	2400      	movs	r4, #0
 801a8f0:	e016      	b.n	801a920 <__kernel_rem_pio2f+0xa0>
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	e7db      	b.n	801a8ae <__kernel_rem_pio2f+0x2e>
 801a8f6:	42c6      	cmn	r6, r0
 801a8f8:	bf5d      	ittte	pl
 801a8fa:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801a8fe:	ee07 1a90 	vmovpl	s15, r1
 801a902:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a906:	eef0 7a47 	vmovmi.f32	s15, s14
 801a90a:	ece4 7a01 	vstmia	r4!, {s15}
 801a90e:	3001      	adds	r0, #1
 801a910:	e7dd      	b.n	801a8ce <__kernel_rem_pio2f+0x4e>
 801a912:	ecfe 6a01 	vldmia	lr!, {s13}
 801a916:	ed96 7a00 	vldr	s14, [r6]
 801a91a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a91e:	3401      	adds	r4, #1
 801a920:	455c      	cmp	r4, fp
 801a922:	f1a6 0604 	sub.w	r6, r6, #4
 801a926:	ddf4      	ble.n	801a912 <__kernel_rem_pio2f+0x92>
 801a928:	ece9 7a01 	vstmia	r9!, {s15}
 801a92c:	f10c 0c01 	add.w	ip, ip, #1
 801a930:	3004      	adds	r0, #4
 801a932:	e7d5      	b.n	801a8e0 <__kernel_rem_pio2f+0x60>
 801a934:	a908      	add	r1, sp, #32
 801a936:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a93a:	9104      	str	r1, [sp, #16]
 801a93c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a93e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801ab80 <__kernel_rem_pio2f+0x300>
 801a942:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801ab7c <__kernel_rem_pio2f+0x2fc>
 801a946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a94a:	9203      	str	r2, [sp, #12]
 801a94c:	4654      	mov	r4, sl
 801a94e:	00a2      	lsls	r2, r4, #2
 801a950:	9205      	str	r2, [sp, #20]
 801a952:	aa58      	add	r2, sp, #352	@ 0x160
 801a954:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a958:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a95c:	a944      	add	r1, sp, #272	@ 0x110
 801a95e:	aa08      	add	r2, sp, #32
 801a960:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a964:	4694      	mov	ip, r2
 801a966:	4626      	mov	r6, r4
 801a968:	2e00      	cmp	r6, #0
 801a96a:	f1a0 0004 	sub.w	r0, r0, #4
 801a96e:	dc4c      	bgt.n	801aa0a <__kernel_rem_pio2f+0x18a>
 801a970:	4628      	mov	r0, r5
 801a972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a976:	f000 f9f5 	bl	801ad64 <scalbnf>
 801a97a:	eeb0 8a40 	vmov.f32	s16, s0
 801a97e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a982:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a986:	f000 fa53 	bl	801ae30 <floorf>
 801a98a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a98e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a992:	2d00      	cmp	r5, #0
 801a994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a998:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a99c:	ee17 9a90 	vmov	r9, s15
 801a9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a9a8:	dd41      	ble.n	801aa2e <__kernel_rem_pio2f+0x1ae>
 801a9aa:	f104 3cff 	add.w	ip, r4, #4294967295
 801a9ae:	a908      	add	r1, sp, #32
 801a9b0:	f1c5 0e08 	rsb	lr, r5, #8
 801a9b4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a9b8:	fa46 f00e 	asr.w	r0, r6, lr
 801a9bc:	4481      	add	r9, r0
 801a9be:	fa00 f00e 	lsl.w	r0, r0, lr
 801a9c2:	1a36      	subs	r6, r6, r0
 801a9c4:	f1c5 0007 	rsb	r0, r5, #7
 801a9c8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a9cc:	4106      	asrs	r6, r0
 801a9ce:	2e00      	cmp	r6, #0
 801a9d0:	dd3c      	ble.n	801aa4c <__kernel_rem_pio2f+0x1cc>
 801a9d2:	f04f 0e00 	mov.w	lr, #0
 801a9d6:	f109 0901 	add.w	r9, r9, #1
 801a9da:	4670      	mov	r0, lr
 801a9dc:	4574      	cmp	r4, lr
 801a9de:	dc68      	bgt.n	801aab2 <__kernel_rem_pio2f+0x232>
 801a9e0:	2d00      	cmp	r5, #0
 801a9e2:	dd03      	ble.n	801a9ec <__kernel_rem_pio2f+0x16c>
 801a9e4:	2d01      	cmp	r5, #1
 801a9e6:	d074      	beq.n	801aad2 <__kernel_rem_pio2f+0x252>
 801a9e8:	2d02      	cmp	r5, #2
 801a9ea:	d07d      	beq.n	801aae8 <__kernel_rem_pio2f+0x268>
 801a9ec:	2e02      	cmp	r6, #2
 801a9ee:	d12d      	bne.n	801aa4c <__kernel_rem_pio2f+0x1cc>
 801a9f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a9f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a9f8:	b340      	cbz	r0, 801aa4c <__kernel_rem_pio2f+0x1cc>
 801a9fa:	4628      	mov	r0, r5
 801a9fc:	9306      	str	r3, [sp, #24]
 801a9fe:	f000 f9b1 	bl	801ad64 <scalbnf>
 801aa02:	9b06      	ldr	r3, [sp, #24]
 801aa04:	ee38 8a40 	vsub.f32	s16, s16, s0
 801aa08:	e020      	b.n	801aa4c <__kernel_rem_pio2f+0x1cc>
 801aa0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801aa0e:	3e01      	subs	r6, #1
 801aa10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa18:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801aa1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa20:	ecac 0a01 	vstmia	ip!, {s0}
 801aa24:	ed90 0a00 	vldr	s0, [r0]
 801aa28:	ee37 0a80 	vadd.f32	s0, s15, s0
 801aa2c:	e79c      	b.n	801a968 <__kernel_rem_pio2f+0xe8>
 801aa2e:	d105      	bne.n	801aa3c <__kernel_rem_pio2f+0x1bc>
 801aa30:	1e60      	subs	r0, r4, #1
 801aa32:	a908      	add	r1, sp, #32
 801aa34:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801aa38:	11f6      	asrs	r6, r6, #7
 801aa3a:	e7c8      	b.n	801a9ce <__kernel_rem_pio2f+0x14e>
 801aa3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801aa40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801aa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa48:	da31      	bge.n	801aaae <__kernel_rem_pio2f+0x22e>
 801aa4a:	2600      	movs	r6, #0
 801aa4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801aa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa54:	f040 8098 	bne.w	801ab88 <__kernel_rem_pio2f+0x308>
 801aa58:	1e60      	subs	r0, r4, #1
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	4550      	cmp	r0, sl
 801aa5e:	da4b      	bge.n	801aaf8 <__kernel_rem_pio2f+0x278>
 801aa60:	2a00      	cmp	r2, #0
 801aa62:	d065      	beq.n	801ab30 <__kernel_rem_pio2f+0x2b0>
 801aa64:	3c01      	subs	r4, #1
 801aa66:	ab08      	add	r3, sp, #32
 801aa68:	3d08      	subs	r5, #8
 801aa6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d0f8      	beq.n	801aa64 <__kernel_rem_pio2f+0x1e4>
 801aa72:	4628      	mov	r0, r5
 801aa74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801aa78:	f000 f974 	bl	801ad64 <scalbnf>
 801aa7c:	1c63      	adds	r3, r4, #1
 801aa7e:	aa44      	add	r2, sp, #272	@ 0x110
 801aa80:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801ab80 <__kernel_rem_pio2f+0x300>
 801aa84:	0099      	lsls	r1, r3, #2
 801aa86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801aa8a:	4623      	mov	r3, r4
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f280 80a9 	bge.w	801abe4 <__kernel_rem_pio2f+0x364>
 801aa92:	4623      	mov	r3, r4
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	f2c0 80c7 	blt.w	801ac28 <__kernel_rem_pio2f+0x3a8>
 801aa9a:	aa44      	add	r2, sp, #272	@ 0x110
 801aa9c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801aaa0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801ab78 <__kernel_rem_pio2f+0x2f8>
 801aaa4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801aaa8:	2000      	movs	r0, #0
 801aaaa:	1ae2      	subs	r2, r4, r3
 801aaac:	e0b1      	b.n	801ac12 <__kernel_rem_pio2f+0x392>
 801aaae:	2602      	movs	r6, #2
 801aab0:	e78f      	b.n	801a9d2 <__kernel_rem_pio2f+0x152>
 801aab2:	f852 1b04 	ldr.w	r1, [r2], #4
 801aab6:	b948      	cbnz	r0, 801aacc <__kernel_rem_pio2f+0x24c>
 801aab8:	b121      	cbz	r1, 801aac4 <__kernel_rem_pio2f+0x244>
 801aaba:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801aabe:	f842 1c04 	str.w	r1, [r2, #-4]
 801aac2:	2101      	movs	r1, #1
 801aac4:	f10e 0e01 	add.w	lr, lr, #1
 801aac8:	4608      	mov	r0, r1
 801aaca:	e787      	b.n	801a9dc <__kernel_rem_pio2f+0x15c>
 801aacc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801aad0:	e7f5      	b.n	801aabe <__kernel_rem_pio2f+0x23e>
 801aad2:	f104 3cff 	add.w	ip, r4, #4294967295
 801aad6:	aa08      	add	r2, sp, #32
 801aad8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801aadc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801aae0:	a908      	add	r1, sp, #32
 801aae2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801aae6:	e781      	b.n	801a9ec <__kernel_rem_pio2f+0x16c>
 801aae8:	f104 3cff 	add.w	ip, r4, #4294967295
 801aaec:	aa08      	add	r2, sp, #32
 801aaee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801aaf2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801aaf6:	e7f3      	b.n	801aae0 <__kernel_rem_pio2f+0x260>
 801aaf8:	a908      	add	r1, sp, #32
 801aafa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801aafe:	3801      	subs	r0, #1
 801ab00:	430a      	orrs	r2, r1
 801ab02:	e7ab      	b.n	801aa5c <__kernel_rem_pio2f+0x1dc>
 801ab04:	3201      	adds	r2, #1
 801ab06:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801ab0a:	2e00      	cmp	r6, #0
 801ab0c:	d0fa      	beq.n	801ab04 <__kernel_rem_pio2f+0x284>
 801ab0e:	9905      	ldr	r1, [sp, #20]
 801ab10:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801ab14:	eb0d 0001 	add.w	r0, sp, r1
 801ab18:	18e6      	adds	r6, r4, r3
 801ab1a:	a91c      	add	r1, sp, #112	@ 0x70
 801ab1c:	f104 0c01 	add.w	ip, r4, #1
 801ab20:	384c      	subs	r0, #76	@ 0x4c
 801ab22:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801ab26:	4422      	add	r2, r4
 801ab28:	4562      	cmp	r2, ip
 801ab2a:	da04      	bge.n	801ab36 <__kernel_rem_pio2f+0x2b6>
 801ab2c:	4614      	mov	r4, r2
 801ab2e:	e70e      	b.n	801a94e <__kernel_rem_pio2f+0xce>
 801ab30:	9804      	ldr	r0, [sp, #16]
 801ab32:	2201      	movs	r2, #1
 801ab34:	e7e7      	b.n	801ab06 <__kernel_rem_pio2f+0x286>
 801ab36:	9903      	ldr	r1, [sp, #12]
 801ab38:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ab3c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801ab40:	9105      	str	r1, [sp, #20]
 801ab42:	ee07 1a90 	vmov	s15, r1
 801ab46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab4a:	2400      	movs	r4, #0
 801ab4c:	ece6 7a01 	vstmia	r6!, {s15}
 801ab50:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801ab54:	46b1      	mov	r9, r6
 801ab56:	455c      	cmp	r4, fp
 801ab58:	dd04      	ble.n	801ab64 <__kernel_rem_pio2f+0x2e4>
 801ab5a:	ece0 7a01 	vstmia	r0!, {s15}
 801ab5e:	f10c 0c01 	add.w	ip, ip, #1
 801ab62:	e7e1      	b.n	801ab28 <__kernel_rem_pio2f+0x2a8>
 801ab64:	ecfe 6a01 	vldmia	lr!, {s13}
 801ab68:	ed39 7a01 	vldmdb	r9!, {s14}
 801ab6c:	3401      	adds	r4, #1
 801ab6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ab72:	e7f0      	b.n	801ab56 <__kernel_rem_pio2f+0x2d6>
 801ab74:	0801e124 	.word	0x0801e124
 801ab78:	0801e0f8 	.word	0x0801e0f8
 801ab7c:	43800000 	.word	0x43800000
 801ab80:	3b800000 	.word	0x3b800000
 801ab84:	00000000 	.word	0x00000000
 801ab88:	9b02      	ldr	r3, [sp, #8]
 801ab8a:	eeb0 0a48 	vmov.f32	s0, s16
 801ab8e:	eba3 0008 	sub.w	r0, r3, r8
 801ab92:	f000 f8e7 	bl	801ad64 <scalbnf>
 801ab96:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801ab7c <__kernel_rem_pio2f+0x2fc>
 801ab9a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba2:	db19      	blt.n	801abd8 <__kernel_rem_pio2f+0x358>
 801aba4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801ab80 <__kernel_rem_pio2f+0x300>
 801aba8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801abac:	aa08      	add	r2, sp, #32
 801abae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abb2:	3508      	adds	r5, #8
 801abb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abb8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801abbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801abc4:	ee10 3a10 	vmov	r3, s0
 801abc8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801abcc:	ee17 3a90 	vmov	r3, s15
 801abd0:	3401      	adds	r4, #1
 801abd2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801abd6:	e74c      	b.n	801aa72 <__kernel_rem_pio2f+0x1f2>
 801abd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801abdc:	aa08      	add	r2, sp, #32
 801abde:	ee10 3a10 	vmov	r3, s0
 801abe2:	e7f6      	b.n	801abd2 <__kernel_rem_pio2f+0x352>
 801abe4:	a808      	add	r0, sp, #32
 801abe6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801abea:	9001      	str	r0, [sp, #4]
 801abec:	ee07 0a90 	vmov	s15, r0
 801abf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abf4:	3b01      	subs	r3, #1
 801abf6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801abfa:	ee20 0a07 	vmul.f32	s0, s0, s14
 801abfe:	ed62 7a01 	vstmdb	r2!, {s15}
 801ac02:	e743      	b.n	801aa8c <__kernel_rem_pio2f+0x20c>
 801ac04:	ecfc 6a01 	vldmia	ip!, {s13}
 801ac08:	ecb5 7a01 	vldmia	r5!, {s14}
 801ac0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac10:	3001      	adds	r0, #1
 801ac12:	4550      	cmp	r0, sl
 801ac14:	dc01      	bgt.n	801ac1a <__kernel_rem_pio2f+0x39a>
 801ac16:	4282      	cmp	r2, r0
 801ac18:	daf4      	bge.n	801ac04 <__kernel_rem_pio2f+0x384>
 801ac1a:	a858      	add	r0, sp, #352	@ 0x160
 801ac1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ac20:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801ac24:	3b01      	subs	r3, #1
 801ac26:	e735      	b.n	801aa94 <__kernel_rem_pio2f+0x214>
 801ac28:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ac2a:	2b02      	cmp	r3, #2
 801ac2c:	dc09      	bgt.n	801ac42 <__kernel_rem_pio2f+0x3c2>
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	dc2b      	bgt.n	801ac8a <__kernel_rem_pio2f+0x40a>
 801ac32:	d044      	beq.n	801acbe <__kernel_rem_pio2f+0x43e>
 801ac34:	f009 0007 	and.w	r0, r9, #7
 801ac38:	b059      	add	sp, #356	@ 0x164
 801ac3a:	ecbd 8b04 	vpop	{d8-d9}
 801ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac42:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801ac44:	2b03      	cmp	r3, #3
 801ac46:	d1f5      	bne.n	801ac34 <__kernel_rem_pio2f+0x3b4>
 801ac48:	aa30      	add	r2, sp, #192	@ 0xc0
 801ac4a:	1f0b      	subs	r3, r1, #4
 801ac4c:	4413      	add	r3, r2
 801ac4e:	461a      	mov	r2, r3
 801ac50:	4620      	mov	r0, r4
 801ac52:	2800      	cmp	r0, #0
 801ac54:	f1a2 0204 	sub.w	r2, r2, #4
 801ac58:	dc52      	bgt.n	801ad00 <__kernel_rem_pio2f+0x480>
 801ac5a:	4622      	mov	r2, r4
 801ac5c:	2a01      	cmp	r2, #1
 801ac5e:	f1a3 0304 	sub.w	r3, r3, #4
 801ac62:	dc5d      	bgt.n	801ad20 <__kernel_rem_pio2f+0x4a0>
 801ac64:	ab30      	add	r3, sp, #192	@ 0xc0
 801ac66:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801ac6a:	440b      	add	r3, r1
 801ac6c:	2c01      	cmp	r4, #1
 801ac6e:	dc67      	bgt.n	801ad40 <__kernel_rem_pio2f+0x4c0>
 801ac70:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801ac74:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801ac78:	2e00      	cmp	r6, #0
 801ac7a:	d167      	bne.n	801ad4c <__kernel_rem_pio2f+0x4cc>
 801ac7c:	edc7 6a00 	vstr	s13, [r7]
 801ac80:	ed87 7a01 	vstr	s14, [r7, #4]
 801ac84:	edc7 7a02 	vstr	s15, [r7, #8]
 801ac88:	e7d4      	b.n	801ac34 <__kernel_rem_pio2f+0x3b4>
 801ac8a:	ab30      	add	r3, sp, #192	@ 0xc0
 801ac8c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801ac90:	440b      	add	r3, r1
 801ac92:	4622      	mov	r2, r4
 801ac94:	2a00      	cmp	r2, #0
 801ac96:	da24      	bge.n	801ace2 <__kernel_rem_pio2f+0x462>
 801ac98:	b34e      	cbz	r6, 801acee <__kernel_rem_pio2f+0x46e>
 801ac9a:	eef1 7a47 	vneg.f32	s15, s14
 801ac9e:	edc7 7a00 	vstr	s15, [r7]
 801aca2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801aca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801acaa:	aa31      	add	r2, sp, #196	@ 0xc4
 801acac:	2301      	movs	r3, #1
 801acae:	429c      	cmp	r4, r3
 801acb0:	da20      	bge.n	801acf4 <__kernel_rem_pio2f+0x474>
 801acb2:	b10e      	cbz	r6, 801acb8 <__kernel_rem_pio2f+0x438>
 801acb4:	eef1 7a67 	vneg.f32	s15, s15
 801acb8:	edc7 7a01 	vstr	s15, [r7, #4]
 801acbc:	e7ba      	b.n	801ac34 <__kernel_rem_pio2f+0x3b4>
 801acbe:	ab30      	add	r3, sp, #192	@ 0xc0
 801acc0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801ab84 <__kernel_rem_pio2f+0x304>
 801acc4:	440b      	add	r3, r1
 801acc6:	2c00      	cmp	r4, #0
 801acc8:	da05      	bge.n	801acd6 <__kernel_rem_pio2f+0x456>
 801acca:	b10e      	cbz	r6, 801acd0 <__kernel_rem_pio2f+0x450>
 801accc:	eef1 7a67 	vneg.f32	s15, s15
 801acd0:	edc7 7a00 	vstr	s15, [r7]
 801acd4:	e7ae      	b.n	801ac34 <__kernel_rem_pio2f+0x3b4>
 801acd6:	ed33 7a01 	vldmdb	r3!, {s14}
 801acda:	3c01      	subs	r4, #1
 801acdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ace0:	e7f1      	b.n	801acc6 <__kernel_rem_pio2f+0x446>
 801ace2:	ed73 7a01 	vldmdb	r3!, {s15}
 801ace6:	3a01      	subs	r2, #1
 801ace8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801acec:	e7d2      	b.n	801ac94 <__kernel_rem_pio2f+0x414>
 801acee:	eef0 7a47 	vmov.f32	s15, s14
 801acf2:	e7d4      	b.n	801ac9e <__kernel_rem_pio2f+0x41e>
 801acf4:	ecb2 7a01 	vldmia	r2!, {s14}
 801acf8:	3301      	adds	r3, #1
 801acfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801acfe:	e7d6      	b.n	801acae <__kernel_rem_pio2f+0x42e>
 801ad00:	edd2 7a00 	vldr	s15, [r2]
 801ad04:	edd2 6a01 	vldr	s13, [r2, #4]
 801ad08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ad0c:	3801      	subs	r0, #1
 801ad0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad12:	ed82 7a00 	vstr	s14, [r2]
 801ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad1a:	edc2 7a01 	vstr	s15, [r2, #4]
 801ad1e:	e798      	b.n	801ac52 <__kernel_rem_pio2f+0x3d2>
 801ad20:	edd3 7a00 	vldr	s15, [r3]
 801ad24:	edd3 6a01 	vldr	s13, [r3, #4]
 801ad28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ad2c:	3a01      	subs	r2, #1
 801ad2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad32:	ed83 7a00 	vstr	s14, [r3]
 801ad36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad3a:	edc3 7a01 	vstr	s15, [r3, #4]
 801ad3e:	e78d      	b.n	801ac5c <__kernel_rem_pio2f+0x3dc>
 801ad40:	ed33 7a01 	vldmdb	r3!, {s14}
 801ad44:	3c01      	subs	r4, #1
 801ad46:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad4a:	e78f      	b.n	801ac6c <__kernel_rem_pio2f+0x3ec>
 801ad4c:	eef1 6a66 	vneg.f32	s13, s13
 801ad50:	eeb1 7a47 	vneg.f32	s14, s14
 801ad54:	edc7 6a00 	vstr	s13, [r7]
 801ad58:	ed87 7a01 	vstr	s14, [r7, #4]
 801ad5c:	eef1 7a67 	vneg.f32	s15, s15
 801ad60:	e790      	b.n	801ac84 <__kernel_rem_pio2f+0x404>
 801ad62:	bf00      	nop

0801ad64 <scalbnf>:
 801ad64:	ee10 3a10 	vmov	r3, s0
 801ad68:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ad6c:	d02b      	beq.n	801adc6 <scalbnf+0x62>
 801ad6e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801ad72:	d302      	bcc.n	801ad7a <scalbnf+0x16>
 801ad74:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ad78:	4770      	bx	lr
 801ad7a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801ad7e:	d123      	bne.n	801adc8 <scalbnf+0x64>
 801ad80:	4b24      	ldr	r3, [pc, #144]	@ (801ae14 <scalbnf+0xb0>)
 801ad82:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ae18 <scalbnf+0xb4>
 801ad86:	4298      	cmp	r0, r3
 801ad88:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ad8c:	db17      	blt.n	801adbe <scalbnf+0x5a>
 801ad8e:	ee10 3a10 	vmov	r3, s0
 801ad92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ad96:	3a19      	subs	r2, #25
 801ad98:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ad9c:	4288      	cmp	r0, r1
 801ad9e:	dd15      	ble.n	801adcc <scalbnf+0x68>
 801ada0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801ae1c <scalbnf+0xb8>
 801ada4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801ae20 <scalbnf+0xbc>
 801ada8:	ee10 3a10 	vmov	r3, s0
 801adac:	eeb0 7a67 	vmov.f32	s14, s15
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	bfb8      	it	lt
 801adb4:	eef0 7a66 	vmovlt.f32	s15, s13
 801adb8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801adbc:	4770      	bx	lr
 801adbe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ae24 <scalbnf+0xc0>
 801adc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801adc6:	4770      	bx	lr
 801adc8:	0dd2      	lsrs	r2, r2, #23
 801adca:	e7e5      	b.n	801ad98 <scalbnf+0x34>
 801adcc:	4410      	add	r0, r2
 801adce:	28fe      	cmp	r0, #254	@ 0xfe
 801add0:	dce6      	bgt.n	801ada0 <scalbnf+0x3c>
 801add2:	2800      	cmp	r0, #0
 801add4:	dd06      	ble.n	801ade4 <scalbnf+0x80>
 801add6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801adda:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801adde:	ee00 3a10 	vmov	s0, r3
 801ade2:	4770      	bx	lr
 801ade4:	f110 0f16 	cmn.w	r0, #22
 801ade8:	da09      	bge.n	801adfe <scalbnf+0x9a>
 801adea:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801ae24 <scalbnf+0xc0>
 801adee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ae28 <scalbnf+0xc4>
 801adf2:	ee10 3a10 	vmov	r3, s0
 801adf6:	eeb0 7a67 	vmov.f32	s14, s15
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	e7d9      	b.n	801adb2 <scalbnf+0x4e>
 801adfe:	3019      	adds	r0, #25
 801ae00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ae04:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ae08:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801ae2c <scalbnf+0xc8>
 801ae0c:	ee07 3a90 	vmov	s15, r3
 801ae10:	e7d7      	b.n	801adc2 <scalbnf+0x5e>
 801ae12:	bf00      	nop
 801ae14:	ffff3cb0 	.word	0xffff3cb0
 801ae18:	4c000000 	.word	0x4c000000
 801ae1c:	7149f2ca 	.word	0x7149f2ca
 801ae20:	f149f2ca 	.word	0xf149f2ca
 801ae24:	0da24260 	.word	0x0da24260
 801ae28:	8da24260 	.word	0x8da24260
 801ae2c:	33000000 	.word	0x33000000

0801ae30 <floorf>:
 801ae30:	ee10 3a10 	vmov	r3, s0
 801ae34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ae38:	3a7f      	subs	r2, #127	@ 0x7f
 801ae3a:	2a16      	cmp	r2, #22
 801ae3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ae40:	dc2b      	bgt.n	801ae9a <floorf+0x6a>
 801ae42:	2a00      	cmp	r2, #0
 801ae44:	da12      	bge.n	801ae6c <floorf+0x3c>
 801ae46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801aeac <floorf+0x7c>
 801ae4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ae4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae56:	dd06      	ble.n	801ae66 <floorf+0x36>
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	da24      	bge.n	801aea6 <floorf+0x76>
 801ae5c:	2900      	cmp	r1, #0
 801ae5e:	4b14      	ldr	r3, [pc, #80]	@ (801aeb0 <floorf+0x80>)
 801ae60:	bf08      	it	eq
 801ae62:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801ae66:	ee00 3a10 	vmov	s0, r3
 801ae6a:	4770      	bx	lr
 801ae6c:	4911      	ldr	r1, [pc, #68]	@ (801aeb4 <floorf+0x84>)
 801ae6e:	4111      	asrs	r1, r2
 801ae70:	420b      	tst	r3, r1
 801ae72:	d0fa      	beq.n	801ae6a <floorf+0x3a>
 801ae74:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801aeac <floorf+0x7c>
 801ae78:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ae7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ae80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae84:	ddef      	ble.n	801ae66 <floorf+0x36>
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	bfbe      	ittt	lt
 801ae8a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801ae8e:	fa40 f202 	asrlt.w	r2, r0, r2
 801ae92:	189b      	addlt	r3, r3, r2
 801ae94:	ea23 0301 	bic.w	r3, r3, r1
 801ae98:	e7e5      	b.n	801ae66 <floorf+0x36>
 801ae9a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ae9e:	d3e4      	bcc.n	801ae6a <floorf+0x3a>
 801aea0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aea4:	4770      	bx	lr
 801aea6:	2300      	movs	r3, #0
 801aea8:	e7dd      	b.n	801ae66 <floorf+0x36>
 801aeaa:	bf00      	nop
 801aeac:	7149f2ca 	.word	0x7149f2ca
 801aeb0:	bf800000 	.word	0xbf800000
 801aeb4:	007fffff 	.word	0x007fffff

0801aeb8 <_ZdlPvj>:
 801aeb8:	f000 b800 	b.w	801aebc <_ZdlPv>

0801aebc <_ZdlPv>:
 801aebc:	f000 b808 	b.w	801aed0 <free>

0801aec0 <malloc>:
 801aec0:	4b02      	ldr	r3, [pc, #8]	@ (801aecc <malloc+0xc>)
 801aec2:	4601      	mov	r1, r0
 801aec4:	6818      	ldr	r0, [r3, #0]
 801aec6:	f000 b82d 	b.w	801af24 <_malloc_r>
 801aeca:	bf00      	nop
 801aecc:	2000003c 	.word	0x2000003c

0801aed0 <free>:
 801aed0:	4b02      	ldr	r3, [pc, #8]	@ (801aedc <free+0xc>)
 801aed2:	4601      	mov	r1, r0
 801aed4:	6818      	ldr	r0, [r3, #0]
 801aed6:	f001 bd2f 	b.w	801c938 <_free_r>
 801aeda:	bf00      	nop
 801aedc:	2000003c 	.word	0x2000003c

0801aee0 <sbrk_aligned>:
 801aee0:	b570      	push	{r4, r5, r6, lr}
 801aee2:	4e0f      	ldr	r6, [pc, #60]	@ (801af20 <sbrk_aligned+0x40>)
 801aee4:	460c      	mov	r4, r1
 801aee6:	6831      	ldr	r1, [r6, #0]
 801aee8:	4605      	mov	r5, r0
 801aeea:	b911      	cbnz	r1, 801aef2 <sbrk_aligned+0x12>
 801aeec:	f000 fe78 	bl	801bbe0 <_sbrk_r>
 801aef0:	6030      	str	r0, [r6, #0]
 801aef2:	4621      	mov	r1, r4
 801aef4:	4628      	mov	r0, r5
 801aef6:	f000 fe73 	bl	801bbe0 <_sbrk_r>
 801aefa:	1c43      	adds	r3, r0, #1
 801aefc:	d103      	bne.n	801af06 <sbrk_aligned+0x26>
 801aefe:	f04f 34ff 	mov.w	r4, #4294967295
 801af02:	4620      	mov	r0, r4
 801af04:	bd70      	pop	{r4, r5, r6, pc}
 801af06:	1cc4      	adds	r4, r0, #3
 801af08:	f024 0403 	bic.w	r4, r4, #3
 801af0c:	42a0      	cmp	r0, r4
 801af0e:	d0f8      	beq.n	801af02 <sbrk_aligned+0x22>
 801af10:	1a21      	subs	r1, r4, r0
 801af12:	4628      	mov	r0, r5
 801af14:	f000 fe64 	bl	801bbe0 <_sbrk_r>
 801af18:	3001      	adds	r0, #1
 801af1a:	d1f2      	bne.n	801af02 <sbrk_aligned+0x22>
 801af1c:	e7ef      	b.n	801aefe <sbrk_aligned+0x1e>
 801af1e:	bf00      	nop
 801af20:	20001658 	.word	0x20001658

0801af24 <_malloc_r>:
 801af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af28:	1ccd      	adds	r5, r1, #3
 801af2a:	f025 0503 	bic.w	r5, r5, #3
 801af2e:	3508      	adds	r5, #8
 801af30:	2d0c      	cmp	r5, #12
 801af32:	bf38      	it	cc
 801af34:	250c      	movcc	r5, #12
 801af36:	2d00      	cmp	r5, #0
 801af38:	4606      	mov	r6, r0
 801af3a:	db01      	blt.n	801af40 <_malloc_r+0x1c>
 801af3c:	42a9      	cmp	r1, r5
 801af3e:	d904      	bls.n	801af4a <_malloc_r+0x26>
 801af40:	230c      	movs	r3, #12
 801af42:	6033      	str	r3, [r6, #0]
 801af44:	2000      	movs	r0, #0
 801af46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b020 <_malloc_r+0xfc>
 801af4e:	f000 f869 	bl	801b024 <__malloc_lock>
 801af52:	f8d8 3000 	ldr.w	r3, [r8]
 801af56:	461c      	mov	r4, r3
 801af58:	bb44      	cbnz	r4, 801afac <_malloc_r+0x88>
 801af5a:	4629      	mov	r1, r5
 801af5c:	4630      	mov	r0, r6
 801af5e:	f7ff ffbf 	bl	801aee0 <sbrk_aligned>
 801af62:	1c43      	adds	r3, r0, #1
 801af64:	4604      	mov	r4, r0
 801af66:	d158      	bne.n	801b01a <_malloc_r+0xf6>
 801af68:	f8d8 4000 	ldr.w	r4, [r8]
 801af6c:	4627      	mov	r7, r4
 801af6e:	2f00      	cmp	r7, #0
 801af70:	d143      	bne.n	801affa <_malloc_r+0xd6>
 801af72:	2c00      	cmp	r4, #0
 801af74:	d04b      	beq.n	801b00e <_malloc_r+0xea>
 801af76:	6823      	ldr	r3, [r4, #0]
 801af78:	4639      	mov	r1, r7
 801af7a:	4630      	mov	r0, r6
 801af7c:	eb04 0903 	add.w	r9, r4, r3
 801af80:	f000 fe2e 	bl	801bbe0 <_sbrk_r>
 801af84:	4581      	cmp	r9, r0
 801af86:	d142      	bne.n	801b00e <_malloc_r+0xea>
 801af88:	6821      	ldr	r1, [r4, #0]
 801af8a:	1a6d      	subs	r5, r5, r1
 801af8c:	4629      	mov	r1, r5
 801af8e:	4630      	mov	r0, r6
 801af90:	f7ff ffa6 	bl	801aee0 <sbrk_aligned>
 801af94:	3001      	adds	r0, #1
 801af96:	d03a      	beq.n	801b00e <_malloc_r+0xea>
 801af98:	6823      	ldr	r3, [r4, #0]
 801af9a:	442b      	add	r3, r5
 801af9c:	6023      	str	r3, [r4, #0]
 801af9e:	f8d8 3000 	ldr.w	r3, [r8]
 801afa2:	685a      	ldr	r2, [r3, #4]
 801afa4:	bb62      	cbnz	r2, 801b000 <_malloc_r+0xdc>
 801afa6:	f8c8 7000 	str.w	r7, [r8]
 801afaa:	e00f      	b.n	801afcc <_malloc_r+0xa8>
 801afac:	6822      	ldr	r2, [r4, #0]
 801afae:	1b52      	subs	r2, r2, r5
 801afb0:	d420      	bmi.n	801aff4 <_malloc_r+0xd0>
 801afb2:	2a0b      	cmp	r2, #11
 801afb4:	d917      	bls.n	801afe6 <_malloc_r+0xc2>
 801afb6:	1961      	adds	r1, r4, r5
 801afb8:	42a3      	cmp	r3, r4
 801afba:	6025      	str	r5, [r4, #0]
 801afbc:	bf18      	it	ne
 801afbe:	6059      	strne	r1, [r3, #4]
 801afc0:	6863      	ldr	r3, [r4, #4]
 801afc2:	bf08      	it	eq
 801afc4:	f8c8 1000 	streq.w	r1, [r8]
 801afc8:	5162      	str	r2, [r4, r5]
 801afca:	604b      	str	r3, [r1, #4]
 801afcc:	4630      	mov	r0, r6
 801afce:	f000 f82f 	bl	801b030 <__malloc_unlock>
 801afd2:	f104 000b 	add.w	r0, r4, #11
 801afd6:	1d23      	adds	r3, r4, #4
 801afd8:	f020 0007 	bic.w	r0, r0, #7
 801afdc:	1ac2      	subs	r2, r0, r3
 801afde:	bf1c      	itt	ne
 801afe0:	1a1b      	subne	r3, r3, r0
 801afe2:	50a3      	strne	r3, [r4, r2]
 801afe4:	e7af      	b.n	801af46 <_malloc_r+0x22>
 801afe6:	6862      	ldr	r2, [r4, #4]
 801afe8:	42a3      	cmp	r3, r4
 801afea:	bf0c      	ite	eq
 801afec:	f8c8 2000 	streq.w	r2, [r8]
 801aff0:	605a      	strne	r2, [r3, #4]
 801aff2:	e7eb      	b.n	801afcc <_malloc_r+0xa8>
 801aff4:	4623      	mov	r3, r4
 801aff6:	6864      	ldr	r4, [r4, #4]
 801aff8:	e7ae      	b.n	801af58 <_malloc_r+0x34>
 801affa:	463c      	mov	r4, r7
 801affc:	687f      	ldr	r7, [r7, #4]
 801affe:	e7b6      	b.n	801af6e <_malloc_r+0x4a>
 801b000:	461a      	mov	r2, r3
 801b002:	685b      	ldr	r3, [r3, #4]
 801b004:	42a3      	cmp	r3, r4
 801b006:	d1fb      	bne.n	801b000 <_malloc_r+0xdc>
 801b008:	2300      	movs	r3, #0
 801b00a:	6053      	str	r3, [r2, #4]
 801b00c:	e7de      	b.n	801afcc <_malloc_r+0xa8>
 801b00e:	230c      	movs	r3, #12
 801b010:	6033      	str	r3, [r6, #0]
 801b012:	4630      	mov	r0, r6
 801b014:	f000 f80c 	bl	801b030 <__malloc_unlock>
 801b018:	e794      	b.n	801af44 <_malloc_r+0x20>
 801b01a:	6005      	str	r5, [r0, #0]
 801b01c:	e7d6      	b.n	801afcc <_malloc_r+0xa8>
 801b01e:	bf00      	nop
 801b020:	2000165c 	.word	0x2000165c

0801b024 <__malloc_lock>:
 801b024:	4801      	ldr	r0, [pc, #4]	@ (801b02c <__malloc_lock+0x8>)
 801b026:	f000 be28 	b.w	801bc7a <__retarget_lock_acquire_recursive>
 801b02a:	bf00      	nop
 801b02c:	200017a0 	.word	0x200017a0

0801b030 <__malloc_unlock>:
 801b030:	4801      	ldr	r0, [pc, #4]	@ (801b038 <__malloc_unlock+0x8>)
 801b032:	f000 be23 	b.w	801bc7c <__retarget_lock_release_recursive>
 801b036:	bf00      	nop
 801b038:	200017a0 	.word	0x200017a0

0801b03c <__cvt>:
 801b03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b040:	ec57 6b10 	vmov	r6, r7, d0
 801b044:	2f00      	cmp	r7, #0
 801b046:	460c      	mov	r4, r1
 801b048:	4619      	mov	r1, r3
 801b04a:	463b      	mov	r3, r7
 801b04c:	bfbb      	ittet	lt
 801b04e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801b052:	461f      	movlt	r7, r3
 801b054:	2300      	movge	r3, #0
 801b056:	232d      	movlt	r3, #45	@ 0x2d
 801b058:	700b      	strb	r3, [r1, #0]
 801b05a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b05c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801b060:	4691      	mov	r9, r2
 801b062:	f023 0820 	bic.w	r8, r3, #32
 801b066:	bfbc      	itt	lt
 801b068:	4632      	movlt	r2, r6
 801b06a:	4616      	movlt	r6, r2
 801b06c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b070:	d005      	beq.n	801b07e <__cvt+0x42>
 801b072:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801b076:	d100      	bne.n	801b07a <__cvt+0x3e>
 801b078:	3401      	adds	r4, #1
 801b07a:	2102      	movs	r1, #2
 801b07c:	e000      	b.n	801b080 <__cvt+0x44>
 801b07e:	2103      	movs	r1, #3
 801b080:	ab03      	add	r3, sp, #12
 801b082:	9301      	str	r3, [sp, #4]
 801b084:	ab02      	add	r3, sp, #8
 801b086:	9300      	str	r3, [sp, #0]
 801b088:	ec47 6b10 	vmov	d0, r6, r7
 801b08c:	4653      	mov	r3, sl
 801b08e:	4622      	mov	r2, r4
 801b090:	f000 fe8e 	bl	801bdb0 <_dtoa_r>
 801b094:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801b098:	4605      	mov	r5, r0
 801b09a:	d119      	bne.n	801b0d0 <__cvt+0x94>
 801b09c:	f019 0f01 	tst.w	r9, #1
 801b0a0:	d00e      	beq.n	801b0c0 <__cvt+0x84>
 801b0a2:	eb00 0904 	add.w	r9, r0, r4
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	4630      	mov	r0, r6
 801b0ac:	4639      	mov	r1, r7
 801b0ae:	f7e5 fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 801b0b2:	b108      	cbz	r0, 801b0b8 <__cvt+0x7c>
 801b0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 801b0b8:	2230      	movs	r2, #48	@ 0x30
 801b0ba:	9b03      	ldr	r3, [sp, #12]
 801b0bc:	454b      	cmp	r3, r9
 801b0be:	d31e      	bcc.n	801b0fe <__cvt+0xc2>
 801b0c0:	9b03      	ldr	r3, [sp, #12]
 801b0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b0c4:	1b5b      	subs	r3, r3, r5
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	6013      	str	r3, [r2, #0]
 801b0ca:	b004      	add	sp, #16
 801b0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b0d4:	eb00 0904 	add.w	r9, r0, r4
 801b0d8:	d1e5      	bne.n	801b0a6 <__cvt+0x6a>
 801b0da:	7803      	ldrb	r3, [r0, #0]
 801b0dc:	2b30      	cmp	r3, #48	@ 0x30
 801b0de:	d10a      	bne.n	801b0f6 <__cvt+0xba>
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	4630      	mov	r0, r6
 801b0e6:	4639      	mov	r1, r7
 801b0e8:	f7e5 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 801b0ec:	b918      	cbnz	r0, 801b0f6 <__cvt+0xba>
 801b0ee:	f1c4 0401 	rsb	r4, r4, #1
 801b0f2:	f8ca 4000 	str.w	r4, [sl]
 801b0f6:	f8da 3000 	ldr.w	r3, [sl]
 801b0fa:	4499      	add	r9, r3
 801b0fc:	e7d3      	b.n	801b0a6 <__cvt+0x6a>
 801b0fe:	1c59      	adds	r1, r3, #1
 801b100:	9103      	str	r1, [sp, #12]
 801b102:	701a      	strb	r2, [r3, #0]
 801b104:	e7d9      	b.n	801b0ba <__cvt+0x7e>

0801b106 <__exponent>:
 801b106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b108:	2900      	cmp	r1, #0
 801b10a:	bfba      	itte	lt
 801b10c:	4249      	neglt	r1, r1
 801b10e:	232d      	movlt	r3, #45	@ 0x2d
 801b110:	232b      	movge	r3, #43	@ 0x2b
 801b112:	2909      	cmp	r1, #9
 801b114:	7002      	strb	r2, [r0, #0]
 801b116:	7043      	strb	r3, [r0, #1]
 801b118:	dd29      	ble.n	801b16e <__exponent+0x68>
 801b11a:	f10d 0307 	add.w	r3, sp, #7
 801b11e:	461d      	mov	r5, r3
 801b120:	270a      	movs	r7, #10
 801b122:	461a      	mov	r2, r3
 801b124:	fbb1 f6f7 	udiv	r6, r1, r7
 801b128:	fb07 1416 	mls	r4, r7, r6, r1
 801b12c:	3430      	adds	r4, #48	@ 0x30
 801b12e:	f802 4c01 	strb.w	r4, [r2, #-1]
 801b132:	460c      	mov	r4, r1
 801b134:	2c63      	cmp	r4, #99	@ 0x63
 801b136:	f103 33ff 	add.w	r3, r3, #4294967295
 801b13a:	4631      	mov	r1, r6
 801b13c:	dcf1      	bgt.n	801b122 <__exponent+0x1c>
 801b13e:	3130      	adds	r1, #48	@ 0x30
 801b140:	1e94      	subs	r4, r2, #2
 801b142:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b146:	1c41      	adds	r1, r0, #1
 801b148:	4623      	mov	r3, r4
 801b14a:	42ab      	cmp	r3, r5
 801b14c:	d30a      	bcc.n	801b164 <__exponent+0x5e>
 801b14e:	f10d 0309 	add.w	r3, sp, #9
 801b152:	1a9b      	subs	r3, r3, r2
 801b154:	42ac      	cmp	r4, r5
 801b156:	bf88      	it	hi
 801b158:	2300      	movhi	r3, #0
 801b15a:	3302      	adds	r3, #2
 801b15c:	4403      	add	r3, r0
 801b15e:	1a18      	subs	r0, r3, r0
 801b160:	b003      	add	sp, #12
 801b162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b164:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b168:	f801 6f01 	strb.w	r6, [r1, #1]!
 801b16c:	e7ed      	b.n	801b14a <__exponent+0x44>
 801b16e:	2330      	movs	r3, #48	@ 0x30
 801b170:	3130      	adds	r1, #48	@ 0x30
 801b172:	7083      	strb	r3, [r0, #2]
 801b174:	70c1      	strb	r1, [r0, #3]
 801b176:	1d03      	adds	r3, r0, #4
 801b178:	e7f1      	b.n	801b15e <__exponent+0x58>
	...

0801b17c <_printf_float>:
 801b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b180:	b08d      	sub	sp, #52	@ 0x34
 801b182:	460c      	mov	r4, r1
 801b184:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801b188:	4616      	mov	r6, r2
 801b18a:	461f      	mov	r7, r3
 801b18c:	4605      	mov	r5, r0
 801b18e:	f000 fcef 	bl	801bb70 <_localeconv_r>
 801b192:	6803      	ldr	r3, [r0, #0]
 801b194:	9304      	str	r3, [sp, #16]
 801b196:	4618      	mov	r0, r3
 801b198:	f7e5 f88a 	bl	80002b0 <strlen>
 801b19c:	2300      	movs	r3, #0
 801b19e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b1a0:	f8d8 3000 	ldr.w	r3, [r8]
 801b1a4:	9005      	str	r0, [sp, #20]
 801b1a6:	3307      	adds	r3, #7
 801b1a8:	f023 0307 	bic.w	r3, r3, #7
 801b1ac:	f103 0208 	add.w	r2, r3, #8
 801b1b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b1b4:	f8d4 b000 	ldr.w	fp, [r4]
 801b1b8:	f8c8 2000 	str.w	r2, [r8]
 801b1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b1c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801b1c4:	9307      	str	r3, [sp, #28]
 801b1c6:	f8cd 8018 	str.w	r8, [sp, #24]
 801b1ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801b1ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b1d2:	4b9c      	ldr	r3, [pc, #624]	@ (801b444 <_printf_float+0x2c8>)
 801b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 801b1d8:	f7e5 fcc8 	bl	8000b6c <__aeabi_dcmpun>
 801b1dc:	bb70      	cbnz	r0, 801b23c <_printf_float+0xc0>
 801b1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b1e2:	4b98      	ldr	r3, [pc, #608]	@ (801b444 <_printf_float+0x2c8>)
 801b1e4:	f04f 32ff 	mov.w	r2, #4294967295
 801b1e8:	f7e5 fca2 	bl	8000b30 <__aeabi_dcmple>
 801b1ec:	bb30      	cbnz	r0, 801b23c <_printf_float+0xc0>
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	4640      	mov	r0, r8
 801b1f4:	4649      	mov	r1, r9
 801b1f6:	f7e5 fc91 	bl	8000b1c <__aeabi_dcmplt>
 801b1fa:	b110      	cbz	r0, 801b202 <_printf_float+0x86>
 801b1fc:	232d      	movs	r3, #45	@ 0x2d
 801b1fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b202:	4a91      	ldr	r2, [pc, #580]	@ (801b448 <_printf_float+0x2cc>)
 801b204:	4b91      	ldr	r3, [pc, #580]	@ (801b44c <_printf_float+0x2d0>)
 801b206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b20a:	bf94      	ite	ls
 801b20c:	4690      	movls	r8, r2
 801b20e:	4698      	movhi	r8, r3
 801b210:	2303      	movs	r3, #3
 801b212:	6123      	str	r3, [r4, #16]
 801b214:	f02b 0304 	bic.w	r3, fp, #4
 801b218:	6023      	str	r3, [r4, #0]
 801b21a:	f04f 0900 	mov.w	r9, #0
 801b21e:	9700      	str	r7, [sp, #0]
 801b220:	4633      	mov	r3, r6
 801b222:	aa0b      	add	r2, sp, #44	@ 0x2c
 801b224:	4621      	mov	r1, r4
 801b226:	4628      	mov	r0, r5
 801b228:	f000 f9d2 	bl	801b5d0 <_printf_common>
 801b22c:	3001      	adds	r0, #1
 801b22e:	f040 808d 	bne.w	801b34c <_printf_float+0x1d0>
 801b232:	f04f 30ff 	mov.w	r0, #4294967295
 801b236:	b00d      	add	sp, #52	@ 0x34
 801b238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b23c:	4642      	mov	r2, r8
 801b23e:	464b      	mov	r3, r9
 801b240:	4640      	mov	r0, r8
 801b242:	4649      	mov	r1, r9
 801b244:	f7e5 fc92 	bl	8000b6c <__aeabi_dcmpun>
 801b248:	b140      	cbz	r0, 801b25c <_printf_float+0xe0>
 801b24a:	464b      	mov	r3, r9
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	bfbc      	itt	lt
 801b250:	232d      	movlt	r3, #45	@ 0x2d
 801b252:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801b256:	4a7e      	ldr	r2, [pc, #504]	@ (801b450 <_printf_float+0x2d4>)
 801b258:	4b7e      	ldr	r3, [pc, #504]	@ (801b454 <_printf_float+0x2d8>)
 801b25a:	e7d4      	b.n	801b206 <_printf_float+0x8a>
 801b25c:	6863      	ldr	r3, [r4, #4]
 801b25e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801b262:	9206      	str	r2, [sp, #24]
 801b264:	1c5a      	adds	r2, r3, #1
 801b266:	d13b      	bne.n	801b2e0 <_printf_float+0x164>
 801b268:	2306      	movs	r3, #6
 801b26a:	6063      	str	r3, [r4, #4]
 801b26c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801b270:	2300      	movs	r3, #0
 801b272:	6022      	str	r2, [r4, #0]
 801b274:	9303      	str	r3, [sp, #12]
 801b276:	ab0a      	add	r3, sp, #40	@ 0x28
 801b278:	e9cd a301 	strd	sl, r3, [sp, #4]
 801b27c:	ab09      	add	r3, sp, #36	@ 0x24
 801b27e:	9300      	str	r3, [sp, #0]
 801b280:	6861      	ldr	r1, [r4, #4]
 801b282:	ec49 8b10 	vmov	d0, r8, r9
 801b286:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801b28a:	4628      	mov	r0, r5
 801b28c:	f7ff fed6 	bl	801b03c <__cvt>
 801b290:	9b06      	ldr	r3, [sp, #24]
 801b292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b294:	2b47      	cmp	r3, #71	@ 0x47
 801b296:	4680      	mov	r8, r0
 801b298:	d129      	bne.n	801b2ee <_printf_float+0x172>
 801b29a:	1cc8      	adds	r0, r1, #3
 801b29c:	db02      	blt.n	801b2a4 <_printf_float+0x128>
 801b29e:	6863      	ldr	r3, [r4, #4]
 801b2a0:	4299      	cmp	r1, r3
 801b2a2:	dd41      	ble.n	801b328 <_printf_float+0x1ac>
 801b2a4:	f1aa 0a02 	sub.w	sl, sl, #2
 801b2a8:	fa5f fa8a 	uxtb.w	sl, sl
 801b2ac:	3901      	subs	r1, #1
 801b2ae:	4652      	mov	r2, sl
 801b2b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b2b4:	9109      	str	r1, [sp, #36]	@ 0x24
 801b2b6:	f7ff ff26 	bl	801b106 <__exponent>
 801b2ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b2bc:	1813      	adds	r3, r2, r0
 801b2be:	2a01      	cmp	r2, #1
 801b2c0:	4681      	mov	r9, r0
 801b2c2:	6123      	str	r3, [r4, #16]
 801b2c4:	dc02      	bgt.n	801b2cc <_printf_float+0x150>
 801b2c6:	6822      	ldr	r2, [r4, #0]
 801b2c8:	07d2      	lsls	r2, r2, #31
 801b2ca:	d501      	bpl.n	801b2d0 <_printf_float+0x154>
 801b2cc:	3301      	adds	r3, #1
 801b2ce:	6123      	str	r3, [r4, #16]
 801b2d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d0a2      	beq.n	801b21e <_printf_float+0xa2>
 801b2d8:	232d      	movs	r3, #45	@ 0x2d
 801b2da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b2de:	e79e      	b.n	801b21e <_printf_float+0xa2>
 801b2e0:	9a06      	ldr	r2, [sp, #24]
 801b2e2:	2a47      	cmp	r2, #71	@ 0x47
 801b2e4:	d1c2      	bne.n	801b26c <_printf_float+0xf0>
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d1c0      	bne.n	801b26c <_printf_float+0xf0>
 801b2ea:	2301      	movs	r3, #1
 801b2ec:	e7bd      	b.n	801b26a <_printf_float+0xee>
 801b2ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801b2f2:	d9db      	bls.n	801b2ac <_printf_float+0x130>
 801b2f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801b2f8:	d118      	bne.n	801b32c <_printf_float+0x1b0>
 801b2fa:	2900      	cmp	r1, #0
 801b2fc:	6863      	ldr	r3, [r4, #4]
 801b2fe:	dd0b      	ble.n	801b318 <_printf_float+0x19c>
 801b300:	6121      	str	r1, [r4, #16]
 801b302:	b913      	cbnz	r3, 801b30a <_printf_float+0x18e>
 801b304:	6822      	ldr	r2, [r4, #0]
 801b306:	07d0      	lsls	r0, r2, #31
 801b308:	d502      	bpl.n	801b310 <_printf_float+0x194>
 801b30a:	3301      	adds	r3, #1
 801b30c:	440b      	add	r3, r1
 801b30e:	6123      	str	r3, [r4, #16]
 801b310:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b312:	f04f 0900 	mov.w	r9, #0
 801b316:	e7db      	b.n	801b2d0 <_printf_float+0x154>
 801b318:	b913      	cbnz	r3, 801b320 <_printf_float+0x1a4>
 801b31a:	6822      	ldr	r2, [r4, #0]
 801b31c:	07d2      	lsls	r2, r2, #31
 801b31e:	d501      	bpl.n	801b324 <_printf_float+0x1a8>
 801b320:	3302      	adds	r3, #2
 801b322:	e7f4      	b.n	801b30e <_printf_float+0x192>
 801b324:	2301      	movs	r3, #1
 801b326:	e7f2      	b.n	801b30e <_printf_float+0x192>
 801b328:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801b32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b32e:	4299      	cmp	r1, r3
 801b330:	db05      	blt.n	801b33e <_printf_float+0x1c2>
 801b332:	6823      	ldr	r3, [r4, #0]
 801b334:	6121      	str	r1, [r4, #16]
 801b336:	07d8      	lsls	r0, r3, #31
 801b338:	d5ea      	bpl.n	801b310 <_printf_float+0x194>
 801b33a:	1c4b      	adds	r3, r1, #1
 801b33c:	e7e7      	b.n	801b30e <_printf_float+0x192>
 801b33e:	2900      	cmp	r1, #0
 801b340:	bfd4      	ite	le
 801b342:	f1c1 0202 	rsble	r2, r1, #2
 801b346:	2201      	movgt	r2, #1
 801b348:	4413      	add	r3, r2
 801b34a:	e7e0      	b.n	801b30e <_printf_float+0x192>
 801b34c:	6823      	ldr	r3, [r4, #0]
 801b34e:	055a      	lsls	r2, r3, #21
 801b350:	d407      	bmi.n	801b362 <_printf_float+0x1e6>
 801b352:	6923      	ldr	r3, [r4, #16]
 801b354:	4642      	mov	r2, r8
 801b356:	4631      	mov	r1, r6
 801b358:	4628      	mov	r0, r5
 801b35a:	47b8      	blx	r7
 801b35c:	3001      	adds	r0, #1
 801b35e:	d12b      	bne.n	801b3b8 <_printf_float+0x23c>
 801b360:	e767      	b.n	801b232 <_printf_float+0xb6>
 801b362:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801b366:	f240 80dd 	bls.w	801b524 <_printf_float+0x3a8>
 801b36a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801b36e:	2200      	movs	r2, #0
 801b370:	2300      	movs	r3, #0
 801b372:	f7e5 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 801b376:	2800      	cmp	r0, #0
 801b378:	d033      	beq.n	801b3e2 <_printf_float+0x266>
 801b37a:	4a37      	ldr	r2, [pc, #220]	@ (801b458 <_printf_float+0x2dc>)
 801b37c:	2301      	movs	r3, #1
 801b37e:	4631      	mov	r1, r6
 801b380:	4628      	mov	r0, r5
 801b382:	47b8      	blx	r7
 801b384:	3001      	adds	r0, #1
 801b386:	f43f af54 	beq.w	801b232 <_printf_float+0xb6>
 801b38a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801b38e:	4543      	cmp	r3, r8
 801b390:	db02      	blt.n	801b398 <_printf_float+0x21c>
 801b392:	6823      	ldr	r3, [r4, #0]
 801b394:	07d8      	lsls	r0, r3, #31
 801b396:	d50f      	bpl.n	801b3b8 <_printf_float+0x23c>
 801b398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b39c:	4631      	mov	r1, r6
 801b39e:	4628      	mov	r0, r5
 801b3a0:	47b8      	blx	r7
 801b3a2:	3001      	adds	r0, #1
 801b3a4:	f43f af45 	beq.w	801b232 <_printf_float+0xb6>
 801b3a8:	f04f 0900 	mov.w	r9, #0
 801b3ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3b0:	f104 0a1a 	add.w	sl, r4, #26
 801b3b4:	45c8      	cmp	r8, r9
 801b3b6:	dc09      	bgt.n	801b3cc <_printf_float+0x250>
 801b3b8:	6823      	ldr	r3, [r4, #0]
 801b3ba:	079b      	lsls	r3, r3, #30
 801b3bc:	f100 8103 	bmi.w	801b5c6 <_printf_float+0x44a>
 801b3c0:	68e0      	ldr	r0, [r4, #12]
 801b3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b3c4:	4298      	cmp	r0, r3
 801b3c6:	bfb8      	it	lt
 801b3c8:	4618      	movlt	r0, r3
 801b3ca:	e734      	b.n	801b236 <_printf_float+0xba>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	4652      	mov	r2, sl
 801b3d0:	4631      	mov	r1, r6
 801b3d2:	4628      	mov	r0, r5
 801b3d4:	47b8      	blx	r7
 801b3d6:	3001      	adds	r0, #1
 801b3d8:	f43f af2b 	beq.w	801b232 <_printf_float+0xb6>
 801b3dc:	f109 0901 	add.w	r9, r9, #1
 801b3e0:	e7e8      	b.n	801b3b4 <_printf_float+0x238>
 801b3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	dc39      	bgt.n	801b45c <_printf_float+0x2e0>
 801b3e8:	4a1b      	ldr	r2, [pc, #108]	@ (801b458 <_printf_float+0x2dc>)
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	4631      	mov	r1, r6
 801b3ee:	4628      	mov	r0, r5
 801b3f0:	47b8      	blx	r7
 801b3f2:	3001      	adds	r0, #1
 801b3f4:	f43f af1d 	beq.w	801b232 <_printf_float+0xb6>
 801b3f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801b3fc:	ea59 0303 	orrs.w	r3, r9, r3
 801b400:	d102      	bne.n	801b408 <_printf_float+0x28c>
 801b402:	6823      	ldr	r3, [r4, #0]
 801b404:	07d9      	lsls	r1, r3, #31
 801b406:	d5d7      	bpl.n	801b3b8 <_printf_float+0x23c>
 801b408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b40c:	4631      	mov	r1, r6
 801b40e:	4628      	mov	r0, r5
 801b410:	47b8      	blx	r7
 801b412:	3001      	adds	r0, #1
 801b414:	f43f af0d 	beq.w	801b232 <_printf_float+0xb6>
 801b418:	f04f 0a00 	mov.w	sl, #0
 801b41c:	f104 0b1a 	add.w	fp, r4, #26
 801b420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b422:	425b      	negs	r3, r3
 801b424:	4553      	cmp	r3, sl
 801b426:	dc01      	bgt.n	801b42c <_printf_float+0x2b0>
 801b428:	464b      	mov	r3, r9
 801b42a:	e793      	b.n	801b354 <_printf_float+0x1d8>
 801b42c:	2301      	movs	r3, #1
 801b42e:	465a      	mov	r2, fp
 801b430:	4631      	mov	r1, r6
 801b432:	4628      	mov	r0, r5
 801b434:	47b8      	blx	r7
 801b436:	3001      	adds	r0, #1
 801b438:	f43f aefb 	beq.w	801b232 <_printf_float+0xb6>
 801b43c:	f10a 0a01 	add.w	sl, sl, #1
 801b440:	e7ee      	b.n	801b420 <_printf_float+0x2a4>
 801b442:	bf00      	nop
 801b444:	7fefffff 	.word	0x7fefffff
 801b448:	0801e130 	.word	0x0801e130
 801b44c:	0801e134 	.word	0x0801e134
 801b450:	0801e138 	.word	0x0801e138
 801b454:	0801e13c 	.word	0x0801e13c
 801b458:	0801e140 	.word	0x0801e140
 801b45c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b45e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b462:	4553      	cmp	r3, sl
 801b464:	bfa8      	it	ge
 801b466:	4653      	movge	r3, sl
 801b468:	2b00      	cmp	r3, #0
 801b46a:	4699      	mov	r9, r3
 801b46c:	dc36      	bgt.n	801b4dc <_printf_float+0x360>
 801b46e:	f04f 0b00 	mov.w	fp, #0
 801b472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b476:	f104 021a 	add.w	r2, r4, #26
 801b47a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801b47c:	9306      	str	r3, [sp, #24]
 801b47e:	eba3 0309 	sub.w	r3, r3, r9
 801b482:	455b      	cmp	r3, fp
 801b484:	dc31      	bgt.n	801b4ea <_printf_float+0x36e>
 801b486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b488:	459a      	cmp	sl, r3
 801b48a:	dc3a      	bgt.n	801b502 <_printf_float+0x386>
 801b48c:	6823      	ldr	r3, [r4, #0]
 801b48e:	07da      	lsls	r2, r3, #31
 801b490:	d437      	bmi.n	801b502 <_printf_float+0x386>
 801b492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b494:	ebaa 0903 	sub.w	r9, sl, r3
 801b498:	9b06      	ldr	r3, [sp, #24]
 801b49a:	ebaa 0303 	sub.w	r3, sl, r3
 801b49e:	4599      	cmp	r9, r3
 801b4a0:	bfa8      	it	ge
 801b4a2:	4699      	movge	r9, r3
 801b4a4:	f1b9 0f00 	cmp.w	r9, #0
 801b4a8:	dc33      	bgt.n	801b512 <_printf_float+0x396>
 801b4aa:	f04f 0800 	mov.w	r8, #0
 801b4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b4b2:	f104 0b1a 	add.w	fp, r4, #26
 801b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4b8:	ebaa 0303 	sub.w	r3, sl, r3
 801b4bc:	eba3 0309 	sub.w	r3, r3, r9
 801b4c0:	4543      	cmp	r3, r8
 801b4c2:	f77f af79 	ble.w	801b3b8 <_printf_float+0x23c>
 801b4c6:	2301      	movs	r3, #1
 801b4c8:	465a      	mov	r2, fp
 801b4ca:	4631      	mov	r1, r6
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	47b8      	blx	r7
 801b4d0:	3001      	adds	r0, #1
 801b4d2:	f43f aeae 	beq.w	801b232 <_printf_float+0xb6>
 801b4d6:	f108 0801 	add.w	r8, r8, #1
 801b4da:	e7ec      	b.n	801b4b6 <_printf_float+0x33a>
 801b4dc:	4642      	mov	r2, r8
 801b4de:	4631      	mov	r1, r6
 801b4e0:	4628      	mov	r0, r5
 801b4e2:	47b8      	blx	r7
 801b4e4:	3001      	adds	r0, #1
 801b4e6:	d1c2      	bne.n	801b46e <_printf_float+0x2f2>
 801b4e8:	e6a3      	b.n	801b232 <_printf_float+0xb6>
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	4631      	mov	r1, r6
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	9206      	str	r2, [sp, #24]
 801b4f2:	47b8      	blx	r7
 801b4f4:	3001      	adds	r0, #1
 801b4f6:	f43f ae9c 	beq.w	801b232 <_printf_float+0xb6>
 801b4fa:	9a06      	ldr	r2, [sp, #24]
 801b4fc:	f10b 0b01 	add.w	fp, fp, #1
 801b500:	e7bb      	b.n	801b47a <_printf_float+0x2fe>
 801b502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b506:	4631      	mov	r1, r6
 801b508:	4628      	mov	r0, r5
 801b50a:	47b8      	blx	r7
 801b50c:	3001      	adds	r0, #1
 801b50e:	d1c0      	bne.n	801b492 <_printf_float+0x316>
 801b510:	e68f      	b.n	801b232 <_printf_float+0xb6>
 801b512:	9a06      	ldr	r2, [sp, #24]
 801b514:	464b      	mov	r3, r9
 801b516:	4442      	add	r2, r8
 801b518:	4631      	mov	r1, r6
 801b51a:	4628      	mov	r0, r5
 801b51c:	47b8      	blx	r7
 801b51e:	3001      	adds	r0, #1
 801b520:	d1c3      	bne.n	801b4aa <_printf_float+0x32e>
 801b522:	e686      	b.n	801b232 <_printf_float+0xb6>
 801b524:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801b528:	f1ba 0f01 	cmp.w	sl, #1
 801b52c:	dc01      	bgt.n	801b532 <_printf_float+0x3b6>
 801b52e:	07db      	lsls	r3, r3, #31
 801b530:	d536      	bpl.n	801b5a0 <_printf_float+0x424>
 801b532:	2301      	movs	r3, #1
 801b534:	4642      	mov	r2, r8
 801b536:	4631      	mov	r1, r6
 801b538:	4628      	mov	r0, r5
 801b53a:	47b8      	blx	r7
 801b53c:	3001      	adds	r0, #1
 801b53e:	f43f ae78 	beq.w	801b232 <_printf_float+0xb6>
 801b542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b546:	4631      	mov	r1, r6
 801b548:	4628      	mov	r0, r5
 801b54a:	47b8      	blx	r7
 801b54c:	3001      	adds	r0, #1
 801b54e:	f43f ae70 	beq.w	801b232 <_printf_float+0xb6>
 801b552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801b556:	2200      	movs	r2, #0
 801b558:	2300      	movs	r3, #0
 801b55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b55e:	f7e5 fad3 	bl	8000b08 <__aeabi_dcmpeq>
 801b562:	b9c0      	cbnz	r0, 801b596 <_printf_float+0x41a>
 801b564:	4653      	mov	r3, sl
 801b566:	f108 0201 	add.w	r2, r8, #1
 801b56a:	4631      	mov	r1, r6
 801b56c:	4628      	mov	r0, r5
 801b56e:	47b8      	blx	r7
 801b570:	3001      	adds	r0, #1
 801b572:	d10c      	bne.n	801b58e <_printf_float+0x412>
 801b574:	e65d      	b.n	801b232 <_printf_float+0xb6>
 801b576:	2301      	movs	r3, #1
 801b578:	465a      	mov	r2, fp
 801b57a:	4631      	mov	r1, r6
 801b57c:	4628      	mov	r0, r5
 801b57e:	47b8      	blx	r7
 801b580:	3001      	adds	r0, #1
 801b582:	f43f ae56 	beq.w	801b232 <_printf_float+0xb6>
 801b586:	f108 0801 	add.w	r8, r8, #1
 801b58a:	45d0      	cmp	r8, sl
 801b58c:	dbf3      	blt.n	801b576 <_printf_float+0x3fa>
 801b58e:	464b      	mov	r3, r9
 801b590:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801b594:	e6df      	b.n	801b356 <_printf_float+0x1da>
 801b596:	f04f 0800 	mov.w	r8, #0
 801b59a:	f104 0b1a 	add.w	fp, r4, #26
 801b59e:	e7f4      	b.n	801b58a <_printf_float+0x40e>
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	4642      	mov	r2, r8
 801b5a4:	e7e1      	b.n	801b56a <_printf_float+0x3ee>
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	464a      	mov	r2, r9
 801b5aa:	4631      	mov	r1, r6
 801b5ac:	4628      	mov	r0, r5
 801b5ae:	47b8      	blx	r7
 801b5b0:	3001      	adds	r0, #1
 801b5b2:	f43f ae3e 	beq.w	801b232 <_printf_float+0xb6>
 801b5b6:	f108 0801 	add.w	r8, r8, #1
 801b5ba:	68e3      	ldr	r3, [r4, #12]
 801b5bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b5be:	1a5b      	subs	r3, r3, r1
 801b5c0:	4543      	cmp	r3, r8
 801b5c2:	dcf0      	bgt.n	801b5a6 <_printf_float+0x42a>
 801b5c4:	e6fc      	b.n	801b3c0 <_printf_float+0x244>
 801b5c6:	f04f 0800 	mov.w	r8, #0
 801b5ca:	f104 0919 	add.w	r9, r4, #25
 801b5ce:	e7f4      	b.n	801b5ba <_printf_float+0x43e>

0801b5d0 <_printf_common>:
 801b5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5d4:	4616      	mov	r6, r2
 801b5d6:	4698      	mov	r8, r3
 801b5d8:	688a      	ldr	r2, [r1, #8]
 801b5da:	690b      	ldr	r3, [r1, #16]
 801b5dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b5e0:	4293      	cmp	r3, r2
 801b5e2:	bfb8      	it	lt
 801b5e4:	4613      	movlt	r3, r2
 801b5e6:	6033      	str	r3, [r6, #0]
 801b5e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b5ec:	4607      	mov	r7, r0
 801b5ee:	460c      	mov	r4, r1
 801b5f0:	b10a      	cbz	r2, 801b5f6 <_printf_common+0x26>
 801b5f2:	3301      	adds	r3, #1
 801b5f4:	6033      	str	r3, [r6, #0]
 801b5f6:	6823      	ldr	r3, [r4, #0]
 801b5f8:	0699      	lsls	r1, r3, #26
 801b5fa:	bf42      	ittt	mi
 801b5fc:	6833      	ldrmi	r3, [r6, #0]
 801b5fe:	3302      	addmi	r3, #2
 801b600:	6033      	strmi	r3, [r6, #0]
 801b602:	6825      	ldr	r5, [r4, #0]
 801b604:	f015 0506 	ands.w	r5, r5, #6
 801b608:	d106      	bne.n	801b618 <_printf_common+0x48>
 801b60a:	f104 0a19 	add.w	sl, r4, #25
 801b60e:	68e3      	ldr	r3, [r4, #12]
 801b610:	6832      	ldr	r2, [r6, #0]
 801b612:	1a9b      	subs	r3, r3, r2
 801b614:	42ab      	cmp	r3, r5
 801b616:	dc26      	bgt.n	801b666 <_printf_common+0x96>
 801b618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b61c:	6822      	ldr	r2, [r4, #0]
 801b61e:	3b00      	subs	r3, #0
 801b620:	bf18      	it	ne
 801b622:	2301      	movne	r3, #1
 801b624:	0692      	lsls	r2, r2, #26
 801b626:	d42b      	bmi.n	801b680 <_printf_common+0xb0>
 801b628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b62c:	4641      	mov	r1, r8
 801b62e:	4638      	mov	r0, r7
 801b630:	47c8      	blx	r9
 801b632:	3001      	adds	r0, #1
 801b634:	d01e      	beq.n	801b674 <_printf_common+0xa4>
 801b636:	6823      	ldr	r3, [r4, #0]
 801b638:	6922      	ldr	r2, [r4, #16]
 801b63a:	f003 0306 	and.w	r3, r3, #6
 801b63e:	2b04      	cmp	r3, #4
 801b640:	bf02      	ittt	eq
 801b642:	68e5      	ldreq	r5, [r4, #12]
 801b644:	6833      	ldreq	r3, [r6, #0]
 801b646:	1aed      	subeq	r5, r5, r3
 801b648:	68a3      	ldr	r3, [r4, #8]
 801b64a:	bf0c      	ite	eq
 801b64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b650:	2500      	movne	r5, #0
 801b652:	4293      	cmp	r3, r2
 801b654:	bfc4      	itt	gt
 801b656:	1a9b      	subgt	r3, r3, r2
 801b658:	18ed      	addgt	r5, r5, r3
 801b65a:	2600      	movs	r6, #0
 801b65c:	341a      	adds	r4, #26
 801b65e:	42b5      	cmp	r5, r6
 801b660:	d11a      	bne.n	801b698 <_printf_common+0xc8>
 801b662:	2000      	movs	r0, #0
 801b664:	e008      	b.n	801b678 <_printf_common+0xa8>
 801b666:	2301      	movs	r3, #1
 801b668:	4652      	mov	r2, sl
 801b66a:	4641      	mov	r1, r8
 801b66c:	4638      	mov	r0, r7
 801b66e:	47c8      	blx	r9
 801b670:	3001      	adds	r0, #1
 801b672:	d103      	bne.n	801b67c <_printf_common+0xac>
 801b674:	f04f 30ff 	mov.w	r0, #4294967295
 801b678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b67c:	3501      	adds	r5, #1
 801b67e:	e7c6      	b.n	801b60e <_printf_common+0x3e>
 801b680:	18e1      	adds	r1, r4, r3
 801b682:	1c5a      	adds	r2, r3, #1
 801b684:	2030      	movs	r0, #48	@ 0x30
 801b686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b68a:	4422      	add	r2, r4
 801b68c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b694:	3302      	adds	r3, #2
 801b696:	e7c7      	b.n	801b628 <_printf_common+0x58>
 801b698:	2301      	movs	r3, #1
 801b69a:	4622      	mov	r2, r4
 801b69c:	4641      	mov	r1, r8
 801b69e:	4638      	mov	r0, r7
 801b6a0:	47c8      	blx	r9
 801b6a2:	3001      	adds	r0, #1
 801b6a4:	d0e6      	beq.n	801b674 <_printf_common+0xa4>
 801b6a6:	3601      	adds	r6, #1
 801b6a8:	e7d9      	b.n	801b65e <_printf_common+0x8e>
	...

0801b6ac <_printf_i>:
 801b6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b6b0:	7e0f      	ldrb	r7, [r1, #24]
 801b6b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b6b4:	2f78      	cmp	r7, #120	@ 0x78
 801b6b6:	4691      	mov	r9, r2
 801b6b8:	4680      	mov	r8, r0
 801b6ba:	460c      	mov	r4, r1
 801b6bc:	469a      	mov	sl, r3
 801b6be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b6c2:	d807      	bhi.n	801b6d4 <_printf_i+0x28>
 801b6c4:	2f62      	cmp	r7, #98	@ 0x62
 801b6c6:	d80a      	bhi.n	801b6de <_printf_i+0x32>
 801b6c8:	2f00      	cmp	r7, #0
 801b6ca:	f000 80d2 	beq.w	801b872 <_printf_i+0x1c6>
 801b6ce:	2f58      	cmp	r7, #88	@ 0x58
 801b6d0:	f000 80b9 	beq.w	801b846 <_printf_i+0x19a>
 801b6d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b6d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b6dc:	e03a      	b.n	801b754 <_printf_i+0xa8>
 801b6de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b6e2:	2b15      	cmp	r3, #21
 801b6e4:	d8f6      	bhi.n	801b6d4 <_printf_i+0x28>
 801b6e6:	a101      	add	r1, pc, #4	@ (adr r1, 801b6ec <_printf_i+0x40>)
 801b6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b6ec:	0801b745 	.word	0x0801b745
 801b6f0:	0801b759 	.word	0x0801b759
 801b6f4:	0801b6d5 	.word	0x0801b6d5
 801b6f8:	0801b6d5 	.word	0x0801b6d5
 801b6fc:	0801b6d5 	.word	0x0801b6d5
 801b700:	0801b6d5 	.word	0x0801b6d5
 801b704:	0801b759 	.word	0x0801b759
 801b708:	0801b6d5 	.word	0x0801b6d5
 801b70c:	0801b6d5 	.word	0x0801b6d5
 801b710:	0801b6d5 	.word	0x0801b6d5
 801b714:	0801b6d5 	.word	0x0801b6d5
 801b718:	0801b859 	.word	0x0801b859
 801b71c:	0801b783 	.word	0x0801b783
 801b720:	0801b813 	.word	0x0801b813
 801b724:	0801b6d5 	.word	0x0801b6d5
 801b728:	0801b6d5 	.word	0x0801b6d5
 801b72c:	0801b87b 	.word	0x0801b87b
 801b730:	0801b6d5 	.word	0x0801b6d5
 801b734:	0801b783 	.word	0x0801b783
 801b738:	0801b6d5 	.word	0x0801b6d5
 801b73c:	0801b6d5 	.word	0x0801b6d5
 801b740:	0801b81b 	.word	0x0801b81b
 801b744:	6833      	ldr	r3, [r6, #0]
 801b746:	1d1a      	adds	r2, r3, #4
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	6032      	str	r2, [r6, #0]
 801b74c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b754:	2301      	movs	r3, #1
 801b756:	e09d      	b.n	801b894 <_printf_i+0x1e8>
 801b758:	6833      	ldr	r3, [r6, #0]
 801b75a:	6820      	ldr	r0, [r4, #0]
 801b75c:	1d19      	adds	r1, r3, #4
 801b75e:	6031      	str	r1, [r6, #0]
 801b760:	0606      	lsls	r6, r0, #24
 801b762:	d501      	bpl.n	801b768 <_printf_i+0xbc>
 801b764:	681d      	ldr	r5, [r3, #0]
 801b766:	e003      	b.n	801b770 <_printf_i+0xc4>
 801b768:	0645      	lsls	r5, r0, #25
 801b76a:	d5fb      	bpl.n	801b764 <_printf_i+0xb8>
 801b76c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b770:	2d00      	cmp	r5, #0
 801b772:	da03      	bge.n	801b77c <_printf_i+0xd0>
 801b774:	232d      	movs	r3, #45	@ 0x2d
 801b776:	426d      	negs	r5, r5
 801b778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b77c:	4859      	ldr	r0, [pc, #356]	@ (801b8e4 <_printf_i+0x238>)
 801b77e:	230a      	movs	r3, #10
 801b780:	e011      	b.n	801b7a6 <_printf_i+0xfa>
 801b782:	6821      	ldr	r1, [r4, #0]
 801b784:	6833      	ldr	r3, [r6, #0]
 801b786:	0608      	lsls	r0, r1, #24
 801b788:	f853 5b04 	ldr.w	r5, [r3], #4
 801b78c:	d402      	bmi.n	801b794 <_printf_i+0xe8>
 801b78e:	0649      	lsls	r1, r1, #25
 801b790:	bf48      	it	mi
 801b792:	b2ad      	uxthmi	r5, r5
 801b794:	2f6f      	cmp	r7, #111	@ 0x6f
 801b796:	4853      	ldr	r0, [pc, #332]	@ (801b8e4 <_printf_i+0x238>)
 801b798:	6033      	str	r3, [r6, #0]
 801b79a:	bf14      	ite	ne
 801b79c:	230a      	movne	r3, #10
 801b79e:	2308      	moveq	r3, #8
 801b7a0:	2100      	movs	r1, #0
 801b7a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b7a6:	6866      	ldr	r6, [r4, #4]
 801b7a8:	60a6      	str	r6, [r4, #8]
 801b7aa:	2e00      	cmp	r6, #0
 801b7ac:	bfa2      	ittt	ge
 801b7ae:	6821      	ldrge	r1, [r4, #0]
 801b7b0:	f021 0104 	bicge.w	r1, r1, #4
 801b7b4:	6021      	strge	r1, [r4, #0]
 801b7b6:	b90d      	cbnz	r5, 801b7bc <_printf_i+0x110>
 801b7b8:	2e00      	cmp	r6, #0
 801b7ba:	d04b      	beq.n	801b854 <_printf_i+0x1a8>
 801b7bc:	4616      	mov	r6, r2
 801b7be:	fbb5 f1f3 	udiv	r1, r5, r3
 801b7c2:	fb03 5711 	mls	r7, r3, r1, r5
 801b7c6:	5dc7      	ldrb	r7, [r0, r7]
 801b7c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b7cc:	462f      	mov	r7, r5
 801b7ce:	42bb      	cmp	r3, r7
 801b7d0:	460d      	mov	r5, r1
 801b7d2:	d9f4      	bls.n	801b7be <_printf_i+0x112>
 801b7d4:	2b08      	cmp	r3, #8
 801b7d6:	d10b      	bne.n	801b7f0 <_printf_i+0x144>
 801b7d8:	6823      	ldr	r3, [r4, #0]
 801b7da:	07df      	lsls	r7, r3, #31
 801b7dc:	d508      	bpl.n	801b7f0 <_printf_i+0x144>
 801b7de:	6923      	ldr	r3, [r4, #16]
 801b7e0:	6861      	ldr	r1, [r4, #4]
 801b7e2:	4299      	cmp	r1, r3
 801b7e4:	bfde      	ittt	le
 801b7e6:	2330      	movle	r3, #48	@ 0x30
 801b7e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b7ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b7f0:	1b92      	subs	r2, r2, r6
 801b7f2:	6122      	str	r2, [r4, #16]
 801b7f4:	f8cd a000 	str.w	sl, [sp]
 801b7f8:	464b      	mov	r3, r9
 801b7fa:	aa03      	add	r2, sp, #12
 801b7fc:	4621      	mov	r1, r4
 801b7fe:	4640      	mov	r0, r8
 801b800:	f7ff fee6 	bl	801b5d0 <_printf_common>
 801b804:	3001      	adds	r0, #1
 801b806:	d14a      	bne.n	801b89e <_printf_i+0x1f2>
 801b808:	f04f 30ff 	mov.w	r0, #4294967295
 801b80c:	b004      	add	sp, #16
 801b80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b812:	6823      	ldr	r3, [r4, #0]
 801b814:	f043 0320 	orr.w	r3, r3, #32
 801b818:	6023      	str	r3, [r4, #0]
 801b81a:	4833      	ldr	r0, [pc, #204]	@ (801b8e8 <_printf_i+0x23c>)
 801b81c:	2778      	movs	r7, #120	@ 0x78
 801b81e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b822:	6823      	ldr	r3, [r4, #0]
 801b824:	6831      	ldr	r1, [r6, #0]
 801b826:	061f      	lsls	r7, r3, #24
 801b828:	f851 5b04 	ldr.w	r5, [r1], #4
 801b82c:	d402      	bmi.n	801b834 <_printf_i+0x188>
 801b82e:	065f      	lsls	r7, r3, #25
 801b830:	bf48      	it	mi
 801b832:	b2ad      	uxthmi	r5, r5
 801b834:	6031      	str	r1, [r6, #0]
 801b836:	07d9      	lsls	r1, r3, #31
 801b838:	bf44      	itt	mi
 801b83a:	f043 0320 	orrmi.w	r3, r3, #32
 801b83e:	6023      	strmi	r3, [r4, #0]
 801b840:	b11d      	cbz	r5, 801b84a <_printf_i+0x19e>
 801b842:	2310      	movs	r3, #16
 801b844:	e7ac      	b.n	801b7a0 <_printf_i+0xf4>
 801b846:	4827      	ldr	r0, [pc, #156]	@ (801b8e4 <_printf_i+0x238>)
 801b848:	e7e9      	b.n	801b81e <_printf_i+0x172>
 801b84a:	6823      	ldr	r3, [r4, #0]
 801b84c:	f023 0320 	bic.w	r3, r3, #32
 801b850:	6023      	str	r3, [r4, #0]
 801b852:	e7f6      	b.n	801b842 <_printf_i+0x196>
 801b854:	4616      	mov	r6, r2
 801b856:	e7bd      	b.n	801b7d4 <_printf_i+0x128>
 801b858:	6833      	ldr	r3, [r6, #0]
 801b85a:	6825      	ldr	r5, [r4, #0]
 801b85c:	6961      	ldr	r1, [r4, #20]
 801b85e:	1d18      	adds	r0, r3, #4
 801b860:	6030      	str	r0, [r6, #0]
 801b862:	062e      	lsls	r6, r5, #24
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	d501      	bpl.n	801b86c <_printf_i+0x1c0>
 801b868:	6019      	str	r1, [r3, #0]
 801b86a:	e002      	b.n	801b872 <_printf_i+0x1c6>
 801b86c:	0668      	lsls	r0, r5, #25
 801b86e:	d5fb      	bpl.n	801b868 <_printf_i+0x1bc>
 801b870:	8019      	strh	r1, [r3, #0]
 801b872:	2300      	movs	r3, #0
 801b874:	6123      	str	r3, [r4, #16]
 801b876:	4616      	mov	r6, r2
 801b878:	e7bc      	b.n	801b7f4 <_printf_i+0x148>
 801b87a:	6833      	ldr	r3, [r6, #0]
 801b87c:	1d1a      	adds	r2, r3, #4
 801b87e:	6032      	str	r2, [r6, #0]
 801b880:	681e      	ldr	r6, [r3, #0]
 801b882:	6862      	ldr	r2, [r4, #4]
 801b884:	2100      	movs	r1, #0
 801b886:	4630      	mov	r0, r6
 801b888:	f7e4 fcc2 	bl	8000210 <memchr>
 801b88c:	b108      	cbz	r0, 801b892 <_printf_i+0x1e6>
 801b88e:	1b80      	subs	r0, r0, r6
 801b890:	6060      	str	r0, [r4, #4]
 801b892:	6863      	ldr	r3, [r4, #4]
 801b894:	6123      	str	r3, [r4, #16]
 801b896:	2300      	movs	r3, #0
 801b898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b89c:	e7aa      	b.n	801b7f4 <_printf_i+0x148>
 801b89e:	6923      	ldr	r3, [r4, #16]
 801b8a0:	4632      	mov	r2, r6
 801b8a2:	4649      	mov	r1, r9
 801b8a4:	4640      	mov	r0, r8
 801b8a6:	47d0      	blx	sl
 801b8a8:	3001      	adds	r0, #1
 801b8aa:	d0ad      	beq.n	801b808 <_printf_i+0x15c>
 801b8ac:	6823      	ldr	r3, [r4, #0]
 801b8ae:	079b      	lsls	r3, r3, #30
 801b8b0:	d413      	bmi.n	801b8da <_printf_i+0x22e>
 801b8b2:	68e0      	ldr	r0, [r4, #12]
 801b8b4:	9b03      	ldr	r3, [sp, #12]
 801b8b6:	4298      	cmp	r0, r3
 801b8b8:	bfb8      	it	lt
 801b8ba:	4618      	movlt	r0, r3
 801b8bc:	e7a6      	b.n	801b80c <_printf_i+0x160>
 801b8be:	2301      	movs	r3, #1
 801b8c0:	4632      	mov	r2, r6
 801b8c2:	4649      	mov	r1, r9
 801b8c4:	4640      	mov	r0, r8
 801b8c6:	47d0      	blx	sl
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	d09d      	beq.n	801b808 <_printf_i+0x15c>
 801b8cc:	3501      	adds	r5, #1
 801b8ce:	68e3      	ldr	r3, [r4, #12]
 801b8d0:	9903      	ldr	r1, [sp, #12]
 801b8d2:	1a5b      	subs	r3, r3, r1
 801b8d4:	42ab      	cmp	r3, r5
 801b8d6:	dcf2      	bgt.n	801b8be <_printf_i+0x212>
 801b8d8:	e7eb      	b.n	801b8b2 <_printf_i+0x206>
 801b8da:	2500      	movs	r5, #0
 801b8dc:	f104 0619 	add.w	r6, r4, #25
 801b8e0:	e7f5      	b.n	801b8ce <_printf_i+0x222>
 801b8e2:	bf00      	nop
 801b8e4:	0801e142 	.word	0x0801e142
 801b8e8:	0801e153 	.word	0x0801e153

0801b8ec <std>:
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	b510      	push	{r4, lr}
 801b8f0:	4604      	mov	r4, r0
 801b8f2:	e9c0 3300 	strd	r3, r3, [r0]
 801b8f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b8fa:	6083      	str	r3, [r0, #8]
 801b8fc:	8181      	strh	r1, [r0, #12]
 801b8fe:	6643      	str	r3, [r0, #100]	@ 0x64
 801b900:	81c2      	strh	r2, [r0, #14]
 801b902:	6183      	str	r3, [r0, #24]
 801b904:	4619      	mov	r1, r3
 801b906:	2208      	movs	r2, #8
 801b908:	305c      	adds	r0, #92	@ 0x5c
 801b90a:	f000 f928 	bl	801bb5e <memset>
 801b90e:	4b0d      	ldr	r3, [pc, #52]	@ (801b944 <std+0x58>)
 801b910:	6263      	str	r3, [r4, #36]	@ 0x24
 801b912:	4b0d      	ldr	r3, [pc, #52]	@ (801b948 <std+0x5c>)
 801b914:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b916:	4b0d      	ldr	r3, [pc, #52]	@ (801b94c <std+0x60>)
 801b918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b91a:	4b0d      	ldr	r3, [pc, #52]	@ (801b950 <std+0x64>)
 801b91c:	6323      	str	r3, [r4, #48]	@ 0x30
 801b91e:	4b0d      	ldr	r3, [pc, #52]	@ (801b954 <std+0x68>)
 801b920:	6224      	str	r4, [r4, #32]
 801b922:	429c      	cmp	r4, r3
 801b924:	d006      	beq.n	801b934 <std+0x48>
 801b926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b92a:	4294      	cmp	r4, r2
 801b92c:	d002      	beq.n	801b934 <std+0x48>
 801b92e:	33d0      	adds	r3, #208	@ 0xd0
 801b930:	429c      	cmp	r4, r3
 801b932:	d105      	bne.n	801b940 <std+0x54>
 801b934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b93c:	f000 b99c 	b.w	801bc78 <__retarget_lock_init_recursive>
 801b940:	bd10      	pop	{r4, pc}
 801b942:	bf00      	nop
 801b944:	0801bad9 	.word	0x0801bad9
 801b948:	0801bafb 	.word	0x0801bafb
 801b94c:	0801bb33 	.word	0x0801bb33
 801b950:	0801bb57 	.word	0x0801bb57
 801b954:	20001660 	.word	0x20001660

0801b958 <stdio_exit_handler>:
 801b958:	4a02      	ldr	r2, [pc, #8]	@ (801b964 <stdio_exit_handler+0xc>)
 801b95a:	4903      	ldr	r1, [pc, #12]	@ (801b968 <stdio_exit_handler+0x10>)
 801b95c:	4803      	ldr	r0, [pc, #12]	@ (801b96c <stdio_exit_handler+0x14>)
 801b95e:	f000 b869 	b.w	801ba34 <_fwalk_sglue>
 801b962:	bf00      	nop
 801b964:	20000030 	.word	0x20000030
 801b968:	0801d489 	.word	0x0801d489
 801b96c:	20000040 	.word	0x20000040

0801b970 <cleanup_stdio>:
 801b970:	6841      	ldr	r1, [r0, #4]
 801b972:	4b0c      	ldr	r3, [pc, #48]	@ (801b9a4 <cleanup_stdio+0x34>)
 801b974:	4299      	cmp	r1, r3
 801b976:	b510      	push	{r4, lr}
 801b978:	4604      	mov	r4, r0
 801b97a:	d001      	beq.n	801b980 <cleanup_stdio+0x10>
 801b97c:	f001 fd84 	bl	801d488 <_fflush_r>
 801b980:	68a1      	ldr	r1, [r4, #8]
 801b982:	4b09      	ldr	r3, [pc, #36]	@ (801b9a8 <cleanup_stdio+0x38>)
 801b984:	4299      	cmp	r1, r3
 801b986:	d002      	beq.n	801b98e <cleanup_stdio+0x1e>
 801b988:	4620      	mov	r0, r4
 801b98a:	f001 fd7d 	bl	801d488 <_fflush_r>
 801b98e:	68e1      	ldr	r1, [r4, #12]
 801b990:	4b06      	ldr	r3, [pc, #24]	@ (801b9ac <cleanup_stdio+0x3c>)
 801b992:	4299      	cmp	r1, r3
 801b994:	d004      	beq.n	801b9a0 <cleanup_stdio+0x30>
 801b996:	4620      	mov	r0, r4
 801b998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b99c:	f001 bd74 	b.w	801d488 <_fflush_r>
 801b9a0:	bd10      	pop	{r4, pc}
 801b9a2:	bf00      	nop
 801b9a4:	20001660 	.word	0x20001660
 801b9a8:	200016c8 	.word	0x200016c8
 801b9ac:	20001730 	.word	0x20001730

0801b9b0 <global_stdio_init.part.0>:
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	4b0b      	ldr	r3, [pc, #44]	@ (801b9e0 <global_stdio_init.part.0+0x30>)
 801b9b4:	4c0b      	ldr	r4, [pc, #44]	@ (801b9e4 <global_stdio_init.part.0+0x34>)
 801b9b6:	4a0c      	ldr	r2, [pc, #48]	@ (801b9e8 <global_stdio_init.part.0+0x38>)
 801b9b8:	601a      	str	r2, [r3, #0]
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	2200      	movs	r2, #0
 801b9be:	2104      	movs	r1, #4
 801b9c0:	f7ff ff94 	bl	801b8ec <std>
 801b9c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b9c8:	2201      	movs	r2, #1
 801b9ca:	2109      	movs	r1, #9
 801b9cc:	f7ff ff8e 	bl	801b8ec <std>
 801b9d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b9d4:	2202      	movs	r2, #2
 801b9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9da:	2112      	movs	r1, #18
 801b9dc:	f7ff bf86 	b.w	801b8ec <std>
 801b9e0:	20001798 	.word	0x20001798
 801b9e4:	20001660 	.word	0x20001660
 801b9e8:	0801b959 	.word	0x0801b959

0801b9ec <__sfp_lock_acquire>:
 801b9ec:	4801      	ldr	r0, [pc, #4]	@ (801b9f4 <__sfp_lock_acquire+0x8>)
 801b9ee:	f000 b944 	b.w	801bc7a <__retarget_lock_acquire_recursive>
 801b9f2:	bf00      	nop
 801b9f4:	200017a1 	.word	0x200017a1

0801b9f8 <__sfp_lock_release>:
 801b9f8:	4801      	ldr	r0, [pc, #4]	@ (801ba00 <__sfp_lock_release+0x8>)
 801b9fa:	f000 b93f 	b.w	801bc7c <__retarget_lock_release_recursive>
 801b9fe:	bf00      	nop
 801ba00:	200017a1 	.word	0x200017a1

0801ba04 <__sinit>:
 801ba04:	b510      	push	{r4, lr}
 801ba06:	4604      	mov	r4, r0
 801ba08:	f7ff fff0 	bl	801b9ec <__sfp_lock_acquire>
 801ba0c:	6a23      	ldr	r3, [r4, #32]
 801ba0e:	b11b      	cbz	r3, 801ba18 <__sinit+0x14>
 801ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba14:	f7ff bff0 	b.w	801b9f8 <__sfp_lock_release>
 801ba18:	4b04      	ldr	r3, [pc, #16]	@ (801ba2c <__sinit+0x28>)
 801ba1a:	6223      	str	r3, [r4, #32]
 801ba1c:	4b04      	ldr	r3, [pc, #16]	@ (801ba30 <__sinit+0x2c>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d1f5      	bne.n	801ba10 <__sinit+0xc>
 801ba24:	f7ff ffc4 	bl	801b9b0 <global_stdio_init.part.0>
 801ba28:	e7f2      	b.n	801ba10 <__sinit+0xc>
 801ba2a:	bf00      	nop
 801ba2c:	0801b971 	.word	0x0801b971
 801ba30:	20001798 	.word	0x20001798

0801ba34 <_fwalk_sglue>:
 801ba34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba38:	4607      	mov	r7, r0
 801ba3a:	4688      	mov	r8, r1
 801ba3c:	4614      	mov	r4, r2
 801ba3e:	2600      	movs	r6, #0
 801ba40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ba44:	f1b9 0901 	subs.w	r9, r9, #1
 801ba48:	d505      	bpl.n	801ba56 <_fwalk_sglue+0x22>
 801ba4a:	6824      	ldr	r4, [r4, #0]
 801ba4c:	2c00      	cmp	r4, #0
 801ba4e:	d1f7      	bne.n	801ba40 <_fwalk_sglue+0xc>
 801ba50:	4630      	mov	r0, r6
 801ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba56:	89ab      	ldrh	r3, [r5, #12]
 801ba58:	2b01      	cmp	r3, #1
 801ba5a:	d907      	bls.n	801ba6c <_fwalk_sglue+0x38>
 801ba5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ba60:	3301      	adds	r3, #1
 801ba62:	d003      	beq.n	801ba6c <_fwalk_sglue+0x38>
 801ba64:	4629      	mov	r1, r5
 801ba66:	4638      	mov	r0, r7
 801ba68:	47c0      	blx	r8
 801ba6a:	4306      	orrs	r6, r0
 801ba6c:	3568      	adds	r5, #104	@ 0x68
 801ba6e:	e7e9      	b.n	801ba44 <_fwalk_sglue+0x10>

0801ba70 <sniprintf>:
 801ba70:	b40c      	push	{r2, r3}
 801ba72:	b530      	push	{r4, r5, lr}
 801ba74:	4b17      	ldr	r3, [pc, #92]	@ (801bad4 <sniprintf+0x64>)
 801ba76:	1e0c      	subs	r4, r1, #0
 801ba78:	681d      	ldr	r5, [r3, #0]
 801ba7a:	b09d      	sub	sp, #116	@ 0x74
 801ba7c:	da08      	bge.n	801ba90 <sniprintf+0x20>
 801ba7e:	238b      	movs	r3, #139	@ 0x8b
 801ba80:	602b      	str	r3, [r5, #0]
 801ba82:	f04f 30ff 	mov.w	r0, #4294967295
 801ba86:	b01d      	add	sp, #116	@ 0x74
 801ba88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba8c:	b002      	add	sp, #8
 801ba8e:	4770      	bx	lr
 801ba90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ba94:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba98:	bf14      	ite	ne
 801ba9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ba9e:	4623      	moveq	r3, r4
 801baa0:	9304      	str	r3, [sp, #16]
 801baa2:	9307      	str	r3, [sp, #28]
 801baa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801baa8:	9002      	str	r0, [sp, #8]
 801baaa:	9006      	str	r0, [sp, #24]
 801baac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bab2:	ab21      	add	r3, sp, #132	@ 0x84
 801bab4:	a902      	add	r1, sp, #8
 801bab6:	4628      	mov	r0, r5
 801bab8:	9301      	str	r3, [sp, #4]
 801baba:	f001 fb65 	bl	801d188 <_svfiprintf_r>
 801babe:	1c43      	adds	r3, r0, #1
 801bac0:	bfbc      	itt	lt
 801bac2:	238b      	movlt	r3, #139	@ 0x8b
 801bac4:	602b      	strlt	r3, [r5, #0]
 801bac6:	2c00      	cmp	r4, #0
 801bac8:	d0dd      	beq.n	801ba86 <sniprintf+0x16>
 801baca:	9b02      	ldr	r3, [sp, #8]
 801bacc:	2200      	movs	r2, #0
 801bace:	701a      	strb	r2, [r3, #0]
 801bad0:	e7d9      	b.n	801ba86 <sniprintf+0x16>
 801bad2:	bf00      	nop
 801bad4:	2000003c 	.word	0x2000003c

0801bad8 <__sread>:
 801bad8:	b510      	push	{r4, lr}
 801bada:	460c      	mov	r4, r1
 801badc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bae0:	f000 f86c 	bl	801bbbc <_read_r>
 801bae4:	2800      	cmp	r0, #0
 801bae6:	bfab      	itete	ge
 801bae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801baea:	89a3      	ldrhlt	r3, [r4, #12]
 801baec:	181b      	addge	r3, r3, r0
 801baee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801baf2:	bfac      	ite	ge
 801baf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801baf6:	81a3      	strhlt	r3, [r4, #12]
 801baf8:	bd10      	pop	{r4, pc}

0801bafa <__swrite>:
 801bafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bafe:	461f      	mov	r7, r3
 801bb00:	898b      	ldrh	r3, [r1, #12]
 801bb02:	05db      	lsls	r3, r3, #23
 801bb04:	4605      	mov	r5, r0
 801bb06:	460c      	mov	r4, r1
 801bb08:	4616      	mov	r6, r2
 801bb0a:	d505      	bpl.n	801bb18 <__swrite+0x1e>
 801bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb10:	2302      	movs	r3, #2
 801bb12:	2200      	movs	r2, #0
 801bb14:	f000 f840 	bl	801bb98 <_lseek_r>
 801bb18:	89a3      	ldrh	r3, [r4, #12]
 801bb1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bb22:	81a3      	strh	r3, [r4, #12]
 801bb24:	4632      	mov	r2, r6
 801bb26:	463b      	mov	r3, r7
 801bb28:	4628      	mov	r0, r5
 801bb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb2e:	f000 b867 	b.w	801bc00 <_write_r>

0801bb32 <__sseek>:
 801bb32:	b510      	push	{r4, lr}
 801bb34:	460c      	mov	r4, r1
 801bb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb3a:	f000 f82d 	bl	801bb98 <_lseek_r>
 801bb3e:	1c43      	adds	r3, r0, #1
 801bb40:	89a3      	ldrh	r3, [r4, #12]
 801bb42:	bf15      	itete	ne
 801bb44:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bb46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bb4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bb4e:	81a3      	strheq	r3, [r4, #12]
 801bb50:	bf18      	it	ne
 801bb52:	81a3      	strhne	r3, [r4, #12]
 801bb54:	bd10      	pop	{r4, pc}

0801bb56 <__sclose>:
 801bb56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb5a:	f000 b80d 	b.w	801bb78 <_close_r>

0801bb5e <memset>:
 801bb5e:	4402      	add	r2, r0
 801bb60:	4603      	mov	r3, r0
 801bb62:	4293      	cmp	r3, r2
 801bb64:	d100      	bne.n	801bb68 <memset+0xa>
 801bb66:	4770      	bx	lr
 801bb68:	f803 1b01 	strb.w	r1, [r3], #1
 801bb6c:	e7f9      	b.n	801bb62 <memset+0x4>
	...

0801bb70 <_localeconv_r>:
 801bb70:	4800      	ldr	r0, [pc, #0]	@ (801bb74 <_localeconv_r+0x4>)
 801bb72:	4770      	bx	lr
 801bb74:	2000017c 	.word	0x2000017c

0801bb78 <_close_r>:
 801bb78:	b538      	push	{r3, r4, r5, lr}
 801bb7a:	4d06      	ldr	r5, [pc, #24]	@ (801bb94 <_close_r+0x1c>)
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	4604      	mov	r4, r0
 801bb80:	4608      	mov	r0, r1
 801bb82:	602b      	str	r3, [r5, #0]
 801bb84:	f7e8 fb66 	bl	8004254 <_close>
 801bb88:	1c43      	adds	r3, r0, #1
 801bb8a:	d102      	bne.n	801bb92 <_close_r+0x1a>
 801bb8c:	682b      	ldr	r3, [r5, #0]
 801bb8e:	b103      	cbz	r3, 801bb92 <_close_r+0x1a>
 801bb90:	6023      	str	r3, [r4, #0]
 801bb92:	bd38      	pop	{r3, r4, r5, pc}
 801bb94:	2000179c 	.word	0x2000179c

0801bb98 <_lseek_r>:
 801bb98:	b538      	push	{r3, r4, r5, lr}
 801bb9a:	4d07      	ldr	r5, [pc, #28]	@ (801bbb8 <_lseek_r+0x20>)
 801bb9c:	4604      	mov	r4, r0
 801bb9e:	4608      	mov	r0, r1
 801bba0:	4611      	mov	r1, r2
 801bba2:	2200      	movs	r2, #0
 801bba4:	602a      	str	r2, [r5, #0]
 801bba6:	461a      	mov	r2, r3
 801bba8:	f7e8 fb7b 	bl	80042a2 <_lseek>
 801bbac:	1c43      	adds	r3, r0, #1
 801bbae:	d102      	bne.n	801bbb6 <_lseek_r+0x1e>
 801bbb0:	682b      	ldr	r3, [r5, #0]
 801bbb2:	b103      	cbz	r3, 801bbb6 <_lseek_r+0x1e>
 801bbb4:	6023      	str	r3, [r4, #0]
 801bbb6:	bd38      	pop	{r3, r4, r5, pc}
 801bbb8:	2000179c 	.word	0x2000179c

0801bbbc <_read_r>:
 801bbbc:	b538      	push	{r3, r4, r5, lr}
 801bbbe:	4d07      	ldr	r5, [pc, #28]	@ (801bbdc <_read_r+0x20>)
 801bbc0:	4604      	mov	r4, r0
 801bbc2:	4608      	mov	r0, r1
 801bbc4:	4611      	mov	r1, r2
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	602a      	str	r2, [r5, #0]
 801bbca:	461a      	mov	r2, r3
 801bbcc:	f7e8 fb09 	bl	80041e2 <_read>
 801bbd0:	1c43      	adds	r3, r0, #1
 801bbd2:	d102      	bne.n	801bbda <_read_r+0x1e>
 801bbd4:	682b      	ldr	r3, [r5, #0]
 801bbd6:	b103      	cbz	r3, 801bbda <_read_r+0x1e>
 801bbd8:	6023      	str	r3, [r4, #0]
 801bbda:	bd38      	pop	{r3, r4, r5, pc}
 801bbdc:	2000179c 	.word	0x2000179c

0801bbe0 <_sbrk_r>:
 801bbe0:	b538      	push	{r3, r4, r5, lr}
 801bbe2:	4d06      	ldr	r5, [pc, #24]	@ (801bbfc <_sbrk_r+0x1c>)
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	4604      	mov	r4, r0
 801bbe8:	4608      	mov	r0, r1
 801bbea:	602b      	str	r3, [r5, #0]
 801bbec:	f7e8 fb66 	bl	80042bc <_sbrk>
 801bbf0:	1c43      	adds	r3, r0, #1
 801bbf2:	d102      	bne.n	801bbfa <_sbrk_r+0x1a>
 801bbf4:	682b      	ldr	r3, [r5, #0]
 801bbf6:	b103      	cbz	r3, 801bbfa <_sbrk_r+0x1a>
 801bbf8:	6023      	str	r3, [r4, #0]
 801bbfa:	bd38      	pop	{r3, r4, r5, pc}
 801bbfc:	2000179c 	.word	0x2000179c

0801bc00 <_write_r>:
 801bc00:	b538      	push	{r3, r4, r5, lr}
 801bc02:	4d07      	ldr	r5, [pc, #28]	@ (801bc20 <_write_r+0x20>)
 801bc04:	4604      	mov	r4, r0
 801bc06:	4608      	mov	r0, r1
 801bc08:	4611      	mov	r1, r2
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	602a      	str	r2, [r5, #0]
 801bc0e:	461a      	mov	r2, r3
 801bc10:	f7e8 fb04 	bl	800421c <_write>
 801bc14:	1c43      	adds	r3, r0, #1
 801bc16:	d102      	bne.n	801bc1e <_write_r+0x1e>
 801bc18:	682b      	ldr	r3, [r5, #0]
 801bc1a:	b103      	cbz	r3, 801bc1e <_write_r+0x1e>
 801bc1c:	6023      	str	r3, [r4, #0]
 801bc1e:	bd38      	pop	{r3, r4, r5, pc}
 801bc20:	2000179c 	.word	0x2000179c

0801bc24 <__errno>:
 801bc24:	4b01      	ldr	r3, [pc, #4]	@ (801bc2c <__errno+0x8>)
 801bc26:	6818      	ldr	r0, [r3, #0]
 801bc28:	4770      	bx	lr
 801bc2a:	bf00      	nop
 801bc2c:	2000003c 	.word	0x2000003c

0801bc30 <__libc_init_array>:
 801bc30:	b570      	push	{r4, r5, r6, lr}
 801bc32:	4d0d      	ldr	r5, [pc, #52]	@ (801bc68 <__libc_init_array+0x38>)
 801bc34:	4c0d      	ldr	r4, [pc, #52]	@ (801bc6c <__libc_init_array+0x3c>)
 801bc36:	1b64      	subs	r4, r4, r5
 801bc38:	10a4      	asrs	r4, r4, #2
 801bc3a:	2600      	movs	r6, #0
 801bc3c:	42a6      	cmp	r6, r4
 801bc3e:	d109      	bne.n	801bc54 <__libc_init_array+0x24>
 801bc40:	4d0b      	ldr	r5, [pc, #44]	@ (801bc70 <__libc_init_array+0x40>)
 801bc42:	4c0c      	ldr	r4, [pc, #48]	@ (801bc74 <__libc_init_array+0x44>)
 801bc44:	f001 ffa0 	bl	801db88 <_init>
 801bc48:	1b64      	subs	r4, r4, r5
 801bc4a:	10a4      	asrs	r4, r4, #2
 801bc4c:	2600      	movs	r6, #0
 801bc4e:	42a6      	cmp	r6, r4
 801bc50:	d105      	bne.n	801bc5e <__libc_init_array+0x2e>
 801bc52:	bd70      	pop	{r4, r5, r6, pc}
 801bc54:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc58:	4798      	blx	r3
 801bc5a:	3601      	adds	r6, #1
 801bc5c:	e7ee      	b.n	801bc3c <__libc_init_array+0xc>
 801bc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc62:	4798      	blx	r3
 801bc64:	3601      	adds	r6, #1
 801bc66:	e7f2      	b.n	801bc4e <__libc_init_array+0x1e>
 801bc68:	0801e4a8 	.word	0x0801e4a8
 801bc6c:	0801e4a8 	.word	0x0801e4a8
 801bc70:	0801e4a8 	.word	0x0801e4a8
 801bc74:	0801e4b0 	.word	0x0801e4b0

0801bc78 <__retarget_lock_init_recursive>:
 801bc78:	4770      	bx	lr

0801bc7a <__retarget_lock_acquire_recursive>:
 801bc7a:	4770      	bx	lr

0801bc7c <__retarget_lock_release_recursive>:
 801bc7c:	4770      	bx	lr

0801bc7e <memcpy>:
 801bc7e:	440a      	add	r2, r1
 801bc80:	4291      	cmp	r1, r2
 801bc82:	f100 33ff 	add.w	r3, r0, #4294967295
 801bc86:	d100      	bne.n	801bc8a <memcpy+0xc>
 801bc88:	4770      	bx	lr
 801bc8a:	b510      	push	{r4, lr}
 801bc8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc90:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bc94:	4291      	cmp	r1, r2
 801bc96:	d1f9      	bne.n	801bc8c <memcpy+0xe>
 801bc98:	bd10      	pop	{r4, pc}

0801bc9a <quorem>:
 801bc9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc9e:	6903      	ldr	r3, [r0, #16]
 801bca0:	690c      	ldr	r4, [r1, #16]
 801bca2:	42a3      	cmp	r3, r4
 801bca4:	4607      	mov	r7, r0
 801bca6:	db7e      	blt.n	801bda6 <quorem+0x10c>
 801bca8:	3c01      	subs	r4, #1
 801bcaa:	f101 0814 	add.w	r8, r1, #20
 801bcae:	00a3      	lsls	r3, r4, #2
 801bcb0:	f100 0514 	add.w	r5, r0, #20
 801bcb4:	9300      	str	r3, [sp, #0]
 801bcb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bcba:	9301      	str	r3, [sp, #4]
 801bcbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bcc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bccc:	fbb2 f6f3 	udiv	r6, r2, r3
 801bcd0:	d32e      	bcc.n	801bd30 <quorem+0x96>
 801bcd2:	f04f 0a00 	mov.w	sl, #0
 801bcd6:	46c4      	mov	ip, r8
 801bcd8:	46ae      	mov	lr, r5
 801bcda:	46d3      	mov	fp, sl
 801bcdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bce0:	b298      	uxth	r0, r3
 801bce2:	fb06 a000 	mla	r0, r6, r0, sl
 801bce6:	0c02      	lsrs	r2, r0, #16
 801bce8:	0c1b      	lsrs	r3, r3, #16
 801bcea:	fb06 2303 	mla	r3, r6, r3, r2
 801bcee:	f8de 2000 	ldr.w	r2, [lr]
 801bcf2:	b280      	uxth	r0, r0
 801bcf4:	b292      	uxth	r2, r2
 801bcf6:	1a12      	subs	r2, r2, r0
 801bcf8:	445a      	add	r2, fp
 801bcfa:	f8de 0000 	ldr.w	r0, [lr]
 801bcfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bd02:	b29b      	uxth	r3, r3
 801bd04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801bd08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801bd0c:	b292      	uxth	r2, r2
 801bd0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801bd12:	45e1      	cmp	r9, ip
 801bd14:	f84e 2b04 	str.w	r2, [lr], #4
 801bd18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801bd1c:	d2de      	bcs.n	801bcdc <quorem+0x42>
 801bd1e:	9b00      	ldr	r3, [sp, #0]
 801bd20:	58eb      	ldr	r3, [r5, r3]
 801bd22:	b92b      	cbnz	r3, 801bd30 <quorem+0x96>
 801bd24:	9b01      	ldr	r3, [sp, #4]
 801bd26:	3b04      	subs	r3, #4
 801bd28:	429d      	cmp	r5, r3
 801bd2a:	461a      	mov	r2, r3
 801bd2c:	d32f      	bcc.n	801bd8e <quorem+0xf4>
 801bd2e:	613c      	str	r4, [r7, #16]
 801bd30:	4638      	mov	r0, r7
 801bd32:	f001 f8c5 	bl	801cec0 <__mcmp>
 801bd36:	2800      	cmp	r0, #0
 801bd38:	db25      	blt.n	801bd86 <quorem+0xec>
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	2000      	movs	r0, #0
 801bd3e:	f858 2b04 	ldr.w	r2, [r8], #4
 801bd42:	f8d1 c000 	ldr.w	ip, [r1]
 801bd46:	fa1f fe82 	uxth.w	lr, r2
 801bd4a:	fa1f f38c 	uxth.w	r3, ip
 801bd4e:	eba3 030e 	sub.w	r3, r3, lr
 801bd52:	4403      	add	r3, r0
 801bd54:	0c12      	lsrs	r2, r2, #16
 801bd56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801bd5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bd64:	45c1      	cmp	r9, r8
 801bd66:	f841 3b04 	str.w	r3, [r1], #4
 801bd6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bd6e:	d2e6      	bcs.n	801bd3e <quorem+0xa4>
 801bd70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bd74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bd78:	b922      	cbnz	r2, 801bd84 <quorem+0xea>
 801bd7a:	3b04      	subs	r3, #4
 801bd7c:	429d      	cmp	r5, r3
 801bd7e:	461a      	mov	r2, r3
 801bd80:	d30b      	bcc.n	801bd9a <quorem+0x100>
 801bd82:	613c      	str	r4, [r7, #16]
 801bd84:	3601      	adds	r6, #1
 801bd86:	4630      	mov	r0, r6
 801bd88:	b003      	add	sp, #12
 801bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd8e:	6812      	ldr	r2, [r2, #0]
 801bd90:	3b04      	subs	r3, #4
 801bd92:	2a00      	cmp	r2, #0
 801bd94:	d1cb      	bne.n	801bd2e <quorem+0x94>
 801bd96:	3c01      	subs	r4, #1
 801bd98:	e7c6      	b.n	801bd28 <quorem+0x8e>
 801bd9a:	6812      	ldr	r2, [r2, #0]
 801bd9c:	3b04      	subs	r3, #4
 801bd9e:	2a00      	cmp	r2, #0
 801bda0:	d1ef      	bne.n	801bd82 <quorem+0xe8>
 801bda2:	3c01      	subs	r4, #1
 801bda4:	e7ea      	b.n	801bd7c <quorem+0xe2>
 801bda6:	2000      	movs	r0, #0
 801bda8:	e7ee      	b.n	801bd88 <quorem+0xee>
 801bdaa:	0000      	movs	r0, r0
 801bdac:	0000      	movs	r0, r0
	...

0801bdb0 <_dtoa_r>:
 801bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdb4:	69c7      	ldr	r7, [r0, #28]
 801bdb6:	b099      	sub	sp, #100	@ 0x64
 801bdb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bdbc:	ec55 4b10 	vmov	r4, r5, d0
 801bdc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801bdc2:	9109      	str	r1, [sp, #36]	@ 0x24
 801bdc4:	4683      	mov	fp, r0
 801bdc6:	920e      	str	r2, [sp, #56]	@ 0x38
 801bdc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bdca:	b97f      	cbnz	r7, 801bdec <_dtoa_r+0x3c>
 801bdcc:	2010      	movs	r0, #16
 801bdce:	f7ff f877 	bl	801aec0 <malloc>
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	f8cb 001c 	str.w	r0, [fp, #28]
 801bdd8:	b920      	cbnz	r0, 801bde4 <_dtoa_r+0x34>
 801bdda:	4ba7      	ldr	r3, [pc, #668]	@ (801c078 <_dtoa_r+0x2c8>)
 801bddc:	21ef      	movs	r1, #239	@ 0xef
 801bdde:	48a7      	ldr	r0, [pc, #668]	@ (801c07c <_dtoa_r+0x2cc>)
 801bde0:	f001 fb94 	bl	801d50c <__assert_func>
 801bde4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801bde8:	6007      	str	r7, [r0, #0]
 801bdea:	60c7      	str	r7, [r0, #12]
 801bdec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bdf0:	6819      	ldr	r1, [r3, #0]
 801bdf2:	b159      	cbz	r1, 801be0c <_dtoa_r+0x5c>
 801bdf4:	685a      	ldr	r2, [r3, #4]
 801bdf6:	604a      	str	r2, [r1, #4]
 801bdf8:	2301      	movs	r3, #1
 801bdfa:	4093      	lsls	r3, r2
 801bdfc:	608b      	str	r3, [r1, #8]
 801bdfe:	4658      	mov	r0, fp
 801be00:	f000 fe24 	bl	801ca4c <_Bfree>
 801be04:	f8db 301c 	ldr.w	r3, [fp, #28]
 801be08:	2200      	movs	r2, #0
 801be0a:	601a      	str	r2, [r3, #0]
 801be0c:	1e2b      	subs	r3, r5, #0
 801be0e:	bfb9      	ittee	lt
 801be10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801be14:	9303      	strlt	r3, [sp, #12]
 801be16:	2300      	movge	r3, #0
 801be18:	6033      	strge	r3, [r6, #0]
 801be1a:	9f03      	ldr	r7, [sp, #12]
 801be1c:	4b98      	ldr	r3, [pc, #608]	@ (801c080 <_dtoa_r+0x2d0>)
 801be1e:	bfbc      	itt	lt
 801be20:	2201      	movlt	r2, #1
 801be22:	6032      	strlt	r2, [r6, #0]
 801be24:	43bb      	bics	r3, r7
 801be26:	d112      	bne.n	801be4e <_dtoa_r+0x9e>
 801be28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801be2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801be2e:	6013      	str	r3, [r2, #0]
 801be30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801be34:	4323      	orrs	r3, r4
 801be36:	f000 854d 	beq.w	801c8d4 <_dtoa_r+0xb24>
 801be3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801be3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801c094 <_dtoa_r+0x2e4>
 801be40:	2b00      	cmp	r3, #0
 801be42:	f000 854f 	beq.w	801c8e4 <_dtoa_r+0xb34>
 801be46:	f10a 0303 	add.w	r3, sl, #3
 801be4a:	f000 bd49 	b.w	801c8e0 <_dtoa_r+0xb30>
 801be4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801be52:	2200      	movs	r2, #0
 801be54:	ec51 0b17 	vmov	r0, r1, d7
 801be58:	2300      	movs	r3, #0
 801be5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801be5e:	f7e4 fe53 	bl	8000b08 <__aeabi_dcmpeq>
 801be62:	4680      	mov	r8, r0
 801be64:	b158      	cbz	r0, 801be7e <_dtoa_r+0xce>
 801be66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801be68:	2301      	movs	r3, #1
 801be6a:	6013      	str	r3, [r2, #0]
 801be6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801be6e:	b113      	cbz	r3, 801be76 <_dtoa_r+0xc6>
 801be70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801be72:	4b84      	ldr	r3, [pc, #528]	@ (801c084 <_dtoa_r+0x2d4>)
 801be74:	6013      	str	r3, [r2, #0]
 801be76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801c098 <_dtoa_r+0x2e8>
 801be7a:	f000 bd33 	b.w	801c8e4 <_dtoa_r+0xb34>
 801be7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801be82:	aa16      	add	r2, sp, #88	@ 0x58
 801be84:	a917      	add	r1, sp, #92	@ 0x5c
 801be86:	4658      	mov	r0, fp
 801be88:	f001 f8ca 	bl	801d020 <__d2b>
 801be8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801be90:	4681      	mov	r9, r0
 801be92:	2e00      	cmp	r6, #0
 801be94:	d077      	beq.n	801bf86 <_dtoa_r+0x1d6>
 801be96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801be98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801be9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801beac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801beb0:	4619      	mov	r1, r3
 801beb2:	2200      	movs	r2, #0
 801beb4:	4b74      	ldr	r3, [pc, #464]	@ (801c088 <_dtoa_r+0x2d8>)
 801beb6:	f7e4 fa07 	bl	80002c8 <__aeabi_dsub>
 801beba:	a369      	add	r3, pc, #420	@ (adr r3, 801c060 <_dtoa_r+0x2b0>)
 801bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec0:	f7e4 fbba 	bl	8000638 <__aeabi_dmul>
 801bec4:	a368      	add	r3, pc, #416	@ (adr r3, 801c068 <_dtoa_r+0x2b8>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f9ff 	bl	80002cc <__adddf3>
 801bece:	4604      	mov	r4, r0
 801bed0:	4630      	mov	r0, r6
 801bed2:	460d      	mov	r5, r1
 801bed4:	f7e4 fb46 	bl	8000564 <__aeabi_i2d>
 801bed8:	a365      	add	r3, pc, #404	@ (adr r3, 801c070 <_dtoa_r+0x2c0>)
 801beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bede:	f7e4 fbab 	bl	8000638 <__aeabi_dmul>
 801bee2:	4602      	mov	r2, r0
 801bee4:	460b      	mov	r3, r1
 801bee6:	4620      	mov	r0, r4
 801bee8:	4629      	mov	r1, r5
 801beea:	f7e4 f9ef 	bl	80002cc <__adddf3>
 801beee:	4604      	mov	r4, r0
 801bef0:	460d      	mov	r5, r1
 801bef2:	f7e4 fe51 	bl	8000b98 <__aeabi_d2iz>
 801bef6:	2200      	movs	r2, #0
 801bef8:	4607      	mov	r7, r0
 801befa:	2300      	movs	r3, #0
 801befc:	4620      	mov	r0, r4
 801befe:	4629      	mov	r1, r5
 801bf00:	f7e4 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 801bf04:	b140      	cbz	r0, 801bf18 <_dtoa_r+0x168>
 801bf06:	4638      	mov	r0, r7
 801bf08:	f7e4 fb2c 	bl	8000564 <__aeabi_i2d>
 801bf0c:	4622      	mov	r2, r4
 801bf0e:	462b      	mov	r3, r5
 801bf10:	f7e4 fdfa 	bl	8000b08 <__aeabi_dcmpeq>
 801bf14:	b900      	cbnz	r0, 801bf18 <_dtoa_r+0x168>
 801bf16:	3f01      	subs	r7, #1
 801bf18:	2f16      	cmp	r7, #22
 801bf1a:	d851      	bhi.n	801bfc0 <_dtoa_r+0x210>
 801bf1c:	4b5b      	ldr	r3, [pc, #364]	@ (801c08c <_dtoa_r+0x2dc>)
 801bf1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bf2a:	f7e4 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 801bf2e:	2800      	cmp	r0, #0
 801bf30:	d048      	beq.n	801bfc4 <_dtoa_r+0x214>
 801bf32:	3f01      	subs	r7, #1
 801bf34:	2300      	movs	r3, #0
 801bf36:	9312      	str	r3, [sp, #72]	@ 0x48
 801bf38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf3a:	1b9b      	subs	r3, r3, r6
 801bf3c:	1e5a      	subs	r2, r3, #1
 801bf3e:	bf44      	itt	mi
 801bf40:	f1c3 0801 	rsbmi	r8, r3, #1
 801bf44:	2300      	movmi	r3, #0
 801bf46:	9208      	str	r2, [sp, #32]
 801bf48:	bf54      	ite	pl
 801bf4a:	f04f 0800 	movpl.w	r8, #0
 801bf4e:	9308      	strmi	r3, [sp, #32]
 801bf50:	2f00      	cmp	r7, #0
 801bf52:	db39      	blt.n	801bfc8 <_dtoa_r+0x218>
 801bf54:	9b08      	ldr	r3, [sp, #32]
 801bf56:	970f      	str	r7, [sp, #60]	@ 0x3c
 801bf58:	443b      	add	r3, r7
 801bf5a:	9308      	str	r3, [sp, #32]
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf62:	2b09      	cmp	r3, #9
 801bf64:	d864      	bhi.n	801c030 <_dtoa_r+0x280>
 801bf66:	2b05      	cmp	r3, #5
 801bf68:	bfc4      	itt	gt
 801bf6a:	3b04      	subgt	r3, #4
 801bf6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801bf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf70:	f1a3 0302 	sub.w	r3, r3, #2
 801bf74:	bfcc      	ite	gt
 801bf76:	2400      	movgt	r4, #0
 801bf78:	2401      	movle	r4, #1
 801bf7a:	2b03      	cmp	r3, #3
 801bf7c:	d863      	bhi.n	801c046 <_dtoa_r+0x296>
 801bf7e:	e8df f003 	tbb	[pc, r3]
 801bf82:	372a      	.short	0x372a
 801bf84:	5535      	.short	0x5535
 801bf86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801bf8a:	441e      	add	r6, r3
 801bf8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bf90:	2b20      	cmp	r3, #32
 801bf92:	bfc1      	itttt	gt
 801bf94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bf98:	409f      	lslgt	r7, r3
 801bf9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801bf9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bfa2:	bfd6      	itet	le
 801bfa4:	f1c3 0320 	rsble	r3, r3, #32
 801bfa8:	ea47 0003 	orrgt.w	r0, r7, r3
 801bfac:	fa04 f003 	lslle.w	r0, r4, r3
 801bfb0:	f7e4 fac8 	bl	8000544 <__aeabi_ui2d>
 801bfb4:	2201      	movs	r2, #1
 801bfb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bfba:	3e01      	subs	r6, #1
 801bfbc:	9214      	str	r2, [sp, #80]	@ 0x50
 801bfbe:	e777      	b.n	801beb0 <_dtoa_r+0x100>
 801bfc0:	2301      	movs	r3, #1
 801bfc2:	e7b8      	b.n	801bf36 <_dtoa_r+0x186>
 801bfc4:	9012      	str	r0, [sp, #72]	@ 0x48
 801bfc6:	e7b7      	b.n	801bf38 <_dtoa_r+0x188>
 801bfc8:	427b      	negs	r3, r7
 801bfca:	930a      	str	r3, [sp, #40]	@ 0x28
 801bfcc:	2300      	movs	r3, #0
 801bfce:	eba8 0807 	sub.w	r8, r8, r7
 801bfd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bfd4:	e7c4      	b.n	801bf60 <_dtoa_r+0x1b0>
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bfda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	dc35      	bgt.n	801c04c <_dtoa_r+0x29c>
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	9307      	str	r3, [sp, #28]
 801bfe6:	461a      	mov	r2, r3
 801bfe8:	920e      	str	r2, [sp, #56]	@ 0x38
 801bfea:	e00b      	b.n	801c004 <_dtoa_r+0x254>
 801bfec:	2301      	movs	r3, #1
 801bfee:	e7f3      	b.n	801bfd8 <_dtoa_r+0x228>
 801bff0:	2300      	movs	r3, #0
 801bff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bff6:	18fb      	adds	r3, r7, r3
 801bff8:	9300      	str	r3, [sp, #0]
 801bffa:	3301      	adds	r3, #1
 801bffc:	2b01      	cmp	r3, #1
 801bffe:	9307      	str	r3, [sp, #28]
 801c000:	bfb8      	it	lt
 801c002:	2301      	movlt	r3, #1
 801c004:	f8db 001c 	ldr.w	r0, [fp, #28]
 801c008:	2100      	movs	r1, #0
 801c00a:	2204      	movs	r2, #4
 801c00c:	f102 0514 	add.w	r5, r2, #20
 801c010:	429d      	cmp	r5, r3
 801c012:	d91f      	bls.n	801c054 <_dtoa_r+0x2a4>
 801c014:	6041      	str	r1, [r0, #4]
 801c016:	4658      	mov	r0, fp
 801c018:	f000 fcd8 	bl	801c9cc <_Balloc>
 801c01c:	4682      	mov	sl, r0
 801c01e:	2800      	cmp	r0, #0
 801c020:	d13c      	bne.n	801c09c <_dtoa_r+0x2ec>
 801c022:	4b1b      	ldr	r3, [pc, #108]	@ (801c090 <_dtoa_r+0x2e0>)
 801c024:	4602      	mov	r2, r0
 801c026:	f240 11af 	movw	r1, #431	@ 0x1af
 801c02a:	e6d8      	b.n	801bdde <_dtoa_r+0x2e>
 801c02c:	2301      	movs	r3, #1
 801c02e:	e7e0      	b.n	801bff2 <_dtoa_r+0x242>
 801c030:	2401      	movs	r4, #1
 801c032:	2300      	movs	r3, #0
 801c034:	9309      	str	r3, [sp, #36]	@ 0x24
 801c036:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c038:	f04f 33ff 	mov.w	r3, #4294967295
 801c03c:	9300      	str	r3, [sp, #0]
 801c03e:	9307      	str	r3, [sp, #28]
 801c040:	2200      	movs	r2, #0
 801c042:	2312      	movs	r3, #18
 801c044:	e7d0      	b.n	801bfe8 <_dtoa_r+0x238>
 801c046:	2301      	movs	r3, #1
 801c048:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c04a:	e7f5      	b.n	801c038 <_dtoa_r+0x288>
 801c04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c04e:	9300      	str	r3, [sp, #0]
 801c050:	9307      	str	r3, [sp, #28]
 801c052:	e7d7      	b.n	801c004 <_dtoa_r+0x254>
 801c054:	3101      	adds	r1, #1
 801c056:	0052      	lsls	r2, r2, #1
 801c058:	e7d8      	b.n	801c00c <_dtoa_r+0x25c>
 801c05a:	bf00      	nop
 801c05c:	f3af 8000 	nop.w
 801c060:	636f4361 	.word	0x636f4361
 801c064:	3fd287a7 	.word	0x3fd287a7
 801c068:	8b60c8b3 	.word	0x8b60c8b3
 801c06c:	3fc68a28 	.word	0x3fc68a28
 801c070:	509f79fb 	.word	0x509f79fb
 801c074:	3fd34413 	.word	0x3fd34413
 801c078:	0801e171 	.word	0x0801e171
 801c07c:	0801e188 	.word	0x0801e188
 801c080:	7ff00000 	.word	0x7ff00000
 801c084:	0801e141 	.word	0x0801e141
 801c088:	3ff80000 	.word	0x3ff80000
 801c08c:	0801e280 	.word	0x0801e280
 801c090:	0801e1e0 	.word	0x0801e1e0
 801c094:	0801e16d 	.word	0x0801e16d
 801c098:	0801e140 	.word	0x0801e140
 801c09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c0a0:	6018      	str	r0, [r3, #0]
 801c0a2:	9b07      	ldr	r3, [sp, #28]
 801c0a4:	2b0e      	cmp	r3, #14
 801c0a6:	f200 80a4 	bhi.w	801c1f2 <_dtoa_r+0x442>
 801c0aa:	2c00      	cmp	r4, #0
 801c0ac:	f000 80a1 	beq.w	801c1f2 <_dtoa_r+0x442>
 801c0b0:	2f00      	cmp	r7, #0
 801c0b2:	dd33      	ble.n	801c11c <_dtoa_r+0x36c>
 801c0b4:	4bad      	ldr	r3, [pc, #692]	@ (801c36c <_dtoa_r+0x5bc>)
 801c0b6:	f007 020f 	and.w	r2, r7, #15
 801c0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c0be:	ed93 7b00 	vldr	d7, [r3]
 801c0c2:	05f8      	lsls	r0, r7, #23
 801c0c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c0c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801c0cc:	d516      	bpl.n	801c0fc <_dtoa_r+0x34c>
 801c0ce:	4ba8      	ldr	r3, [pc, #672]	@ (801c370 <_dtoa_r+0x5c0>)
 801c0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c0d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c0d8:	f7e4 fbd8 	bl	800088c <__aeabi_ddiv>
 801c0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c0e0:	f004 040f 	and.w	r4, r4, #15
 801c0e4:	2603      	movs	r6, #3
 801c0e6:	4da2      	ldr	r5, [pc, #648]	@ (801c370 <_dtoa_r+0x5c0>)
 801c0e8:	b954      	cbnz	r4, 801c100 <_dtoa_r+0x350>
 801c0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0f2:	f7e4 fbcb 	bl	800088c <__aeabi_ddiv>
 801c0f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c0fa:	e028      	b.n	801c14e <_dtoa_r+0x39e>
 801c0fc:	2602      	movs	r6, #2
 801c0fe:	e7f2      	b.n	801c0e6 <_dtoa_r+0x336>
 801c100:	07e1      	lsls	r1, r4, #31
 801c102:	d508      	bpl.n	801c116 <_dtoa_r+0x366>
 801c104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c108:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c10c:	f7e4 fa94 	bl	8000638 <__aeabi_dmul>
 801c110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c114:	3601      	adds	r6, #1
 801c116:	1064      	asrs	r4, r4, #1
 801c118:	3508      	adds	r5, #8
 801c11a:	e7e5      	b.n	801c0e8 <_dtoa_r+0x338>
 801c11c:	f000 80d2 	beq.w	801c2c4 <_dtoa_r+0x514>
 801c120:	427c      	negs	r4, r7
 801c122:	4b92      	ldr	r3, [pc, #584]	@ (801c36c <_dtoa_r+0x5bc>)
 801c124:	4d92      	ldr	r5, [pc, #584]	@ (801c370 <_dtoa_r+0x5c0>)
 801c126:	f004 020f 	and.w	r2, r4, #15
 801c12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c136:	f7e4 fa7f 	bl	8000638 <__aeabi_dmul>
 801c13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c13e:	1124      	asrs	r4, r4, #4
 801c140:	2300      	movs	r3, #0
 801c142:	2602      	movs	r6, #2
 801c144:	2c00      	cmp	r4, #0
 801c146:	f040 80b2 	bne.w	801c2ae <_dtoa_r+0x4fe>
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d1d3      	bne.n	801c0f6 <_dtoa_r+0x346>
 801c14e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c154:	2b00      	cmp	r3, #0
 801c156:	f000 80b7 	beq.w	801c2c8 <_dtoa_r+0x518>
 801c15a:	4b86      	ldr	r3, [pc, #536]	@ (801c374 <_dtoa_r+0x5c4>)
 801c15c:	2200      	movs	r2, #0
 801c15e:	4620      	mov	r0, r4
 801c160:	4629      	mov	r1, r5
 801c162:	f7e4 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 801c166:	2800      	cmp	r0, #0
 801c168:	f000 80ae 	beq.w	801c2c8 <_dtoa_r+0x518>
 801c16c:	9b07      	ldr	r3, [sp, #28]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	f000 80aa 	beq.w	801c2c8 <_dtoa_r+0x518>
 801c174:	9b00      	ldr	r3, [sp, #0]
 801c176:	2b00      	cmp	r3, #0
 801c178:	dd37      	ble.n	801c1ea <_dtoa_r+0x43a>
 801c17a:	1e7b      	subs	r3, r7, #1
 801c17c:	9304      	str	r3, [sp, #16]
 801c17e:	4620      	mov	r0, r4
 801c180:	4b7d      	ldr	r3, [pc, #500]	@ (801c378 <_dtoa_r+0x5c8>)
 801c182:	2200      	movs	r2, #0
 801c184:	4629      	mov	r1, r5
 801c186:	f7e4 fa57 	bl	8000638 <__aeabi_dmul>
 801c18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c18e:	9c00      	ldr	r4, [sp, #0]
 801c190:	3601      	adds	r6, #1
 801c192:	4630      	mov	r0, r6
 801c194:	f7e4 f9e6 	bl	8000564 <__aeabi_i2d>
 801c198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c19c:	f7e4 fa4c 	bl	8000638 <__aeabi_dmul>
 801c1a0:	4b76      	ldr	r3, [pc, #472]	@ (801c37c <_dtoa_r+0x5cc>)
 801c1a2:	2200      	movs	r2, #0
 801c1a4:	f7e4 f892 	bl	80002cc <__adddf3>
 801c1a8:	4605      	mov	r5, r0
 801c1aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801c1ae:	2c00      	cmp	r4, #0
 801c1b0:	f040 808d 	bne.w	801c2ce <_dtoa_r+0x51e>
 801c1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1b8:	4b71      	ldr	r3, [pc, #452]	@ (801c380 <_dtoa_r+0x5d0>)
 801c1ba:	2200      	movs	r2, #0
 801c1bc:	f7e4 f884 	bl	80002c8 <__aeabi_dsub>
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	460b      	mov	r3, r1
 801c1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c1c8:	462a      	mov	r2, r5
 801c1ca:	4633      	mov	r3, r6
 801c1cc:	f7e4 fcc4 	bl	8000b58 <__aeabi_dcmpgt>
 801c1d0:	2800      	cmp	r0, #0
 801c1d2:	f040 828b 	bne.w	801c6ec <_dtoa_r+0x93c>
 801c1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1da:	462a      	mov	r2, r5
 801c1dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801c1e0:	f7e4 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 801c1e4:	2800      	cmp	r0, #0
 801c1e6:	f040 8128 	bne.w	801c43a <_dtoa_r+0x68a>
 801c1ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801c1ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c1f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	f2c0 815a 	blt.w	801c4ae <_dtoa_r+0x6fe>
 801c1fa:	2f0e      	cmp	r7, #14
 801c1fc:	f300 8157 	bgt.w	801c4ae <_dtoa_r+0x6fe>
 801c200:	4b5a      	ldr	r3, [pc, #360]	@ (801c36c <_dtoa_r+0x5bc>)
 801c202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c206:	ed93 7b00 	vldr	d7, [r3]
 801c20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	ed8d 7b00 	vstr	d7, [sp]
 801c212:	da03      	bge.n	801c21c <_dtoa_r+0x46c>
 801c214:	9b07      	ldr	r3, [sp, #28]
 801c216:	2b00      	cmp	r3, #0
 801c218:	f340 8101 	ble.w	801c41e <_dtoa_r+0x66e>
 801c21c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c220:	4656      	mov	r6, sl
 801c222:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c226:	4620      	mov	r0, r4
 801c228:	4629      	mov	r1, r5
 801c22a:	f7e4 fb2f 	bl	800088c <__aeabi_ddiv>
 801c22e:	f7e4 fcb3 	bl	8000b98 <__aeabi_d2iz>
 801c232:	4680      	mov	r8, r0
 801c234:	f7e4 f996 	bl	8000564 <__aeabi_i2d>
 801c238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c23c:	f7e4 f9fc 	bl	8000638 <__aeabi_dmul>
 801c240:	4602      	mov	r2, r0
 801c242:	460b      	mov	r3, r1
 801c244:	4620      	mov	r0, r4
 801c246:	4629      	mov	r1, r5
 801c248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c24c:	f7e4 f83c 	bl	80002c8 <__aeabi_dsub>
 801c250:	f806 4b01 	strb.w	r4, [r6], #1
 801c254:	9d07      	ldr	r5, [sp, #28]
 801c256:	eba6 040a 	sub.w	r4, r6, sl
 801c25a:	42a5      	cmp	r5, r4
 801c25c:	4602      	mov	r2, r0
 801c25e:	460b      	mov	r3, r1
 801c260:	f040 8117 	bne.w	801c492 <_dtoa_r+0x6e2>
 801c264:	f7e4 f832 	bl	80002cc <__adddf3>
 801c268:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c26c:	4604      	mov	r4, r0
 801c26e:	460d      	mov	r5, r1
 801c270:	f7e4 fc72 	bl	8000b58 <__aeabi_dcmpgt>
 801c274:	2800      	cmp	r0, #0
 801c276:	f040 80f9 	bne.w	801c46c <_dtoa_r+0x6bc>
 801c27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c27e:	4620      	mov	r0, r4
 801c280:	4629      	mov	r1, r5
 801c282:	f7e4 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 801c286:	b118      	cbz	r0, 801c290 <_dtoa_r+0x4e0>
 801c288:	f018 0f01 	tst.w	r8, #1
 801c28c:	f040 80ee 	bne.w	801c46c <_dtoa_r+0x6bc>
 801c290:	4649      	mov	r1, r9
 801c292:	4658      	mov	r0, fp
 801c294:	f000 fbda 	bl	801ca4c <_Bfree>
 801c298:	2300      	movs	r3, #0
 801c29a:	7033      	strb	r3, [r6, #0]
 801c29c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c29e:	3701      	adds	r7, #1
 801c2a0:	601f      	str	r7, [r3, #0]
 801c2a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	f000 831d 	beq.w	801c8e4 <_dtoa_r+0xb34>
 801c2aa:	601e      	str	r6, [r3, #0]
 801c2ac:	e31a      	b.n	801c8e4 <_dtoa_r+0xb34>
 801c2ae:	07e2      	lsls	r2, r4, #31
 801c2b0:	d505      	bpl.n	801c2be <_dtoa_r+0x50e>
 801c2b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c2b6:	f7e4 f9bf 	bl	8000638 <__aeabi_dmul>
 801c2ba:	3601      	adds	r6, #1
 801c2bc:	2301      	movs	r3, #1
 801c2be:	1064      	asrs	r4, r4, #1
 801c2c0:	3508      	adds	r5, #8
 801c2c2:	e73f      	b.n	801c144 <_dtoa_r+0x394>
 801c2c4:	2602      	movs	r6, #2
 801c2c6:	e742      	b.n	801c14e <_dtoa_r+0x39e>
 801c2c8:	9c07      	ldr	r4, [sp, #28]
 801c2ca:	9704      	str	r7, [sp, #16]
 801c2cc:	e761      	b.n	801c192 <_dtoa_r+0x3e2>
 801c2ce:	4b27      	ldr	r3, [pc, #156]	@ (801c36c <_dtoa_r+0x5bc>)
 801c2d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c2d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c2da:	4454      	add	r4, sl
 801c2dc:	2900      	cmp	r1, #0
 801c2de:	d053      	beq.n	801c388 <_dtoa_r+0x5d8>
 801c2e0:	4928      	ldr	r1, [pc, #160]	@ (801c384 <_dtoa_r+0x5d4>)
 801c2e2:	2000      	movs	r0, #0
 801c2e4:	f7e4 fad2 	bl	800088c <__aeabi_ddiv>
 801c2e8:	4633      	mov	r3, r6
 801c2ea:	462a      	mov	r2, r5
 801c2ec:	f7e3 ffec 	bl	80002c8 <__aeabi_dsub>
 801c2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c2f4:	4656      	mov	r6, sl
 801c2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c2fa:	f7e4 fc4d 	bl	8000b98 <__aeabi_d2iz>
 801c2fe:	4605      	mov	r5, r0
 801c300:	f7e4 f930 	bl	8000564 <__aeabi_i2d>
 801c304:	4602      	mov	r2, r0
 801c306:	460b      	mov	r3, r1
 801c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c30c:	f7e3 ffdc 	bl	80002c8 <__aeabi_dsub>
 801c310:	3530      	adds	r5, #48	@ 0x30
 801c312:	4602      	mov	r2, r0
 801c314:	460b      	mov	r3, r1
 801c316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c31a:	f806 5b01 	strb.w	r5, [r6], #1
 801c31e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c322:	f7e4 fbfb 	bl	8000b1c <__aeabi_dcmplt>
 801c326:	2800      	cmp	r0, #0
 801c328:	d171      	bne.n	801c40e <_dtoa_r+0x65e>
 801c32a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c32e:	4911      	ldr	r1, [pc, #68]	@ (801c374 <_dtoa_r+0x5c4>)
 801c330:	2000      	movs	r0, #0
 801c332:	f7e3 ffc9 	bl	80002c8 <__aeabi_dsub>
 801c336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c33a:	f7e4 fbef 	bl	8000b1c <__aeabi_dcmplt>
 801c33e:	2800      	cmp	r0, #0
 801c340:	f040 8095 	bne.w	801c46e <_dtoa_r+0x6be>
 801c344:	42a6      	cmp	r6, r4
 801c346:	f43f af50 	beq.w	801c1ea <_dtoa_r+0x43a>
 801c34a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c34e:	4b0a      	ldr	r3, [pc, #40]	@ (801c378 <_dtoa_r+0x5c8>)
 801c350:	2200      	movs	r2, #0
 801c352:	f7e4 f971 	bl	8000638 <__aeabi_dmul>
 801c356:	4b08      	ldr	r3, [pc, #32]	@ (801c378 <_dtoa_r+0x5c8>)
 801c358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c35c:	2200      	movs	r2, #0
 801c35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c362:	f7e4 f969 	bl	8000638 <__aeabi_dmul>
 801c366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c36a:	e7c4      	b.n	801c2f6 <_dtoa_r+0x546>
 801c36c:	0801e280 	.word	0x0801e280
 801c370:	0801e258 	.word	0x0801e258
 801c374:	3ff00000 	.word	0x3ff00000
 801c378:	40240000 	.word	0x40240000
 801c37c:	401c0000 	.word	0x401c0000
 801c380:	40140000 	.word	0x40140000
 801c384:	3fe00000 	.word	0x3fe00000
 801c388:	4631      	mov	r1, r6
 801c38a:	4628      	mov	r0, r5
 801c38c:	f7e4 f954 	bl	8000638 <__aeabi_dmul>
 801c390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c394:	9415      	str	r4, [sp, #84]	@ 0x54
 801c396:	4656      	mov	r6, sl
 801c398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c39c:	f7e4 fbfc 	bl	8000b98 <__aeabi_d2iz>
 801c3a0:	4605      	mov	r5, r0
 801c3a2:	f7e4 f8df 	bl	8000564 <__aeabi_i2d>
 801c3a6:	4602      	mov	r2, r0
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3ae:	f7e3 ff8b 	bl	80002c8 <__aeabi_dsub>
 801c3b2:	3530      	adds	r5, #48	@ 0x30
 801c3b4:	f806 5b01 	strb.w	r5, [r6], #1
 801c3b8:	4602      	mov	r2, r0
 801c3ba:	460b      	mov	r3, r1
 801c3bc:	42a6      	cmp	r6, r4
 801c3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c3c2:	f04f 0200 	mov.w	r2, #0
 801c3c6:	d124      	bne.n	801c412 <_dtoa_r+0x662>
 801c3c8:	4bac      	ldr	r3, [pc, #688]	@ (801c67c <_dtoa_r+0x8cc>)
 801c3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c3ce:	f7e3 ff7d 	bl	80002cc <__adddf3>
 801c3d2:	4602      	mov	r2, r0
 801c3d4:	460b      	mov	r3, r1
 801c3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3da:	f7e4 fbbd 	bl	8000b58 <__aeabi_dcmpgt>
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	d145      	bne.n	801c46e <_dtoa_r+0x6be>
 801c3e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c3e6:	49a5      	ldr	r1, [pc, #660]	@ (801c67c <_dtoa_r+0x8cc>)
 801c3e8:	2000      	movs	r0, #0
 801c3ea:	f7e3 ff6d 	bl	80002c8 <__aeabi_dsub>
 801c3ee:	4602      	mov	r2, r0
 801c3f0:	460b      	mov	r3, r1
 801c3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3f6:	f7e4 fb91 	bl	8000b1c <__aeabi_dcmplt>
 801c3fa:	2800      	cmp	r0, #0
 801c3fc:	f43f aef5 	beq.w	801c1ea <_dtoa_r+0x43a>
 801c400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c402:	1e73      	subs	r3, r6, #1
 801c404:	9315      	str	r3, [sp, #84]	@ 0x54
 801c406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c40a:	2b30      	cmp	r3, #48	@ 0x30
 801c40c:	d0f8      	beq.n	801c400 <_dtoa_r+0x650>
 801c40e:	9f04      	ldr	r7, [sp, #16]
 801c410:	e73e      	b.n	801c290 <_dtoa_r+0x4e0>
 801c412:	4b9b      	ldr	r3, [pc, #620]	@ (801c680 <_dtoa_r+0x8d0>)
 801c414:	f7e4 f910 	bl	8000638 <__aeabi_dmul>
 801c418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c41c:	e7bc      	b.n	801c398 <_dtoa_r+0x5e8>
 801c41e:	d10c      	bne.n	801c43a <_dtoa_r+0x68a>
 801c420:	4b98      	ldr	r3, [pc, #608]	@ (801c684 <_dtoa_r+0x8d4>)
 801c422:	2200      	movs	r2, #0
 801c424:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c428:	f7e4 f906 	bl	8000638 <__aeabi_dmul>
 801c42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c430:	f7e4 fb88 	bl	8000b44 <__aeabi_dcmpge>
 801c434:	2800      	cmp	r0, #0
 801c436:	f000 8157 	beq.w	801c6e8 <_dtoa_r+0x938>
 801c43a:	2400      	movs	r4, #0
 801c43c:	4625      	mov	r5, r4
 801c43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c440:	43db      	mvns	r3, r3
 801c442:	9304      	str	r3, [sp, #16]
 801c444:	4656      	mov	r6, sl
 801c446:	2700      	movs	r7, #0
 801c448:	4621      	mov	r1, r4
 801c44a:	4658      	mov	r0, fp
 801c44c:	f000 fafe 	bl	801ca4c <_Bfree>
 801c450:	2d00      	cmp	r5, #0
 801c452:	d0dc      	beq.n	801c40e <_dtoa_r+0x65e>
 801c454:	b12f      	cbz	r7, 801c462 <_dtoa_r+0x6b2>
 801c456:	42af      	cmp	r7, r5
 801c458:	d003      	beq.n	801c462 <_dtoa_r+0x6b2>
 801c45a:	4639      	mov	r1, r7
 801c45c:	4658      	mov	r0, fp
 801c45e:	f000 faf5 	bl	801ca4c <_Bfree>
 801c462:	4629      	mov	r1, r5
 801c464:	4658      	mov	r0, fp
 801c466:	f000 faf1 	bl	801ca4c <_Bfree>
 801c46a:	e7d0      	b.n	801c40e <_dtoa_r+0x65e>
 801c46c:	9704      	str	r7, [sp, #16]
 801c46e:	4633      	mov	r3, r6
 801c470:	461e      	mov	r6, r3
 801c472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c476:	2a39      	cmp	r2, #57	@ 0x39
 801c478:	d107      	bne.n	801c48a <_dtoa_r+0x6da>
 801c47a:	459a      	cmp	sl, r3
 801c47c:	d1f8      	bne.n	801c470 <_dtoa_r+0x6c0>
 801c47e:	9a04      	ldr	r2, [sp, #16]
 801c480:	3201      	adds	r2, #1
 801c482:	9204      	str	r2, [sp, #16]
 801c484:	2230      	movs	r2, #48	@ 0x30
 801c486:	f88a 2000 	strb.w	r2, [sl]
 801c48a:	781a      	ldrb	r2, [r3, #0]
 801c48c:	3201      	adds	r2, #1
 801c48e:	701a      	strb	r2, [r3, #0]
 801c490:	e7bd      	b.n	801c40e <_dtoa_r+0x65e>
 801c492:	4b7b      	ldr	r3, [pc, #492]	@ (801c680 <_dtoa_r+0x8d0>)
 801c494:	2200      	movs	r2, #0
 801c496:	f7e4 f8cf 	bl	8000638 <__aeabi_dmul>
 801c49a:	2200      	movs	r2, #0
 801c49c:	2300      	movs	r3, #0
 801c49e:	4604      	mov	r4, r0
 801c4a0:	460d      	mov	r5, r1
 801c4a2:	f7e4 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	f43f aebb 	beq.w	801c222 <_dtoa_r+0x472>
 801c4ac:	e6f0      	b.n	801c290 <_dtoa_r+0x4e0>
 801c4ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c4b0:	2a00      	cmp	r2, #0
 801c4b2:	f000 80db 	beq.w	801c66c <_dtoa_r+0x8bc>
 801c4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4b8:	2a01      	cmp	r2, #1
 801c4ba:	f300 80bf 	bgt.w	801c63c <_dtoa_r+0x88c>
 801c4be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c4c0:	2a00      	cmp	r2, #0
 801c4c2:	f000 80b7 	beq.w	801c634 <_dtoa_r+0x884>
 801c4c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c4ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c4cc:	4646      	mov	r6, r8
 801c4ce:	9a08      	ldr	r2, [sp, #32]
 801c4d0:	2101      	movs	r1, #1
 801c4d2:	441a      	add	r2, r3
 801c4d4:	4658      	mov	r0, fp
 801c4d6:	4498      	add	r8, r3
 801c4d8:	9208      	str	r2, [sp, #32]
 801c4da:	f000 fb6b 	bl	801cbb4 <__i2b>
 801c4de:	4605      	mov	r5, r0
 801c4e0:	b15e      	cbz	r6, 801c4fa <_dtoa_r+0x74a>
 801c4e2:	9b08      	ldr	r3, [sp, #32]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	dd08      	ble.n	801c4fa <_dtoa_r+0x74a>
 801c4e8:	42b3      	cmp	r3, r6
 801c4ea:	9a08      	ldr	r2, [sp, #32]
 801c4ec:	bfa8      	it	ge
 801c4ee:	4633      	movge	r3, r6
 801c4f0:	eba8 0803 	sub.w	r8, r8, r3
 801c4f4:	1af6      	subs	r6, r6, r3
 801c4f6:	1ad3      	subs	r3, r2, r3
 801c4f8:	9308      	str	r3, [sp, #32]
 801c4fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4fc:	b1f3      	cbz	r3, 801c53c <_dtoa_r+0x78c>
 801c4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c500:	2b00      	cmp	r3, #0
 801c502:	f000 80b7 	beq.w	801c674 <_dtoa_r+0x8c4>
 801c506:	b18c      	cbz	r4, 801c52c <_dtoa_r+0x77c>
 801c508:	4629      	mov	r1, r5
 801c50a:	4622      	mov	r2, r4
 801c50c:	4658      	mov	r0, fp
 801c50e:	f000 fc11 	bl	801cd34 <__pow5mult>
 801c512:	464a      	mov	r2, r9
 801c514:	4601      	mov	r1, r0
 801c516:	4605      	mov	r5, r0
 801c518:	4658      	mov	r0, fp
 801c51a:	f000 fb61 	bl	801cbe0 <__multiply>
 801c51e:	4649      	mov	r1, r9
 801c520:	9004      	str	r0, [sp, #16]
 801c522:	4658      	mov	r0, fp
 801c524:	f000 fa92 	bl	801ca4c <_Bfree>
 801c528:	9b04      	ldr	r3, [sp, #16]
 801c52a:	4699      	mov	r9, r3
 801c52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c52e:	1b1a      	subs	r2, r3, r4
 801c530:	d004      	beq.n	801c53c <_dtoa_r+0x78c>
 801c532:	4649      	mov	r1, r9
 801c534:	4658      	mov	r0, fp
 801c536:	f000 fbfd 	bl	801cd34 <__pow5mult>
 801c53a:	4681      	mov	r9, r0
 801c53c:	2101      	movs	r1, #1
 801c53e:	4658      	mov	r0, fp
 801c540:	f000 fb38 	bl	801cbb4 <__i2b>
 801c544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c546:	4604      	mov	r4, r0
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f000 81cf 	beq.w	801c8ec <_dtoa_r+0xb3c>
 801c54e:	461a      	mov	r2, r3
 801c550:	4601      	mov	r1, r0
 801c552:	4658      	mov	r0, fp
 801c554:	f000 fbee 	bl	801cd34 <__pow5mult>
 801c558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c55a:	2b01      	cmp	r3, #1
 801c55c:	4604      	mov	r4, r0
 801c55e:	f300 8095 	bgt.w	801c68c <_dtoa_r+0x8dc>
 801c562:	9b02      	ldr	r3, [sp, #8]
 801c564:	2b00      	cmp	r3, #0
 801c566:	f040 8087 	bne.w	801c678 <_dtoa_r+0x8c8>
 801c56a:	9b03      	ldr	r3, [sp, #12]
 801c56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c570:	2b00      	cmp	r3, #0
 801c572:	f040 8089 	bne.w	801c688 <_dtoa_r+0x8d8>
 801c576:	9b03      	ldr	r3, [sp, #12]
 801c578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c57c:	0d1b      	lsrs	r3, r3, #20
 801c57e:	051b      	lsls	r3, r3, #20
 801c580:	b12b      	cbz	r3, 801c58e <_dtoa_r+0x7de>
 801c582:	9b08      	ldr	r3, [sp, #32]
 801c584:	3301      	adds	r3, #1
 801c586:	9308      	str	r3, [sp, #32]
 801c588:	f108 0801 	add.w	r8, r8, #1
 801c58c:	2301      	movs	r3, #1
 801c58e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c592:	2b00      	cmp	r3, #0
 801c594:	f000 81b0 	beq.w	801c8f8 <_dtoa_r+0xb48>
 801c598:	6923      	ldr	r3, [r4, #16]
 801c59a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c59e:	6918      	ldr	r0, [r3, #16]
 801c5a0:	f000 fabc 	bl	801cb1c <__hi0bits>
 801c5a4:	f1c0 0020 	rsb	r0, r0, #32
 801c5a8:	9b08      	ldr	r3, [sp, #32]
 801c5aa:	4418      	add	r0, r3
 801c5ac:	f010 001f 	ands.w	r0, r0, #31
 801c5b0:	d077      	beq.n	801c6a2 <_dtoa_r+0x8f2>
 801c5b2:	f1c0 0320 	rsb	r3, r0, #32
 801c5b6:	2b04      	cmp	r3, #4
 801c5b8:	dd6b      	ble.n	801c692 <_dtoa_r+0x8e2>
 801c5ba:	9b08      	ldr	r3, [sp, #32]
 801c5bc:	f1c0 001c 	rsb	r0, r0, #28
 801c5c0:	4403      	add	r3, r0
 801c5c2:	4480      	add	r8, r0
 801c5c4:	4406      	add	r6, r0
 801c5c6:	9308      	str	r3, [sp, #32]
 801c5c8:	f1b8 0f00 	cmp.w	r8, #0
 801c5cc:	dd05      	ble.n	801c5da <_dtoa_r+0x82a>
 801c5ce:	4649      	mov	r1, r9
 801c5d0:	4642      	mov	r2, r8
 801c5d2:	4658      	mov	r0, fp
 801c5d4:	f000 fc08 	bl	801cde8 <__lshift>
 801c5d8:	4681      	mov	r9, r0
 801c5da:	9b08      	ldr	r3, [sp, #32]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	dd05      	ble.n	801c5ec <_dtoa_r+0x83c>
 801c5e0:	4621      	mov	r1, r4
 801c5e2:	461a      	mov	r2, r3
 801c5e4:	4658      	mov	r0, fp
 801c5e6:	f000 fbff 	bl	801cde8 <__lshift>
 801c5ea:	4604      	mov	r4, r0
 801c5ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d059      	beq.n	801c6a6 <_dtoa_r+0x8f6>
 801c5f2:	4621      	mov	r1, r4
 801c5f4:	4648      	mov	r0, r9
 801c5f6:	f000 fc63 	bl	801cec0 <__mcmp>
 801c5fa:	2800      	cmp	r0, #0
 801c5fc:	da53      	bge.n	801c6a6 <_dtoa_r+0x8f6>
 801c5fe:	1e7b      	subs	r3, r7, #1
 801c600:	9304      	str	r3, [sp, #16]
 801c602:	4649      	mov	r1, r9
 801c604:	2300      	movs	r3, #0
 801c606:	220a      	movs	r2, #10
 801c608:	4658      	mov	r0, fp
 801c60a:	f000 fa41 	bl	801ca90 <__multadd>
 801c60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c610:	4681      	mov	r9, r0
 801c612:	2b00      	cmp	r3, #0
 801c614:	f000 8172 	beq.w	801c8fc <_dtoa_r+0xb4c>
 801c618:	2300      	movs	r3, #0
 801c61a:	4629      	mov	r1, r5
 801c61c:	220a      	movs	r2, #10
 801c61e:	4658      	mov	r0, fp
 801c620:	f000 fa36 	bl	801ca90 <__multadd>
 801c624:	9b00      	ldr	r3, [sp, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	4605      	mov	r5, r0
 801c62a:	dc67      	bgt.n	801c6fc <_dtoa_r+0x94c>
 801c62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c62e:	2b02      	cmp	r3, #2
 801c630:	dc41      	bgt.n	801c6b6 <_dtoa_r+0x906>
 801c632:	e063      	b.n	801c6fc <_dtoa_r+0x94c>
 801c634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c63a:	e746      	b.n	801c4ca <_dtoa_r+0x71a>
 801c63c:	9b07      	ldr	r3, [sp, #28]
 801c63e:	1e5c      	subs	r4, r3, #1
 801c640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c642:	42a3      	cmp	r3, r4
 801c644:	bfbf      	itttt	lt
 801c646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c64a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c64c:	1ae3      	sublt	r3, r4, r3
 801c64e:	bfb4      	ite	lt
 801c650:	18d2      	addlt	r2, r2, r3
 801c652:	1b1c      	subge	r4, r3, r4
 801c654:	9b07      	ldr	r3, [sp, #28]
 801c656:	bfbc      	itt	lt
 801c658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c65a:	2400      	movlt	r4, #0
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	bfb5      	itete	lt
 801c660:	eba8 0603 	sublt.w	r6, r8, r3
 801c664:	9b07      	ldrge	r3, [sp, #28]
 801c666:	2300      	movlt	r3, #0
 801c668:	4646      	movge	r6, r8
 801c66a:	e730      	b.n	801c4ce <_dtoa_r+0x71e>
 801c66c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c66e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c670:	4646      	mov	r6, r8
 801c672:	e735      	b.n	801c4e0 <_dtoa_r+0x730>
 801c674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c676:	e75c      	b.n	801c532 <_dtoa_r+0x782>
 801c678:	2300      	movs	r3, #0
 801c67a:	e788      	b.n	801c58e <_dtoa_r+0x7de>
 801c67c:	3fe00000 	.word	0x3fe00000
 801c680:	40240000 	.word	0x40240000
 801c684:	40140000 	.word	0x40140000
 801c688:	9b02      	ldr	r3, [sp, #8]
 801c68a:	e780      	b.n	801c58e <_dtoa_r+0x7de>
 801c68c:	2300      	movs	r3, #0
 801c68e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c690:	e782      	b.n	801c598 <_dtoa_r+0x7e8>
 801c692:	d099      	beq.n	801c5c8 <_dtoa_r+0x818>
 801c694:	9a08      	ldr	r2, [sp, #32]
 801c696:	331c      	adds	r3, #28
 801c698:	441a      	add	r2, r3
 801c69a:	4498      	add	r8, r3
 801c69c:	441e      	add	r6, r3
 801c69e:	9208      	str	r2, [sp, #32]
 801c6a0:	e792      	b.n	801c5c8 <_dtoa_r+0x818>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	e7f6      	b.n	801c694 <_dtoa_r+0x8e4>
 801c6a6:	9b07      	ldr	r3, [sp, #28]
 801c6a8:	9704      	str	r7, [sp, #16]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	dc20      	bgt.n	801c6f0 <_dtoa_r+0x940>
 801c6ae:	9300      	str	r3, [sp, #0]
 801c6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6b2:	2b02      	cmp	r3, #2
 801c6b4:	dd1e      	ble.n	801c6f4 <_dtoa_r+0x944>
 801c6b6:	9b00      	ldr	r3, [sp, #0]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	f47f aec0 	bne.w	801c43e <_dtoa_r+0x68e>
 801c6be:	4621      	mov	r1, r4
 801c6c0:	2205      	movs	r2, #5
 801c6c2:	4658      	mov	r0, fp
 801c6c4:	f000 f9e4 	bl	801ca90 <__multadd>
 801c6c8:	4601      	mov	r1, r0
 801c6ca:	4604      	mov	r4, r0
 801c6cc:	4648      	mov	r0, r9
 801c6ce:	f000 fbf7 	bl	801cec0 <__mcmp>
 801c6d2:	2800      	cmp	r0, #0
 801c6d4:	f77f aeb3 	ble.w	801c43e <_dtoa_r+0x68e>
 801c6d8:	4656      	mov	r6, sl
 801c6da:	2331      	movs	r3, #49	@ 0x31
 801c6dc:	f806 3b01 	strb.w	r3, [r6], #1
 801c6e0:	9b04      	ldr	r3, [sp, #16]
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	9304      	str	r3, [sp, #16]
 801c6e6:	e6ae      	b.n	801c446 <_dtoa_r+0x696>
 801c6e8:	9c07      	ldr	r4, [sp, #28]
 801c6ea:	9704      	str	r7, [sp, #16]
 801c6ec:	4625      	mov	r5, r4
 801c6ee:	e7f3      	b.n	801c6d8 <_dtoa_r+0x928>
 801c6f0:	9b07      	ldr	r3, [sp, #28]
 801c6f2:	9300      	str	r3, [sp, #0]
 801c6f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	f000 8104 	beq.w	801c904 <_dtoa_r+0xb54>
 801c6fc:	2e00      	cmp	r6, #0
 801c6fe:	dd05      	ble.n	801c70c <_dtoa_r+0x95c>
 801c700:	4629      	mov	r1, r5
 801c702:	4632      	mov	r2, r6
 801c704:	4658      	mov	r0, fp
 801c706:	f000 fb6f 	bl	801cde8 <__lshift>
 801c70a:	4605      	mov	r5, r0
 801c70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d05a      	beq.n	801c7c8 <_dtoa_r+0xa18>
 801c712:	6869      	ldr	r1, [r5, #4]
 801c714:	4658      	mov	r0, fp
 801c716:	f000 f959 	bl	801c9cc <_Balloc>
 801c71a:	4606      	mov	r6, r0
 801c71c:	b928      	cbnz	r0, 801c72a <_dtoa_r+0x97a>
 801c71e:	4b84      	ldr	r3, [pc, #528]	@ (801c930 <_dtoa_r+0xb80>)
 801c720:	4602      	mov	r2, r0
 801c722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c726:	f7ff bb5a 	b.w	801bdde <_dtoa_r+0x2e>
 801c72a:	692a      	ldr	r2, [r5, #16]
 801c72c:	3202      	adds	r2, #2
 801c72e:	0092      	lsls	r2, r2, #2
 801c730:	f105 010c 	add.w	r1, r5, #12
 801c734:	300c      	adds	r0, #12
 801c736:	f7ff faa2 	bl	801bc7e <memcpy>
 801c73a:	2201      	movs	r2, #1
 801c73c:	4631      	mov	r1, r6
 801c73e:	4658      	mov	r0, fp
 801c740:	f000 fb52 	bl	801cde8 <__lshift>
 801c744:	f10a 0301 	add.w	r3, sl, #1
 801c748:	9307      	str	r3, [sp, #28]
 801c74a:	9b00      	ldr	r3, [sp, #0]
 801c74c:	4453      	add	r3, sl
 801c74e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c750:	9b02      	ldr	r3, [sp, #8]
 801c752:	f003 0301 	and.w	r3, r3, #1
 801c756:	462f      	mov	r7, r5
 801c758:	930a      	str	r3, [sp, #40]	@ 0x28
 801c75a:	4605      	mov	r5, r0
 801c75c:	9b07      	ldr	r3, [sp, #28]
 801c75e:	4621      	mov	r1, r4
 801c760:	3b01      	subs	r3, #1
 801c762:	4648      	mov	r0, r9
 801c764:	9300      	str	r3, [sp, #0]
 801c766:	f7ff fa98 	bl	801bc9a <quorem>
 801c76a:	4639      	mov	r1, r7
 801c76c:	9002      	str	r0, [sp, #8]
 801c76e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c772:	4648      	mov	r0, r9
 801c774:	f000 fba4 	bl	801cec0 <__mcmp>
 801c778:	462a      	mov	r2, r5
 801c77a:	9008      	str	r0, [sp, #32]
 801c77c:	4621      	mov	r1, r4
 801c77e:	4658      	mov	r0, fp
 801c780:	f000 fbba 	bl	801cef8 <__mdiff>
 801c784:	68c2      	ldr	r2, [r0, #12]
 801c786:	4606      	mov	r6, r0
 801c788:	bb02      	cbnz	r2, 801c7cc <_dtoa_r+0xa1c>
 801c78a:	4601      	mov	r1, r0
 801c78c:	4648      	mov	r0, r9
 801c78e:	f000 fb97 	bl	801cec0 <__mcmp>
 801c792:	4602      	mov	r2, r0
 801c794:	4631      	mov	r1, r6
 801c796:	4658      	mov	r0, fp
 801c798:	920e      	str	r2, [sp, #56]	@ 0x38
 801c79a:	f000 f957 	bl	801ca4c <_Bfree>
 801c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c7a2:	9e07      	ldr	r6, [sp, #28]
 801c7a4:	ea43 0102 	orr.w	r1, r3, r2
 801c7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c7aa:	4319      	orrs	r1, r3
 801c7ac:	d110      	bne.n	801c7d0 <_dtoa_r+0xa20>
 801c7ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c7b2:	d029      	beq.n	801c808 <_dtoa_r+0xa58>
 801c7b4:	9b08      	ldr	r3, [sp, #32]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	dd02      	ble.n	801c7c0 <_dtoa_r+0xa10>
 801c7ba:	9b02      	ldr	r3, [sp, #8]
 801c7bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c7c0:	9b00      	ldr	r3, [sp, #0]
 801c7c2:	f883 8000 	strb.w	r8, [r3]
 801c7c6:	e63f      	b.n	801c448 <_dtoa_r+0x698>
 801c7c8:	4628      	mov	r0, r5
 801c7ca:	e7bb      	b.n	801c744 <_dtoa_r+0x994>
 801c7cc:	2201      	movs	r2, #1
 801c7ce:	e7e1      	b.n	801c794 <_dtoa_r+0x9e4>
 801c7d0:	9b08      	ldr	r3, [sp, #32]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	db04      	blt.n	801c7e0 <_dtoa_r+0xa30>
 801c7d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c7d8:	430b      	orrs	r3, r1
 801c7da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c7dc:	430b      	orrs	r3, r1
 801c7de:	d120      	bne.n	801c822 <_dtoa_r+0xa72>
 801c7e0:	2a00      	cmp	r2, #0
 801c7e2:	dded      	ble.n	801c7c0 <_dtoa_r+0xa10>
 801c7e4:	4649      	mov	r1, r9
 801c7e6:	2201      	movs	r2, #1
 801c7e8:	4658      	mov	r0, fp
 801c7ea:	f000 fafd 	bl	801cde8 <__lshift>
 801c7ee:	4621      	mov	r1, r4
 801c7f0:	4681      	mov	r9, r0
 801c7f2:	f000 fb65 	bl	801cec0 <__mcmp>
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	dc03      	bgt.n	801c802 <_dtoa_r+0xa52>
 801c7fa:	d1e1      	bne.n	801c7c0 <_dtoa_r+0xa10>
 801c7fc:	f018 0f01 	tst.w	r8, #1
 801c800:	d0de      	beq.n	801c7c0 <_dtoa_r+0xa10>
 801c802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c806:	d1d8      	bne.n	801c7ba <_dtoa_r+0xa0a>
 801c808:	9a00      	ldr	r2, [sp, #0]
 801c80a:	2339      	movs	r3, #57	@ 0x39
 801c80c:	7013      	strb	r3, [r2, #0]
 801c80e:	4633      	mov	r3, r6
 801c810:	461e      	mov	r6, r3
 801c812:	3b01      	subs	r3, #1
 801c814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c818:	2a39      	cmp	r2, #57	@ 0x39
 801c81a:	d052      	beq.n	801c8c2 <_dtoa_r+0xb12>
 801c81c:	3201      	adds	r2, #1
 801c81e:	701a      	strb	r2, [r3, #0]
 801c820:	e612      	b.n	801c448 <_dtoa_r+0x698>
 801c822:	2a00      	cmp	r2, #0
 801c824:	dd07      	ble.n	801c836 <_dtoa_r+0xa86>
 801c826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c82a:	d0ed      	beq.n	801c808 <_dtoa_r+0xa58>
 801c82c:	9a00      	ldr	r2, [sp, #0]
 801c82e:	f108 0301 	add.w	r3, r8, #1
 801c832:	7013      	strb	r3, [r2, #0]
 801c834:	e608      	b.n	801c448 <_dtoa_r+0x698>
 801c836:	9b07      	ldr	r3, [sp, #28]
 801c838:	9a07      	ldr	r2, [sp, #28]
 801c83a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c840:	4293      	cmp	r3, r2
 801c842:	d028      	beq.n	801c896 <_dtoa_r+0xae6>
 801c844:	4649      	mov	r1, r9
 801c846:	2300      	movs	r3, #0
 801c848:	220a      	movs	r2, #10
 801c84a:	4658      	mov	r0, fp
 801c84c:	f000 f920 	bl	801ca90 <__multadd>
 801c850:	42af      	cmp	r7, r5
 801c852:	4681      	mov	r9, r0
 801c854:	f04f 0300 	mov.w	r3, #0
 801c858:	f04f 020a 	mov.w	r2, #10
 801c85c:	4639      	mov	r1, r7
 801c85e:	4658      	mov	r0, fp
 801c860:	d107      	bne.n	801c872 <_dtoa_r+0xac2>
 801c862:	f000 f915 	bl	801ca90 <__multadd>
 801c866:	4607      	mov	r7, r0
 801c868:	4605      	mov	r5, r0
 801c86a:	9b07      	ldr	r3, [sp, #28]
 801c86c:	3301      	adds	r3, #1
 801c86e:	9307      	str	r3, [sp, #28]
 801c870:	e774      	b.n	801c75c <_dtoa_r+0x9ac>
 801c872:	f000 f90d 	bl	801ca90 <__multadd>
 801c876:	4629      	mov	r1, r5
 801c878:	4607      	mov	r7, r0
 801c87a:	2300      	movs	r3, #0
 801c87c:	220a      	movs	r2, #10
 801c87e:	4658      	mov	r0, fp
 801c880:	f000 f906 	bl	801ca90 <__multadd>
 801c884:	4605      	mov	r5, r0
 801c886:	e7f0      	b.n	801c86a <_dtoa_r+0xaba>
 801c888:	9b00      	ldr	r3, [sp, #0]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	bfcc      	ite	gt
 801c88e:	461e      	movgt	r6, r3
 801c890:	2601      	movle	r6, #1
 801c892:	4456      	add	r6, sl
 801c894:	2700      	movs	r7, #0
 801c896:	4649      	mov	r1, r9
 801c898:	2201      	movs	r2, #1
 801c89a:	4658      	mov	r0, fp
 801c89c:	f000 faa4 	bl	801cde8 <__lshift>
 801c8a0:	4621      	mov	r1, r4
 801c8a2:	4681      	mov	r9, r0
 801c8a4:	f000 fb0c 	bl	801cec0 <__mcmp>
 801c8a8:	2800      	cmp	r0, #0
 801c8aa:	dcb0      	bgt.n	801c80e <_dtoa_r+0xa5e>
 801c8ac:	d102      	bne.n	801c8b4 <_dtoa_r+0xb04>
 801c8ae:	f018 0f01 	tst.w	r8, #1
 801c8b2:	d1ac      	bne.n	801c80e <_dtoa_r+0xa5e>
 801c8b4:	4633      	mov	r3, r6
 801c8b6:	461e      	mov	r6, r3
 801c8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c8bc:	2a30      	cmp	r2, #48	@ 0x30
 801c8be:	d0fa      	beq.n	801c8b6 <_dtoa_r+0xb06>
 801c8c0:	e5c2      	b.n	801c448 <_dtoa_r+0x698>
 801c8c2:	459a      	cmp	sl, r3
 801c8c4:	d1a4      	bne.n	801c810 <_dtoa_r+0xa60>
 801c8c6:	9b04      	ldr	r3, [sp, #16]
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	9304      	str	r3, [sp, #16]
 801c8cc:	2331      	movs	r3, #49	@ 0x31
 801c8ce:	f88a 3000 	strb.w	r3, [sl]
 801c8d2:	e5b9      	b.n	801c448 <_dtoa_r+0x698>
 801c8d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c8d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c934 <_dtoa_r+0xb84>
 801c8da:	b11b      	cbz	r3, 801c8e4 <_dtoa_r+0xb34>
 801c8dc:	f10a 0308 	add.w	r3, sl, #8
 801c8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c8e2:	6013      	str	r3, [r2, #0]
 801c8e4:	4650      	mov	r0, sl
 801c8e6:	b019      	add	sp, #100	@ 0x64
 801c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8ee:	2b01      	cmp	r3, #1
 801c8f0:	f77f ae37 	ble.w	801c562 <_dtoa_r+0x7b2>
 801c8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c8f8:	2001      	movs	r0, #1
 801c8fa:	e655      	b.n	801c5a8 <_dtoa_r+0x7f8>
 801c8fc:	9b00      	ldr	r3, [sp, #0]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	f77f aed6 	ble.w	801c6b0 <_dtoa_r+0x900>
 801c904:	4656      	mov	r6, sl
 801c906:	4621      	mov	r1, r4
 801c908:	4648      	mov	r0, r9
 801c90a:	f7ff f9c6 	bl	801bc9a <quorem>
 801c90e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c912:	f806 8b01 	strb.w	r8, [r6], #1
 801c916:	9b00      	ldr	r3, [sp, #0]
 801c918:	eba6 020a 	sub.w	r2, r6, sl
 801c91c:	4293      	cmp	r3, r2
 801c91e:	ddb3      	ble.n	801c888 <_dtoa_r+0xad8>
 801c920:	4649      	mov	r1, r9
 801c922:	2300      	movs	r3, #0
 801c924:	220a      	movs	r2, #10
 801c926:	4658      	mov	r0, fp
 801c928:	f000 f8b2 	bl	801ca90 <__multadd>
 801c92c:	4681      	mov	r9, r0
 801c92e:	e7ea      	b.n	801c906 <_dtoa_r+0xb56>
 801c930:	0801e1e0 	.word	0x0801e1e0
 801c934:	0801e164 	.word	0x0801e164

0801c938 <_free_r>:
 801c938:	b538      	push	{r3, r4, r5, lr}
 801c93a:	4605      	mov	r5, r0
 801c93c:	2900      	cmp	r1, #0
 801c93e:	d041      	beq.n	801c9c4 <_free_r+0x8c>
 801c940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c944:	1f0c      	subs	r4, r1, #4
 801c946:	2b00      	cmp	r3, #0
 801c948:	bfb8      	it	lt
 801c94a:	18e4      	addlt	r4, r4, r3
 801c94c:	f7fe fb6a 	bl	801b024 <__malloc_lock>
 801c950:	4a1d      	ldr	r2, [pc, #116]	@ (801c9c8 <_free_r+0x90>)
 801c952:	6813      	ldr	r3, [r2, #0]
 801c954:	b933      	cbnz	r3, 801c964 <_free_r+0x2c>
 801c956:	6063      	str	r3, [r4, #4]
 801c958:	6014      	str	r4, [r2, #0]
 801c95a:	4628      	mov	r0, r5
 801c95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c960:	f7fe bb66 	b.w	801b030 <__malloc_unlock>
 801c964:	42a3      	cmp	r3, r4
 801c966:	d908      	bls.n	801c97a <_free_r+0x42>
 801c968:	6820      	ldr	r0, [r4, #0]
 801c96a:	1821      	adds	r1, r4, r0
 801c96c:	428b      	cmp	r3, r1
 801c96e:	bf01      	itttt	eq
 801c970:	6819      	ldreq	r1, [r3, #0]
 801c972:	685b      	ldreq	r3, [r3, #4]
 801c974:	1809      	addeq	r1, r1, r0
 801c976:	6021      	streq	r1, [r4, #0]
 801c978:	e7ed      	b.n	801c956 <_free_r+0x1e>
 801c97a:	461a      	mov	r2, r3
 801c97c:	685b      	ldr	r3, [r3, #4]
 801c97e:	b10b      	cbz	r3, 801c984 <_free_r+0x4c>
 801c980:	42a3      	cmp	r3, r4
 801c982:	d9fa      	bls.n	801c97a <_free_r+0x42>
 801c984:	6811      	ldr	r1, [r2, #0]
 801c986:	1850      	adds	r0, r2, r1
 801c988:	42a0      	cmp	r0, r4
 801c98a:	d10b      	bne.n	801c9a4 <_free_r+0x6c>
 801c98c:	6820      	ldr	r0, [r4, #0]
 801c98e:	4401      	add	r1, r0
 801c990:	1850      	adds	r0, r2, r1
 801c992:	4283      	cmp	r3, r0
 801c994:	6011      	str	r1, [r2, #0]
 801c996:	d1e0      	bne.n	801c95a <_free_r+0x22>
 801c998:	6818      	ldr	r0, [r3, #0]
 801c99a:	685b      	ldr	r3, [r3, #4]
 801c99c:	6053      	str	r3, [r2, #4]
 801c99e:	4408      	add	r0, r1
 801c9a0:	6010      	str	r0, [r2, #0]
 801c9a2:	e7da      	b.n	801c95a <_free_r+0x22>
 801c9a4:	d902      	bls.n	801c9ac <_free_r+0x74>
 801c9a6:	230c      	movs	r3, #12
 801c9a8:	602b      	str	r3, [r5, #0]
 801c9aa:	e7d6      	b.n	801c95a <_free_r+0x22>
 801c9ac:	6820      	ldr	r0, [r4, #0]
 801c9ae:	1821      	adds	r1, r4, r0
 801c9b0:	428b      	cmp	r3, r1
 801c9b2:	bf04      	itt	eq
 801c9b4:	6819      	ldreq	r1, [r3, #0]
 801c9b6:	685b      	ldreq	r3, [r3, #4]
 801c9b8:	6063      	str	r3, [r4, #4]
 801c9ba:	bf04      	itt	eq
 801c9bc:	1809      	addeq	r1, r1, r0
 801c9be:	6021      	streq	r1, [r4, #0]
 801c9c0:	6054      	str	r4, [r2, #4]
 801c9c2:	e7ca      	b.n	801c95a <_free_r+0x22>
 801c9c4:	bd38      	pop	{r3, r4, r5, pc}
 801c9c6:	bf00      	nop
 801c9c8:	2000165c 	.word	0x2000165c

0801c9cc <_Balloc>:
 801c9cc:	b570      	push	{r4, r5, r6, lr}
 801c9ce:	69c6      	ldr	r6, [r0, #28]
 801c9d0:	4604      	mov	r4, r0
 801c9d2:	460d      	mov	r5, r1
 801c9d4:	b976      	cbnz	r6, 801c9f4 <_Balloc+0x28>
 801c9d6:	2010      	movs	r0, #16
 801c9d8:	f7fe fa72 	bl	801aec0 <malloc>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	61e0      	str	r0, [r4, #28]
 801c9e0:	b920      	cbnz	r0, 801c9ec <_Balloc+0x20>
 801c9e2:	4b18      	ldr	r3, [pc, #96]	@ (801ca44 <_Balloc+0x78>)
 801c9e4:	4818      	ldr	r0, [pc, #96]	@ (801ca48 <_Balloc+0x7c>)
 801c9e6:	216b      	movs	r1, #107	@ 0x6b
 801c9e8:	f000 fd90 	bl	801d50c <__assert_func>
 801c9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9f0:	6006      	str	r6, [r0, #0]
 801c9f2:	60c6      	str	r6, [r0, #12]
 801c9f4:	69e6      	ldr	r6, [r4, #28]
 801c9f6:	68f3      	ldr	r3, [r6, #12]
 801c9f8:	b183      	cbz	r3, 801ca1c <_Balloc+0x50>
 801c9fa:	69e3      	ldr	r3, [r4, #28]
 801c9fc:	68db      	ldr	r3, [r3, #12]
 801c9fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ca02:	b9b8      	cbnz	r0, 801ca34 <_Balloc+0x68>
 801ca04:	2101      	movs	r1, #1
 801ca06:	fa01 f605 	lsl.w	r6, r1, r5
 801ca0a:	1d72      	adds	r2, r6, #5
 801ca0c:	0092      	lsls	r2, r2, #2
 801ca0e:	4620      	mov	r0, r4
 801ca10:	f000 fd9a 	bl	801d548 <_calloc_r>
 801ca14:	b160      	cbz	r0, 801ca30 <_Balloc+0x64>
 801ca16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ca1a:	e00e      	b.n	801ca3a <_Balloc+0x6e>
 801ca1c:	2221      	movs	r2, #33	@ 0x21
 801ca1e:	2104      	movs	r1, #4
 801ca20:	4620      	mov	r0, r4
 801ca22:	f000 fd91 	bl	801d548 <_calloc_r>
 801ca26:	69e3      	ldr	r3, [r4, #28]
 801ca28:	60f0      	str	r0, [r6, #12]
 801ca2a:	68db      	ldr	r3, [r3, #12]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d1e4      	bne.n	801c9fa <_Balloc+0x2e>
 801ca30:	2000      	movs	r0, #0
 801ca32:	bd70      	pop	{r4, r5, r6, pc}
 801ca34:	6802      	ldr	r2, [r0, #0]
 801ca36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ca40:	e7f7      	b.n	801ca32 <_Balloc+0x66>
 801ca42:	bf00      	nop
 801ca44:	0801e171 	.word	0x0801e171
 801ca48:	0801e1f1 	.word	0x0801e1f1

0801ca4c <_Bfree>:
 801ca4c:	b570      	push	{r4, r5, r6, lr}
 801ca4e:	69c6      	ldr	r6, [r0, #28]
 801ca50:	4605      	mov	r5, r0
 801ca52:	460c      	mov	r4, r1
 801ca54:	b976      	cbnz	r6, 801ca74 <_Bfree+0x28>
 801ca56:	2010      	movs	r0, #16
 801ca58:	f7fe fa32 	bl	801aec0 <malloc>
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	61e8      	str	r0, [r5, #28]
 801ca60:	b920      	cbnz	r0, 801ca6c <_Bfree+0x20>
 801ca62:	4b09      	ldr	r3, [pc, #36]	@ (801ca88 <_Bfree+0x3c>)
 801ca64:	4809      	ldr	r0, [pc, #36]	@ (801ca8c <_Bfree+0x40>)
 801ca66:	218f      	movs	r1, #143	@ 0x8f
 801ca68:	f000 fd50 	bl	801d50c <__assert_func>
 801ca6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ca70:	6006      	str	r6, [r0, #0]
 801ca72:	60c6      	str	r6, [r0, #12]
 801ca74:	b13c      	cbz	r4, 801ca86 <_Bfree+0x3a>
 801ca76:	69eb      	ldr	r3, [r5, #28]
 801ca78:	6862      	ldr	r2, [r4, #4]
 801ca7a:	68db      	ldr	r3, [r3, #12]
 801ca7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ca80:	6021      	str	r1, [r4, #0]
 801ca82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ca86:	bd70      	pop	{r4, r5, r6, pc}
 801ca88:	0801e171 	.word	0x0801e171
 801ca8c:	0801e1f1 	.word	0x0801e1f1

0801ca90 <__multadd>:
 801ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca94:	690d      	ldr	r5, [r1, #16]
 801ca96:	4607      	mov	r7, r0
 801ca98:	460c      	mov	r4, r1
 801ca9a:	461e      	mov	r6, r3
 801ca9c:	f101 0c14 	add.w	ip, r1, #20
 801caa0:	2000      	movs	r0, #0
 801caa2:	f8dc 3000 	ldr.w	r3, [ip]
 801caa6:	b299      	uxth	r1, r3
 801caa8:	fb02 6101 	mla	r1, r2, r1, r6
 801caac:	0c1e      	lsrs	r6, r3, #16
 801caae:	0c0b      	lsrs	r3, r1, #16
 801cab0:	fb02 3306 	mla	r3, r2, r6, r3
 801cab4:	b289      	uxth	r1, r1
 801cab6:	3001      	adds	r0, #1
 801cab8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cabc:	4285      	cmp	r5, r0
 801cabe:	f84c 1b04 	str.w	r1, [ip], #4
 801cac2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cac6:	dcec      	bgt.n	801caa2 <__multadd+0x12>
 801cac8:	b30e      	cbz	r6, 801cb0e <__multadd+0x7e>
 801caca:	68a3      	ldr	r3, [r4, #8]
 801cacc:	42ab      	cmp	r3, r5
 801cace:	dc19      	bgt.n	801cb04 <__multadd+0x74>
 801cad0:	6861      	ldr	r1, [r4, #4]
 801cad2:	4638      	mov	r0, r7
 801cad4:	3101      	adds	r1, #1
 801cad6:	f7ff ff79 	bl	801c9cc <_Balloc>
 801cada:	4680      	mov	r8, r0
 801cadc:	b928      	cbnz	r0, 801caea <__multadd+0x5a>
 801cade:	4602      	mov	r2, r0
 801cae0:	4b0c      	ldr	r3, [pc, #48]	@ (801cb14 <__multadd+0x84>)
 801cae2:	480d      	ldr	r0, [pc, #52]	@ (801cb18 <__multadd+0x88>)
 801cae4:	21ba      	movs	r1, #186	@ 0xba
 801cae6:	f000 fd11 	bl	801d50c <__assert_func>
 801caea:	6922      	ldr	r2, [r4, #16]
 801caec:	3202      	adds	r2, #2
 801caee:	f104 010c 	add.w	r1, r4, #12
 801caf2:	0092      	lsls	r2, r2, #2
 801caf4:	300c      	adds	r0, #12
 801caf6:	f7ff f8c2 	bl	801bc7e <memcpy>
 801cafa:	4621      	mov	r1, r4
 801cafc:	4638      	mov	r0, r7
 801cafe:	f7ff ffa5 	bl	801ca4c <_Bfree>
 801cb02:	4644      	mov	r4, r8
 801cb04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cb08:	3501      	adds	r5, #1
 801cb0a:	615e      	str	r6, [r3, #20]
 801cb0c:	6125      	str	r5, [r4, #16]
 801cb0e:	4620      	mov	r0, r4
 801cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb14:	0801e1e0 	.word	0x0801e1e0
 801cb18:	0801e1f1 	.word	0x0801e1f1

0801cb1c <__hi0bits>:
 801cb1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801cb20:	4603      	mov	r3, r0
 801cb22:	bf36      	itet	cc
 801cb24:	0403      	lslcc	r3, r0, #16
 801cb26:	2000      	movcs	r0, #0
 801cb28:	2010      	movcc	r0, #16
 801cb2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cb2e:	bf3c      	itt	cc
 801cb30:	021b      	lslcc	r3, r3, #8
 801cb32:	3008      	addcc	r0, #8
 801cb34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cb38:	bf3c      	itt	cc
 801cb3a:	011b      	lslcc	r3, r3, #4
 801cb3c:	3004      	addcc	r0, #4
 801cb3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cb42:	bf3c      	itt	cc
 801cb44:	009b      	lslcc	r3, r3, #2
 801cb46:	3002      	addcc	r0, #2
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	db05      	blt.n	801cb58 <__hi0bits+0x3c>
 801cb4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801cb50:	f100 0001 	add.w	r0, r0, #1
 801cb54:	bf08      	it	eq
 801cb56:	2020      	moveq	r0, #32
 801cb58:	4770      	bx	lr

0801cb5a <__lo0bits>:
 801cb5a:	6803      	ldr	r3, [r0, #0]
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	f013 0007 	ands.w	r0, r3, #7
 801cb62:	d00b      	beq.n	801cb7c <__lo0bits+0x22>
 801cb64:	07d9      	lsls	r1, r3, #31
 801cb66:	d421      	bmi.n	801cbac <__lo0bits+0x52>
 801cb68:	0798      	lsls	r0, r3, #30
 801cb6a:	bf49      	itett	mi
 801cb6c:	085b      	lsrmi	r3, r3, #1
 801cb6e:	089b      	lsrpl	r3, r3, #2
 801cb70:	2001      	movmi	r0, #1
 801cb72:	6013      	strmi	r3, [r2, #0]
 801cb74:	bf5c      	itt	pl
 801cb76:	6013      	strpl	r3, [r2, #0]
 801cb78:	2002      	movpl	r0, #2
 801cb7a:	4770      	bx	lr
 801cb7c:	b299      	uxth	r1, r3
 801cb7e:	b909      	cbnz	r1, 801cb84 <__lo0bits+0x2a>
 801cb80:	0c1b      	lsrs	r3, r3, #16
 801cb82:	2010      	movs	r0, #16
 801cb84:	b2d9      	uxtb	r1, r3
 801cb86:	b909      	cbnz	r1, 801cb8c <__lo0bits+0x32>
 801cb88:	3008      	adds	r0, #8
 801cb8a:	0a1b      	lsrs	r3, r3, #8
 801cb8c:	0719      	lsls	r1, r3, #28
 801cb8e:	bf04      	itt	eq
 801cb90:	091b      	lsreq	r3, r3, #4
 801cb92:	3004      	addeq	r0, #4
 801cb94:	0799      	lsls	r1, r3, #30
 801cb96:	bf04      	itt	eq
 801cb98:	089b      	lsreq	r3, r3, #2
 801cb9a:	3002      	addeq	r0, #2
 801cb9c:	07d9      	lsls	r1, r3, #31
 801cb9e:	d403      	bmi.n	801cba8 <__lo0bits+0x4e>
 801cba0:	085b      	lsrs	r3, r3, #1
 801cba2:	f100 0001 	add.w	r0, r0, #1
 801cba6:	d003      	beq.n	801cbb0 <__lo0bits+0x56>
 801cba8:	6013      	str	r3, [r2, #0]
 801cbaa:	4770      	bx	lr
 801cbac:	2000      	movs	r0, #0
 801cbae:	4770      	bx	lr
 801cbb0:	2020      	movs	r0, #32
 801cbb2:	4770      	bx	lr

0801cbb4 <__i2b>:
 801cbb4:	b510      	push	{r4, lr}
 801cbb6:	460c      	mov	r4, r1
 801cbb8:	2101      	movs	r1, #1
 801cbba:	f7ff ff07 	bl	801c9cc <_Balloc>
 801cbbe:	4602      	mov	r2, r0
 801cbc0:	b928      	cbnz	r0, 801cbce <__i2b+0x1a>
 801cbc2:	4b05      	ldr	r3, [pc, #20]	@ (801cbd8 <__i2b+0x24>)
 801cbc4:	4805      	ldr	r0, [pc, #20]	@ (801cbdc <__i2b+0x28>)
 801cbc6:	f240 1145 	movw	r1, #325	@ 0x145
 801cbca:	f000 fc9f 	bl	801d50c <__assert_func>
 801cbce:	2301      	movs	r3, #1
 801cbd0:	6144      	str	r4, [r0, #20]
 801cbd2:	6103      	str	r3, [r0, #16]
 801cbd4:	bd10      	pop	{r4, pc}
 801cbd6:	bf00      	nop
 801cbd8:	0801e1e0 	.word	0x0801e1e0
 801cbdc:	0801e1f1 	.word	0x0801e1f1

0801cbe0 <__multiply>:
 801cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe4:	4614      	mov	r4, r2
 801cbe6:	690a      	ldr	r2, [r1, #16]
 801cbe8:	6923      	ldr	r3, [r4, #16]
 801cbea:	429a      	cmp	r2, r3
 801cbec:	bfa8      	it	ge
 801cbee:	4623      	movge	r3, r4
 801cbf0:	460f      	mov	r7, r1
 801cbf2:	bfa4      	itt	ge
 801cbf4:	460c      	movge	r4, r1
 801cbf6:	461f      	movge	r7, r3
 801cbf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cbfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cc00:	68a3      	ldr	r3, [r4, #8]
 801cc02:	6861      	ldr	r1, [r4, #4]
 801cc04:	eb0a 0609 	add.w	r6, sl, r9
 801cc08:	42b3      	cmp	r3, r6
 801cc0a:	b085      	sub	sp, #20
 801cc0c:	bfb8      	it	lt
 801cc0e:	3101      	addlt	r1, #1
 801cc10:	f7ff fedc 	bl	801c9cc <_Balloc>
 801cc14:	b930      	cbnz	r0, 801cc24 <__multiply+0x44>
 801cc16:	4602      	mov	r2, r0
 801cc18:	4b44      	ldr	r3, [pc, #272]	@ (801cd2c <__multiply+0x14c>)
 801cc1a:	4845      	ldr	r0, [pc, #276]	@ (801cd30 <__multiply+0x150>)
 801cc1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cc20:	f000 fc74 	bl	801d50c <__assert_func>
 801cc24:	f100 0514 	add.w	r5, r0, #20
 801cc28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cc2c:	462b      	mov	r3, r5
 801cc2e:	2200      	movs	r2, #0
 801cc30:	4543      	cmp	r3, r8
 801cc32:	d321      	bcc.n	801cc78 <__multiply+0x98>
 801cc34:	f107 0114 	add.w	r1, r7, #20
 801cc38:	f104 0214 	add.w	r2, r4, #20
 801cc3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cc40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cc44:	9302      	str	r3, [sp, #8]
 801cc46:	1b13      	subs	r3, r2, r4
 801cc48:	3b15      	subs	r3, #21
 801cc4a:	f023 0303 	bic.w	r3, r3, #3
 801cc4e:	3304      	adds	r3, #4
 801cc50:	f104 0715 	add.w	r7, r4, #21
 801cc54:	42ba      	cmp	r2, r7
 801cc56:	bf38      	it	cc
 801cc58:	2304      	movcc	r3, #4
 801cc5a:	9301      	str	r3, [sp, #4]
 801cc5c:	9b02      	ldr	r3, [sp, #8]
 801cc5e:	9103      	str	r1, [sp, #12]
 801cc60:	428b      	cmp	r3, r1
 801cc62:	d80c      	bhi.n	801cc7e <__multiply+0x9e>
 801cc64:	2e00      	cmp	r6, #0
 801cc66:	dd03      	ble.n	801cc70 <__multiply+0x90>
 801cc68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d05b      	beq.n	801cd28 <__multiply+0x148>
 801cc70:	6106      	str	r6, [r0, #16]
 801cc72:	b005      	add	sp, #20
 801cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc78:	f843 2b04 	str.w	r2, [r3], #4
 801cc7c:	e7d8      	b.n	801cc30 <__multiply+0x50>
 801cc7e:	f8b1 a000 	ldrh.w	sl, [r1]
 801cc82:	f1ba 0f00 	cmp.w	sl, #0
 801cc86:	d024      	beq.n	801ccd2 <__multiply+0xf2>
 801cc88:	f104 0e14 	add.w	lr, r4, #20
 801cc8c:	46a9      	mov	r9, r5
 801cc8e:	f04f 0c00 	mov.w	ip, #0
 801cc92:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cc96:	f8d9 3000 	ldr.w	r3, [r9]
 801cc9a:	fa1f fb87 	uxth.w	fp, r7
 801cc9e:	b29b      	uxth	r3, r3
 801cca0:	fb0a 330b 	mla	r3, sl, fp, r3
 801cca4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801cca8:	f8d9 7000 	ldr.w	r7, [r9]
 801ccac:	4463      	add	r3, ip
 801ccae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ccb2:	fb0a c70b 	mla	r7, sl, fp, ip
 801ccb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ccba:	b29b      	uxth	r3, r3
 801ccbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ccc0:	4572      	cmp	r2, lr
 801ccc2:	f849 3b04 	str.w	r3, [r9], #4
 801ccc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ccca:	d8e2      	bhi.n	801cc92 <__multiply+0xb2>
 801cccc:	9b01      	ldr	r3, [sp, #4]
 801ccce:	f845 c003 	str.w	ip, [r5, r3]
 801ccd2:	9b03      	ldr	r3, [sp, #12]
 801ccd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ccd8:	3104      	adds	r1, #4
 801ccda:	f1b9 0f00 	cmp.w	r9, #0
 801ccde:	d021      	beq.n	801cd24 <__multiply+0x144>
 801cce0:	682b      	ldr	r3, [r5, #0]
 801cce2:	f104 0c14 	add.w	ip, r4, #20
 801cce6:	46ae      	mov	lr, r5
 801cce8:	f04f 0a00 	mov.w	sl, #0
 801ccec:	f8bc b000 	ldrh.w	fp, [ip]
 801ccf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ccf4:	fb09 770b 	mla	r7, r9, fp, r7
 801ccf8:	4457      	add	r7, sl
 801ccfa:	b29b      	uxth	r3, r3
 801ccfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801cd00:	f84e 3b04 	str.w	r3, [lr], #4
 801cd04:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cd08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd0c:	f8be 3000 	ldrh.w	r3, [lr]
 801cd10:	fb09 330a 	mla	r3, r9, sl, r3
 801cd14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801cd18:	4562      	cmp	r2, ip
 801cd1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd1e:	d8e5      	bhi.n	801ccec <__multiply+0x10c>
 801cd20:	9f01      	ldr	r7, [sp, #4]
 801cd22:	51eb      	str	r3, [r5, r7]
 801cd24:	3504      	adds	r5, #4
 801cd26:	e799      	b.n	801cc5c <__multiply+0x7c>
 801cd28:	3e01      	subs	r6, #1
 801cd2a:	e79b      	b.n	801cc64 <__multiply+0x84>
 801cd2c:	0801e1e0 	.word	0x0801e1e0
 801cd30:	0801e1f1 	.word	0x0801e1f1

0801cd34 <__pow5mult>:
 801cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd38:	4615      	mov	r5, r2
 801cd3a:	f012 0203 	ands.w	r2, r2, #3
 801cd3e:	4607      	mov	r7, r0
 801cd40:	460e      	mov	r6, r1
 801cd42:	d007      	beq.n	801cd54 <__pow5mult+0x20>
 801cd44:	4c25      	ldr	r4, [pc, #148]	@ (801cddc <__pow5mult+0xa8>)
 801cd46:	3a01      	subs	r2, #1
 801cd48:	2300      	movs	r3, #0
 801cd4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cd4e:	f7ff fe9f 	bl	801ca90 <__multadd>
 801cd52:	4606      	mov	r6, r0
 801cd54:	10ad      	asrs	r5, r5, #2
 801cd56:	d03d      	beq.n	801cdd4 <__pow5mult+0xa0>
 801cd58:	69fc      	ldr	r4, [r7, #28]
 801cd5a:	b97c      	cbnz	r4, 801cd7c <__pow5mult+0x48>
 801cd5c:	2010      	movs	r0, #16
 801cd5e:	f7fe f8af 	bl	801aec0 <malloc>
 801cd62:	4602      	mov	r2, r0
 801cd64:	61f8      	str	r0, [r7, #28]
 801cd66:	b928      	cbnz	r0, 801cd74 <__pow5mult+0x40>
 801cd68:	4b1d      	ldr	r3, [pc, #116]	@ (801cde0 <__pow5mult+0xac>)
 801cd6a:	481e      	ldr	r0, [pc, #120]	@ (801cde4 <__pow5mult+0xb0>)
 801cd6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cd70:	f000 fbcc 	bl	801d50c <__assert_func>
 801cd74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd78:	6004      	str	r4, [r0, #0]
 801cd7a:	60c4      	str	r4, [r0, #12]
 801cd7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cd80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd84:	b94c      	cbnz	r4, 801cd9a <__pow5mult+0x66>
 801cd86:	f240 2171 	movw	r1, #625	@ 0x271
 801cd8a:	4638      	mov	r0, r7
 801cd8c:	f7ff ff12 	bl	801cbb4 <__i2b>
 801cd90:	2300      	movs	r3, #0
 801cd92:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd96:	4604      	mov	r4, r0
 801cd98:	6003      	str	r3, [r0, #0]
 801cd9a:	f04f 0900 	mov.w	r9, #0
 801cd9e:	07eb      	lsls	r3, r5, #31
 801cda0:	d50a      	bpl.n	801cdb8 <__pow5mult+0x84>
 801cda2:	4631      	mov	r1, r6
 801cda4:	4622      	mov	r2, r4
 801cda6:	4638      	mov	r0, r7
 801cda8:	f7ff ff1a 	bl	801cbe0 <__multiply>
 801cdac:	4631      	mov	r1, r6
 801cdae:	4680      	mov	r8, r0
 801cdb0:	4638      	mov	r0, r7
 801cdb2:	f7ff fe4b 	bl	801ca4c <_Bfree>
 801cdb6:	4646      	mov	r6, r8
 801cdb8:	106d      	asrs	r5, r5, #1
 801cdba:	d00b      	beq.n	801cdd4 <__pow5mult+0xa0>
 801cdbc:	6820      	ldr	r0, [r4, #0]
 801cdbe:	b938      	cbnz	r0, 801cdd0 <__pow5mult+0x9c>
 801cdc0:	4622      	mov	r2, r4
 801cdc2:	4621      	mov	r1, r4
 801cdc4:	4638      	mov	r0, r7
 801cdc6:	f7ff ff0b 	bl	801cbe0 <__multiply>
 801cdca:	6020      	str	r0, [r4, #0]
 801cdcc:	f8c0 9000 	str.w	r9, [r0]
 801cdd0:	4604      	mov	r4, r0
 801cdd2:	e7e4      	b.n	801cd9e <__pow5mult+0x6a>
 801cdd4:	4630      	mov	r0, r6
 801cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdda:	bf00      	nop
 801cddc:	0801e24c 	.word	0x0801e24c
 801cde0:	0801e171 	.word	0x0801e171
 801cde4:	0801e1f1 	.word	0x0801e1f1

0801cde8 <__lshift>:
 801cde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdec:	460c      	mov	r4, r1
 801cdee:	6849      	ldr	r1, [r1, #4]
 801cdf0:	6923      	ldr	r3, [r4, #16]
 801cdf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cdf6:	68a3      	ldr	r3, [r4, #8]
 801cdf8:	4607      	mov	r7, r0
 801cdfa:	4691      	mov	r9, r2
 801cdfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ce00:	f108 0601 	add.w	r6, r8, #1
 801ce04:	42b3      	cmp	r3, r6
 801ce06:	db0b      	blt.n	801ce20 <__lshift+0x38>
 801ce08:	4638      	mov	r0, r7
 801ce0a:	f7ff fddf 	bl	801c9cc <_Balloc>
 801ce0e:	4605      	mov	r5, r0
 801ce10:	b948      	cbnz	r0, 801ce26 <__lshift+0x3e>
 801ce12:	4602      	mov	r2, r0
 801ce14:	4b28      	ldr	r3, [pc, #160]	@ (801ceb8 <__lshift+0xd0>)
 801ce16:	4829      	ldr	r0, [pc, #164]	@ (801cebc <__lshift+0xd4>)
 801ce18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ce1c:	f000 fb76 	bl	801d50c <__assert_func>
 801ce20:	3101      	adds	r1, #1
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	e7ee      	b.n	801ce04 <__lshift+0x1c>
 801ce26:	2300      	movs	r3, #0
 801ce28:	f100 0114 	add.w	r1, r0, #20
 801ce2c:	f100 0210 	add.w	r2, r0, #16
 801ce30:	4618      	mov	r0, r3
 801ce32:	4553      	cmp	r3, sl
 801ce34:	db33      	blt.n	801ce9e <__lshift+0xb6>
 801ce36:	6920      	ldr	r0, [r4, #16]
 801ce38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ce3c:	f104 0314 	add.w	r3, r4, #20
 801ce40:	f019 091f 	ands.w	r9, r9, #31
 801ce44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ce48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ce4c:	d02b      	beq.n	801cea6 <__lshift+0xbe>
 801ce4e:	f1c9 0e20 	rsb	lr, r9, #32
 801ce52:	468a      	mov	sl, r1
 801ce54:	2200      	movs	r2, #0
 801ce56:	6818      	ldr	r0, [r3, #0]
 801ce58:	fa00 f009 	lsl.w	r0, r0, r9
 801ce5c:	4310      	orrs	r0, r2
 801ce5e:	f84a 0b04 	str.w	r0, [sl], #4
 801ce62:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce66:	459c      	cmp	ip, r3
 801ce68:	fa22 f20e 	lsr.w	r2, r2, lr
 801ce6c:	d8f3      	bhi.n	801ce56 <__lshift+0x6e>
 801ce6e:	ebac 0304 	sub.w	r3, ip, r4
 801ce72:	3b15      	subs	r3, #21
 801ce74:	f023 0303 	bic.w	r3, r3, #3
 801ce78:	3304      	adds	r3, #4
 801ce7a:	f104 0015 	add.w	r0, r4, #21
 801ce7e:	4584      	cmp	ip, r0
 801ce80:	bf38      	it	cc
 801ce82:	2304      	movcc	r3, #4
 801ce84:	50ca      	str	r2, [r1, r3]
 801ce86:	b10a      	cbz	r2, 801ce8c <__lshift+0xa4>
 801ce88:	f108 0602 	add.w	r6, r8, #2
 801ce8c:	3e01      	subs	r6, #1
 801ce8e:	4638      	mov	r0, r7
 801ce90:	612e      	str	r6, [r5, #16]
 801ce92:	4621      	mov	r1, r4
 801ce94:	f7ff fdda 	bl	801ca4c <_Bfree>
 801ce98:	4628      	mov	r0, r5
 801ce9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce9e:	f842 0f04 	str.w	r0, [r2, #4]!
 801cea2:	3301      	adds	r3, #1
 801cea4:	e7c5      	b.n	801ce32 <__lshift+0x4a>
 801cea6:	3904      	subs	r1, #4
 801cea8:	f853 2b04 	ldr.w	r2, [r3], #4
 801ceac:	f841 2f04 	str.w	r2, [r1, #4]!
 801ceb0:	459c      	cmp	ip, r3
 801ceb2:	d8f9      	bhi.n	801cea8 <__lshift+0xc0>
 801ceb4:	e7ea      	b.n	801ce8c <__lshift+0xa4>
 801ceb6:	bf00      	nop
 801ceb8:	0801e1e0 	.word	0x0801e1e0
 801cebc:	0801e1f1 	.word	0x0801e1f1

0801cec0 <__mcmp>:
 801cec0:	690a      	ldr	r2, [r1, #16]
 801cec2:	4603      	mov	r3, r0
 801cec4:	6900      	ldr	r0, [r0, #16]
 801cec6:	1a80      	subs	r0, r0, r2
 801cec8:	b530      	push	{r4, r5, lr}
 801ceca:	d10e      	bne.n	801ceea <__mcmp+0x2a>
 801cecc:	3314      	adds	r3, #20
 801cece:	3114      	adds	r1, #20
 801ced0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ced4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ced8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cedc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cee0:	4295      	cmp	r5, r2
 801cee2:	d003      	beq.n	801ceec <__mcmp+0x2c>
 801cee4:	d205      	bcs.n	801cef2 <__mcmp+0x32>
 801cee6:	f04f 30ff 	mov.w	r0, #4294967295
 801ceea:	bd30      	pop	{r4, r5, pc}
 801ceec:	42a3      	cmp	r3, r4
 801ceee:	d3f3      	bcc.n	801ced8 <__mcmp+0x18>
 801cef0:	e7fb      	b.n	801ceea <__mcmp+0x2a>
 801cef2:	2001      	movs	r0, #1
 801cef4:	e7f9      	b.n	801ceea <__mcmp+0x2a>
	...

0801cef8 <__mdiff>:
 801cef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cefc:	4689      	mov	r9, r1
 801cefe:	4606      	mov	r6, r0
 801cf00:	4611      	mov	r1, r2
 801cf02:	4648      	mov	r0, r9
 801cf04:	4614      	mov	r4, r2
 801cf06:	f7ff ffdb 	bl	801cec0 <__mcmp>
 801cf0a:	1e05      	subs	r5, r0, #0
 801cf0c:	d112      	bne.n	801cf34 <__mdiff+0x3c>
 801cf0e:	4629      	mov	r1, r5
 801cf10:	4630      	mov	r0, r6
 801cf12:	f7ff fd5b 	bl	801c9cc <_Balloc>
 801cf16:	4602      	mov	r2, r0
 801cf18:	b928      	cbnz	r0, 801cf26 <__mdiff+0x2e>
 801cf1a:	4b3f      	ldr	r3, [pc, #252]	@ (801d018 <__mdiff+0x120>)
 801cf1c:	f240 2137 	movw	r1, #567	@ 0x237
 801cf20:	483e      	ldr	r0, [pc, #248]	@ (801d01c <__mdiff+0x124>)
 801cf22:	f000 faf3 	bl	801d50c <__assert_func>
 801cf26:	2301      	movs	r3, #1
 801cf28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cf2c:	4610      	mov	r0, r2
 801cf2e:	b003      	add	sp, #12
 801cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf34:	bfbc      	itt	lt
 801cf36:	464b      	movlt	r3, r9
 801cf38:	46a1      	movlt	r9, r4
 801cf3a:	4630      	mov	r0, r6
 801cf3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cf40:	bfba      	itte	lt
 801cf42:	461c      	movlt	r4, r3
 801cf44:	2501      	movlt	r5, #1
 801cf46:	2500      	movge	r5, #0
 801cf48:	f7ff fd40 	bl	801c9cc <_Balloc>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	b918      	cbnz	r0, 801cf58 <__mdiff+0x60>
 801cf50:	4b31      	ldr	r3, [pc, #196]	@ (801d018 <__mdiff+0x120>)
 801cf52:	f240 2145 	movw	r1, #581	@ 0x245
 801cf56:	e7e3      	b.n	801cf20 <__mdiff+0x28>
 801cf58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801cf5c:	6926      	ldr	r6, [r4, #16]
 801cf5e:	60c5      	str	r5, [r0, #12]
 801cf60:	f109 0310 	add.w	r3, r9, #16
 801cf64:	f109 0514 	add.w	r5, r9, #20
 801cf68:	f104 0e14 	add.w	lr, r4, #20
 801cf6c:	f100 0b14 	add.w	fp, r0, #20
 801cf70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801cf74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801cf78:	9301      	str	r3, [sp, #4]
 801cf7a:	46d9      	mov	r9, fp
 801cf7c:	f04f 0c00 	mov.w	ip, #0
 801cf80:	9b01      	ldr	r3, [sp, #4]
 801cf82:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cf86:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cf8a:	9301      	str	r3, [sp, #4]
 801cf8c:	fa1f f38a 	uxth.w	r3, sl
 801cf90:	4619      	mov	r1, r3
 801cf92:	b283      	uxth	r3, r0
 801cf94:	1acb      	subs	r3, r1, r3
 801cf96:	0c00      	lsrs	r0, r0, #16
 801cf98:	4463      	add	r3, ip
 801cf9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801cf9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801cfa2:	b29b      	uxth	r3, r3
 801cfa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801cfa8:	4576      	cmp	r6, lr
 801cfaa:	f849 3b04 	str.w	r3, [r9], #4
 801cfae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cfb2:	d8e5      	bhi.n	801cf80 <__mdiff+0x88>
 801cfb4:	1b33      	subs	r3, r6, r4
 801cfb6:	3b15      	subs	r3, #21
 801cfb8:	f023 0303 	bic.w	r3, r3, #3
 801cfbc:	3415      	adds	r4, #21
 801cfbe:	3304      	adds	r3, #4
 801cfc0:	42a6      	cmp	r6, r4
 801cfc2:	bf38      	it	cc
 801cfc4:	2304      	movcc	r3, #4
 801cfc6:	441d      	add	r5, r3
 801cfc8:	445b      	add	r3, fp
 801cfca:	461e      	mov	r6, r3
 801cfcc:	462c      	mov	r4, r5
 801cfce:	4544      	cmp	r4, r8
 801cfd0:	d30e      	bcc.n	801cff0 <__mdiff+0xf8>
 801cfd2:	f108 0103 	add.w	r1, r8, #3
 801cfd6:	1b49      	subs	r1, r1, r5
 801cfd8:	f021 0103 	bic.w	r1, r1, #3
 801cfdc:	3d03      	subs	r5, #3
 801cfde:	45a8      	cmp	r8, r5
 801cfe0:	bf38      	it	cc
 801cfe2:	2100      	movcc	r1, #0
 801cfe4:	440b      	add	r3, r1
 801cfe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cfea:	b191      	cbz	r1, 801d012 <__mdiff+0x11a>
 801cfec:	6117      	str	r7, [r2, #16]
 801cfee:	e79d      	b.n	801cf2c <__mdiff+0x34>
 801cff0:	f854 1b04 	ldr.w	r1, [r4], #4
 801cff4:	46e6      	mov	lr, ip
 801cff6:	0c08      	lsrs	r0, r1, #16
 801cff8:	fa1c fc81 	uxtah	ip, ip, r1
 801cffc:	4471      	add	r1, lr
 801cffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d002:	b289      	uxth	r1, r1
 801d004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d008:	f846 1b04 	str.w	r1, [r6], #4
 801d00c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d010:	e7dd      	b.n	801cfce <__mdiff+0xd6>
 801d012:	3f01      	subs	r7, #1
 801d014:	e7e7      	b.n	801cfe6 <__mdiff+0xee>
 801d016:	bf00      	nop
 801d018:	0801e1e0 	.word	0x0801e1e0
 801d01c:	0801e1f1 	.word	0x0801e1f1

0801d020 <__d2b>:
 801d020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d024:	460f      	mov	r7, r1
 801d026:	2101      	movs	r1, #1
 801d028:	ec59 8b10 	vmov	r8, r9, d0
 801d02c:	4616      	mov	r6, r2
 801d02e:	f7ff fccd 	bl	801c9cc <_Balloc>
 801d032:	4604      	mov	r4, r0
 801d034:	b930      	cbnz	r0, 801d044 <__d2b+0x24>
 801d036:	4602      	mov	r2, r0
 801d038:	4b23      	ldr	r3, [pc, #140]	@ (801d0c8 <__d2b+0xa8>)
 801d03a:	4824      	ldr	r0, [pc, #144]	@ (801d0cc <__d2b+0xac>)
 801d03c:	f240 310f 	movw	r1, #783	@ 0x30f
 801d040:	f000 fa64 	bl	801d50c <__assert_func>
 801d044:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d04c:	b10d      	cbz	r5, 801d052 <__d2b+0x32>
 801d04e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d052:	9301      	str	r3, [sp, #4]
 801d054:	f1b8 0300 	subs.w	r3, r8, #0
 801d058:	d023      	beq.n	801d0a2 <__d2b+0x82>
 801d05a:	4668      	mov	r0, sp
 801d05c:	9300      	str	r3, [sp, #0]
 801d05e:	f7ff fd7c 	bl	801cb5a <__lo0bits>
 801d062:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d066:	b1d0      	cbz	r0, 801d09e <__d2b+0x7e>
 801d068:	f1c0 0320 	rsb	r3, r0, #32
 801d06c:	fa02 f303 	lsl.w	r3, r2, r3
 801d070:	430b      	orrs	r3, r1
 801d072:	40c2      	lsrs	r2, r0
 801d074:	6163      	str	r3, [r4, #20]
 801d076:	9201      	str	r2, [sp, #4]
 801d078:	9b01      	ldr	r3, [sp, #4]
 801d07a:	61a3      	str	r3, [r4, #24]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	bf0c      	ite	eq
 801d080:	2201      	moveq	r2, #1
 801d082:	2202      	movne	r2, #2
 801d084:	6122      	str	r2, [r4, #16]
 801d086:	b1a5      	cbz	r5, 801d0b2 <__d2b+0x92>
 801d088:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d08c:	4405      	add	r5, r0
 801d08e:	603d      	str	r5, [r7, #0]
 801d090:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d094:	6030      	str	r0, [r6, #0]
 801d096:	4620      	mov	r0, r4
 801d098:	b003      	add	sp, #12
 801d09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d09e:	6161      	str	r1, [r4, #20]
 801d0a0:	e7ea      	b.n	801d078 <__d2b+0x58>
 801d0a2:	a801      	add	r0, sp, #4
 801d0a4:	f7ff fd59 	bl	801cb5a <__lo0bits>
 801d0a8:	9b01      	ldr	r3, [sp, #4]
 801d0aa:	6163      	str	r3, [r4, #20]
 801d0ac:	3020      	adds	r0, #32
 801d0ae:	2201      	movs	r2, #1
 801d0b0:	e7e8      	b.n	801d084 <__d2b+0x64>
 801d0b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d0b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d0ba:	6038      	str	r0, [r7, #0]
 801d0bc:	6918      	ldr	r0, [r3, #16]
 801d0be:	f7ff fd2d 	bl	801cb1c <__hi0bits>
 801d0c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d0c6:	e7e5      	b.n	801d094 <__d2b+0x74>
 801d0c8:	0801e1e0 	.word	0x0801e1e0
 801d0cc:	0801e1f1 	.word	0x0801e1f1

0801d0d0 <__ssputs_r>:
 801d0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0d4:	688e      	ldr	r6, [r1, #8]
 801d0d6:	461f      	mov	r7, r3
 801d0d8:	42be      	cmp	r6, r7
 801d0da:	680b      	ldr	r3, [r1, #0]
 801d0dc:	4682      	mov	sl, r0
 801d0de:	460c      	mov	r4, r1
 801d0e0:	4690      	mov	r8, r2
 801d0e2:	d82d      	bhi.n	801d140 <__ssputs_r+0x70>
 801d0e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d0e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d0ec:	d026      	beq.n	801d13c <__ssputs_r+0x6c>
 801d0ee:	6965      	ldr	r5, [r4, #20]
 801d0f0:	6909      	ldr	r1, [r1, #16]
 801d0f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0f6:	eba3 0901 	sub.w	r9, r3, r1
 801d0fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d0fe:	1c7b      	adds	r3, r7, #1
 801d100:	444b      	add	r3, r9
 801d102:	106d      	asrs	r5, r5, #1
 801d104:	429d      	cmp	r5, r3
 801d106:	bf38      	it	cc
 801d108:	461d      	movcc	r5, r3
 801d10a:	0553      	lsls	r3, r2, #21
 801d10c:	d527      	bpl.n	801d15e <__ssputs_r+0x8e>
 801d10e:	4629      	mov	r1, r5
 801d110:	f7fd ff08 	bl	801af24 <_malloc_r>
 801d114:	4606      	mov	r6, r0
 801d116:	b360      	cbz	r0, 801d172 <__ssputs_r+0xa2>
 801d118:	6921      	ldr	r1, [r4, #16]
 801d11a:	464a      	mov	r2, r9
 801d11c:	f7fe fdaf 	bl	801bc7e <memcpy>
 801d120:	89a3      	ldrh	r3, [r4, #12]
 801d122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d12a:	81a3      	strh	r3, [r4, #12]
 801d12c:	6126      	str	r6, [r4, #16]
 801d12e:	6165      	str	r5, [r4, #20]
 801d130:	444e      	add	r6, r9
 801d132:	eba5 0509 	sub.w	r5, r5, r9
 801d136:	6026      	str	r6, [r4, #0]
 801d138:	60a5      	str	r5, [r4, #8]
 801d13a:	463e      	mov	r6, r7
 801d13c:	42be      	cmp	r6, r7
 801d13e:	d900      	bls.n	801d142 <__ssputs_r+0x72>
 801d140:	463e      	mov	r6, r7
 801d142:	6820      	ldr	r0, [r4, #0]
 801d144:	4632      	mov	r2, r6
 801d146:	4641      	mov	r1, r8
 801d148:	f000 f9c6 	bl	801d4d8 <memmove>
 801d14c:	68a3      	ldr	r3, [r4, #8]
 801d14e:	1b9b      	subs	r3, r3, r6
 801d150:	60a3      	str	r3, [r4, #8]
 801d152:	6823      	ldr	r3, [r4, #0]
 801d154:	4433      	add	r3, r6
 801d156:	6023      	str	r3, [r4, #0]
 801d158:	2000      	movs	r0, #0
 801d15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d15e:	462a      	mov	r2, r5
 801d160:	f000 fa18 	bl	801d594 <_realloc_r>
 801d164:	4606      	mov	r6, r0
 801d166:	2800      	cmp	r0, #0
 801d168:	d1e0      	bne.n	801d12c <__ssputs_r+0x5c>
 801d16a:	6921      	ldr	r1, [r4, #16]
 801d16c:	4650      	mov	r0, sl
 801d16e:	f7ff fbe3 	bl	801c938 <_free_r>
 801d172:	230c      	movs	r3, #12
 801d174:	f8ca 3000 	str.w	r3, [sl]
 801d178:	89a3      	ldrh	r3, [r4, #12]
 801d17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d17e:	81a3      	strh	r3, [r4, #12]
 801d180:	f04f 30ff 	mov.w	r0, #4294967295
 801d184:	e7e9      	b.n	801d15a <__ssputs_r+0x8a>
	...

0801d188 <_svfiprintf_r>:
 801d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d18c:	4698      	mov	r8, r3
 801d18e:	898b      	ldrh	r3, [r1, #12]
 801d190:	061b      	lsls	r3, r3, #24
 801d192:	b09d      	sub	sp, #116	@ 0x74
 801d194:	4607      	mov	r7, r0
 801d196:	460d      	mov	r5, r1
 801d198:	4614      	mov	r4, r2
 801d19a:	d510      	bpl.n	801d1be <_svfiprintf_r+0x36>
 801d19c:	690b      	ldr	r3, [r1, #16]
 801d19e:	b973      	cbnz	r3, 801d1be <_svfiprintf_r+0x36>
 801d1a0:	2140      	movs	r1, #64	@ 0x40
 801d1a2:	f7fd febf 	bl	801af24 <_malloc_r>
 801d1a6:	6028      	str	r0, [r5, #0]
 801d1a8:	6128      	str	r0, [r5, #16]
 801d1aa:	b930      	cbnz	r0, 801d1ba <_svfiprintf_r+0x32>
 801d1ac:	230c      	movs	r3, #12
 801d1ae:	603b      	str	r3, [r7, #0]
 801d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801d1b4:	b01d      	add	sp, #116	@ 0x74
 801d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1ba:	2340      	movs	r3, #64	@ 0x40
 801d1bc:	616b      	str	r3, [r5, #20]
 801d1be:	2300      	movs	r3, #0
 801d1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1c2:	2320      	movs	r3, #32
 801d1c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1cc:	2330      	movs	r3, #48	@ 0x30
 801d1ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d36c <_svfiprintf_r+0x1e4>
 801d1d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d1d6:	f04f 0901 	mov.w	r9, #1
 801d1da:	4623      	mov	r3, r4
 801d1dc:	469a      	mov	sl, r3
 801d1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1e2:	b10a      	cbz	r2, 801d1e8 <_svfiprintf_r+0x60>
 801d1e4:	2a25      	cmp	r2, #37	@ 0x25
 801d1e6:	d1f9      	bne.n	801d1dc <_svfiprintf_r+0x54>
 801d1e8:	ebba 0b04 	subs.w	fp, sl, r4
 801d1ec:	d00b      	beq.n	801d206 <_svfiprintf_r+0x7e>
 801d1ee:	465b      	mov	r3, fp
 801d1f0:	4622      	mov	r2, r4
 801d1f2:	4629      	mov	r1, r5
 801d1f4:	4638      	mov	r0, r7
 801d1f6:	f7ff ff6b 	bl	801d0d0 <__ssputs_r>
 801d1fa:	3001      	adds	r0, #1
 801d1fc:	f000 80a7 	beq.w	801d34e <_svfiprintf_r+0x1c6>
 801d200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d202:	445a      	add	r2, fp
 801d204:	9209      	str	r2, [sp, #36]	@ 0x24
 801d206:	f89a 3000 	ldrb.w	r3, [sl]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	f000 809f 	beq.w	801d34e <_svfiprintf_r+0x1c6>
 801d210:	2300      	movs	r3, #0
 801d212:	f04f 32ff 	mov.w	r2, #4294967295
 801d216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d21a:	f10a 0a01 	add.w	sl, sl, #1
 801d21e:	9304      	str	r3, [sp, #16]
 801d220:	9307      	str	r3, [sp, #28]
 801d222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d226:	931a      	str	r3, [sp, #104]	@ 0x68
 801d228:	4654      	mov	r4, sl
 801d22a:	2205      	movs	r2, #5
 801d22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d230:	484e      	ldr	r0, [pc, #312]	@ (801d36c <_svfiprintf_r+0x1e4>)
 801d232:	f7e2 ffed 	bl	8000210 <memchr>
 801d236:	9a04      	ldr	r2, [sp, #16]
 801d238:	b9d8      	cbnz	r0, 801d272 <_svfiprintf_r+0xea>
 801d23a:	06d0      	lsls	r0, r2, #27
 801d23c:	bf44      	itt	mi
 801d23e:	2320      	movmi	r3, #32
 801d240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d244:	0711      	lsls	r1, r2, #28
 801d246:	bf44      	itt	mi
 801d248:	232b      	movmi	r3, #43	@ 0x2b
 801d24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d24e:	f89a 3000 	ldrb.w	r3, [sl]
 801d252:	2b2a      	cmp	r3, #42	@ 0x2a
 801d254:	d015      	beq.n	801d282 <_svfiprintf_r+0xfa>
 801d256:	9a07      	ldr	r2, [sp, #28]
 801d258:	4654      	mov	r4, sl
 801d25a:	2000      	movs	r0, #0
 801d25c:	f04f 0c0a 	mov.w	ip, #10
 801d260:	4621      	mov	r1, r4
 801d262:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d266:	3b30      	subs	r3, #48	@ 0x30
 801d268:	2b09      	cmp	r3, #9
 801d26a:	d94b      	bls.n	801d304 <_svfiprintf_r+0x17c>
 801d26c:	b1b0      	cbz	r0, 801d29c <_svfiprintf_r+0x114>
 801d26e:	9207      	str	r2, [sp, #28]
 801d270:	e014      	b.n	801d29c <_svfiprintf_r+0x114>
 801d272:	eba0 0308 	sub.w	r3, r0, r8
 801d276:	fa09 f303 	lsl.w	r3, r9, r3
 801d27a:	4313      	orrs	r3, r2
 801d27c:	9304      	str	r3, [sp, #16]
 801d27e:	46a2      	mov	sl, r4
 801d280:	e7d2      	b.n	801d228 <_svfiprintf_r+0xa0>
 801d282:	9b03      	ldr	r3, [sp, #12]
 801d284:	1d19      	adds	r1, r3, #4
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	9103      	str	r1, [sp, #12]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	bfbb      	ittet	lt
 801d28e:	425b      	neglt	r3, r3
 801d290:	f042 0202 	orrlt.w	r2, r2, #2
 801d294:	9307      	strge	r3, [sp, #28]
 801d296:	9307      	strlt	r3, [sp, #28]
 801d298:	bfb8      	it	lt
 801d29a:	9204      	strlt	r2, [sp, #16]
 801d29c:	7823      	ldrb	r3, [r4, #0]
 801d29e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d2a0:	d10a      	bne.n	801d2b8 <_svfiprintf_r+0x130>
 801d2a2:	7863      	ldrb	r3, [r4, #1]
 801d2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2a6:	d132      	bne.n	801d30e <_svfiprintf_r+0x186>
 801d2a8:	9b03      	ldr	r3, [sp, #12]
 801d2aa:	1d1a      	adds	r2, r3, #4
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	9203      	str	r2, [sp, #12]
 801d2b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d2b4:	3402      	adds	r4, #2
 801d2b6:	9305      	str	r3, [sp, #20]
 801d2b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d37c <_svfiprintf_r+0x1f4>
 801d2bc:	7821      	ldrb	r1, [r4, #0]
 801d2be:	2203      	movs	r2, #3
 801d2c0:	4650      	mov	r0, sl
 801d2c2:	f7e2 ffa5 	bl	8000210 <memchr>
 801d2c6:	b138      	cbz	r0, 801d2d8 <_svfiprintf_r+0x150>
 801d2c8:	9b04      	ldr	r3, [sp, #16]
 801d2ca:	eba0 000a 	sub.w	r0, r0, sl
 801d2ce:	2240      	movs	r2, #64	@ 0x40
 801d2d0:	4082      	lsls	r2, r0
 801d2d2:	4313      	orrs	r3, r2
 801d2d4:	3401      	adds	r4, #1
 801d2d6:	9304      	str	r3, [sp, #16]
 801d2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2dc:	4824      	ldr	r0, [pc, #144]	@ (801d370 <_svfiprintf_r+0x1e8>)
 801d2de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d2e2:	2206      	movs	r2, #6
 801d2e4:	f7e2 ff94 	bl	8000210 <memchr>
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	d036      	beq.n	801d35a <_svfiprintf_r+0x1d2>
 801d2ec:	4b21      	ldr	r3, [pc, #132]	@ (801d374 <_svfiprintf_r+0x1ec>)
 801d2ee:	bb1b      	cbnz	r3, 801d338 <_svfiprintf_r+0x1b0>
 801d2f0:	9b03      	ldr	r3, [sp, #12]
 801d2f2:	3307      	adds	r3, #7
 801d2f4:	f023 0307 	bic.w	r3, r3, #7
 801d2f8:	3308      	adds	r3, #8
 801d2fa:	9303      	str	r3, [sp, #12]
 801d2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2fe:	4433      	add	r3, r6
 801d300:	9309      	str	r3, [sp, #36]	@ 0x24
 801d302:	e76a      	b.n	801d1da <_svfiprintf_r+0x52>
 801d304:	fb0c 3202 	mla	r2, ip, r2, r3
 801d308:	460c      	mov	r4, r1
 801d30a:	2001      	movs	r0, #1
 801d30c:	e7a8      	b.n	801d260 <_svfiprintf_r+0xd8>
 801d30e:	2300      	movs	r3, #0
 801d310:	3401      	adds	r4, #1
 801d312:	9305      	str	r3, [sp, #20]
 801d314:	4619      	mov	r1, r3
 801d316:	f04f 0c0a 	mov.w	ip, #10
 801d31a:	4620      	mov	r0, r4
 801d31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d320:	3a30      	subs	r2, #48	@ 0x30
 801d322:	2a09      	cmp	r2, #9
 801d324:	d903      	bls.n	801d32e <_svfiprintf_r+0x1a6>
 801d326:	2b00      	cmp	r3, #0
 801d328:	d0c6      	beq.n	801d2b8 <_svfiprintf_r+0x130>
 801d32a:	9105      	str	r1, [sp, #20]
 801d32c:	e7c4      	b.n	801d2b8 <_svfiprintf_r+0x130>
 801d32e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d332:	4604      	mov	r4, r0
 801d334:	2301      	movs	r3, #1
 801d336:	e7f0      	b.n	801d31a <_svfiprintf_r+0x192>
 801d338:	ab03      	add	r3, sp, #12
 801d33a:	9300      	str	r3, [sp, #0]
 801d33c:	462a      	mov	r2, r5
 801d33e:	4b0e      	ldr	r3, [pc, #56]	@ (801d378 <_svfiprintf_r+0x1f0>)
 801d340:	a904      	add	r1, sp, #16
 801d342:	4638      	mov	r0, r7
 801d344:	f7fd ff1a 	bl	801b17c <_printf_float>
 801d348:	1c42      	adds	r2, r0, #1
 801d34a:	4606      	mov	r6, r0
 801d34c:	d1d6      	bne.n	801d2fc <_svfiprintf_r+0x174>
 801d34e:	89ab      	ldrh	r3, [r5, #12]
 801d350:	065b      	lsls	r3, r3, #25
 801d352:	f53f af2d 	bmi.w	801d1b0 <_svfiprintf_r+0x28>
 801d356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d358:	e72c      	b.n	801d1b4 <_svfiprintf_r+0x2c>
 801d35a:	ab03      	add	r3, sp, #12
 801d35c:	9300      	str	r3, [sp, #0]
 801d35e:	462a      	mov	r2, r5
 801d360:	4b05      	ldr	r3, [pc, #20]	@ (801d378 <_svfiprintf_r+0x1f0>)
 801d362:	a904      	add	r1, sp, #16
 801d364:	4638      	mov	r0, r7
 801d366:	f7fe f9a1 	bl	801b6ac <_printf_i>
 801d36a:	e7ed      	b.n	801d348 <_svfiprintf_r+0x1c0>
 801d36c:	0801e348 	.word	0x0801e348
 801d370:	0801e352 	.word	0x0801e352
 801d374:	0801b17d 	.word	0x0801b17d
 801d378:	0801d0d1 	.word	0x0801d0d1
 801d37c:	0801e34e 	.word	0x0801e34e

0801d380 <__sflush_r>:
 801d380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d388:	0716      	lsls	r6, r2, #28
 801d38a:	4605      	mov	r5, r0
 801d38c:	460c      	mov	r4, r1
 801d38e:	d454      	bmi.n	801d43a <__sflush_r+0xba>
 801d390:	684b      	ldr	r3, [r1, #4]
 801d392:	2b00      	cmp	r3, #0
 801d394:	dc02      	bgt.n	801d39c <__sflush_r+0x1c>
 801d396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d398:	2b00      	cmp	r3, #0
 801d39a:	dd48      	ble.n	801d42e <__sflush_r+0xae>
 801d39c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d39e:	2e00      	cmp	r6, #0
 801d3a0:	d045      	beq.n	801d42e <__sflush_r+0xae>
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d3a8:	682f      	ldr	r7, [r5, #0]
 801d3aa:	6a21      	ldr	r1, [r4, #32]
 801d3ac:	602b      	str	r3, [r5, #0]
 801d3ae:	d030      	beq.n	801d412 <__sflush_r+0x92>
 801d3b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d3b2:	89a3      	ldrh	r3, [r4, #12]
 801d3b4:	0759      	lsls	r1, r3, #29
 801d3b6:	d505      	bpl.n	801d3c4 <__sflush_r+0x44>
 801d3b8:	6863      	ldr	r3, [r4, #4]
 801d3ba:	1ad2      	subs	r2, r2, r3
 801d3bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d3be:	b10b      	cbz	r3, 801d3c4 <__sflush_r+0x44>
 801d3c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d3c2:	1ad2      	subs	r2, r2, r3
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d3c8:	6a21      	ldr	r1, [r4, #32]
 801d3ca:	4628      	mov	r0, r5
 801d3cc:	47b0      	blx	r6
 801d3ce:	1c43      	adds	r3, r0, #1
 801d3d0:	89a3      	ldrh	r3, [r4, #12]
 801d3d2:	d106      	bne.n	801d3e2 <__sflush_r+0x62>
 801d3d4:	6829      	ldr	r1, [r5, #0]
 801d3d6:	291d      	cmp	r1, #29
 801d3d8:	d82b      	bhi.n	801d432 <__sflush_r+0xb2>
 801d3da:	4a2a      	ldr	r2, [pc, #168]	@ (801d484 <__sflush_r+0x104>)
 801d3dc:	410a      	asrs	r2, r1
 801d3de:	07d6      	lsls	r6, r2, #31
 801d3e0:	d427      	bmi.n	801d432 <__sflush_r+0xb2>
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	6062      	str	r2, [r4, #4]
 801d3e6:	04d9      	lsls	r1, r3, #19
 801d3e8:	6922      	ldr	r2, [r4, #16]
 801d3ea:	6022      	str	r2, [r4, #0]
 801d3ec:	d504      	bpl.n	801d3f8 <__sflush_r+0x78>
 801d3ee:	1c42      	adds	r2, r0, #1
 801d3f0:	d101      	bne.n	801d3f6 <__sflush_r+0x76>
 801d3f2:	682b      	ldr	r3, [r5, #0]
 801d3f4:	b903      	cbnz	r3, 801d3f8 <__sflush_r+0x78>
 801d3f6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d3fa:	602f      	str	r7, [r5, #0]
 801d3fc:	b1b9      	cbz	r1, 801d42e <__sflush_r+0xae>
 801d3fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d402:	4299      	cmp	r1, r3
 801d404:	d002      	beq.n	801d40c <__sflush_r+0x8c>
 801d406:	4628      	mov	r0, r5
 801d408:	f7ff fa96 	bl	801c938 <_free_r>
 801d40c:	2300      	movs	r3, #0
 801d40e:	6363      	str	r3, [r4, #52]	@ 0x34
 801d410:	e00d      	b.n	801d42e <__sflush_r+0xae>
 801d412:	2301      	movs	r3, #1
 801d414:	4628      	mov	r0, r5
 801d416:	47b0      	blx	r6
 801d418:	4602      	mov	r2, r0
 801d41a:	1c50      	adds	r0, r2, #1
 801d41c:	d1c9      	bne.n	801d3b2 <__sflush_r+0x32>
 801d41e:	682b      	ldr	r3, [r5, #0]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d0c6      	beq.n	801d3b2 <__sflush_r+0x32>
 801d424:	2b1d      	cmp	r3, #29
 801d426:	d001      	beq.n	801d42c <__sflush_r+0xac>
 801d428:	2b16      	cmp	r3, #22
 801d42a:	d11e      	bne.n	801d46a <__sflush_r+0xea>
 801d42c:	602f      	str	r7, [r5, #0]
 801d42e:	2000      	movs	r0, #0
 801d430:	e022      	b.n	801d478 <__sflush_r+0xf8>
 801d432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d436:	b21b      	sxth	r3, r3
 801d438:	e01b      	b.n	801d472 <__sflush_r+0xf2>
 801d43a:	690f      	ldr	r7, [r1, #16]
 801d43c:	2f00      	cmp	r7, #0
 801d43e:	d0f6      	beq.n	801d42e <__sflush_r+0xae>
 801d440:	0793      	lsls	r3, r2, #30
 801d442:	680e      	ldr	r6, [r1, #0]
 801d444:	bf08      	it	eq
 801d446:	694b      	ldreq	r3, [r1, #20]
 801d448:	600f      	str	r7, [r1, #0]
 801d44a:	bf18      	it	ne
 801d44c:	2300      	movne	r3, #0
 801d44e:	eba6 0807 	sub.w	r8, r6, r7
 801d452:	608b      	str	r3, [r1, #8]
 801d454:	f1b8 0f00 	cmp.w	r8, #0
 801d458:	dde9      	ble.n	801d42e <__sflush_r+0xae>
 801d45a:	6a21      	ldr	r1, [r4, #32]
 801d45c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d45e:	4643      	mov	r3, r8
 801d460:	463a      	mov	r2, r7
 801d462:	4628      	mov	r0, r5
 801d464:	47b0      	blx	r6
 801d466:	2800      	cmp	r0, #0
 801d468:	dc08      	bgt.n	801d47c <__sflush_r+0xfc>
 801d46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d472:	81a3      	strh	r3, [r4, #12]
 801d474:	f04f 30ff 	mov.w	r0, #4294967295
 801d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d47c:	4407      	add	r7, r0
 801d47e:	eba8 0800 	sub.w	r8, r8, r0
 801d482:	e7e7      	b.n	801d454 <__sflush_r+0xd4>
 801d484:	dfbffffe 	.word	0xdfbffffe

0801d488 <_fflush_r>:
 801d488:	b538      	push	{r3, r4, r5, lr}
 801d48a:	690b      	ldr	r3, [r1, #16]
 801d48c:	4605      	mov	r5, r0
 801d48e:	460c      	mov	r4, r1
 801d490:	b913      	cbnz	r3, 801d498 <_fflush_r+0x10>
 801d492:	2500      	movs	r5, #0
 801d494:	4628      	mov	r0, r5
 801d496:	bd38      	pop	{r3, r4, r5, pc}
 801d498:	b118      	cbz	r0, 801d4a2 <_fflush_r+0x1a>
 801d49a:	6a03      	ldr	r3, [r0, #32]
 801d49c:	b90b      	cbnz	r3, 801d4a2 <_fflush_r+0x1a>
 801d49e:	f7fe fab1 	bl	801ba04 <__sinit>
 801d4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d0f3      	beq.n	801d492 <_fflush_r+0xa>
 801d4aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d4ac:	07d0      	lsls	r0, r2, #31
 801d4ae:	d404      	bmi.n	801d4ba <_fflush_r+0x32>
 801d4b0:	0599      	lsls	r1, r3, #22
 801d4b2:	d402      	bmi.n	801d4ba <_fflush_r+0x32>
 801d4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d4b6:	f7fe fbe0 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801d4ba:	4628      	mov	r0, r5
 801d4bc:	4621      	mov	r1, r4
 801d4be:	f7ff ff5f 	bl	801d380 <__sflush_r>
 801d4c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d4c4:	07da      	lsls	r2, r3, #31
 801d4c6:	4605      	mov	r5, r0
 801d4c8:	d4e4      	bmi.n	801d494 <_fflush_r+0xc>
 801d4ca:	89a3      	ldrh	r3, [r4, #12]
 801d4cc:	059b      	lsls	r3, r3, #22
 801d4ce:	d4e1      	bmi.n	801d494 <_fflush_r+0xc>
 801d4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d4d2:	f7fe fbd3 	bl	801bc7c <__retarget_lock_release_recursive>
 801d4d6:	e7dd      	b.n	801d494 <_fflush_r+0xc>

0801d4d8 <memmove>:
 801d4d8:	4288      	cmp	r0, r1
 801d4da:	b510      	push	{r4, lr}
 801d4dc:	eb01 0402 	add.w	r4, r1, r2
 801d4e0:	d902      	bls.n	801d4e8 <memmove+0x10>
 801d4e2:	4284      	cmp	r4, r0
 801d4e4:	4623      	mov	r3, r4
 801d4e6:	d807      	bhi.n	801d4f8 <memmove+0x20>
 801d4e8:	1e43      	subs	r3, r0, #1
 801d4ea:	42a1      	cmp	r1, r4
 801d4ec:	d008      	beq.n	801d500 <memmove+0x28>
 801d4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d4f6:	e7f8      	b.n	801d4ea <memmove+0x12>
 801d4f8:	4402      	add	r2, r0
 801d4fa:	4601      	mov	r1, r0
 801d4fc:	428a      	cmp	r2, r1
 801d4fe:	d100      	bne.n	801d502 <memmove+0x2a>
 801d500:	bd10      	pop	{r4, pc}
 801d502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d50a:	e7f7      	b.n	801d4fc <memmove+0x24>

0801d50c <__assert_func>:
 801d50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d50e:	4614      	mov	r4, r2
 801d510:	461a      	mov	r2, r3
 801d512:	4b09      	ldr	r3, [pc, #36]	@ (801d538 <__assert_func+0x2c>)
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	4605      	mov	r5, r0
 801d518:	68d8      	ldr	r0, [r3, #12]
 801d51a:	b954      	cbnz	r4, 801d532 <__assert_func+0x26>
 801d51c:	4b07      	ldr	r3, [pc, #28]	@ (801d53c <__assert_func+0x30>)
 801d51e:	461c      	mov	r4, r3
 801d520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d524:	9100      	str	r1, [sp, #0]
 801d526:	462b      	mov	r3, r5
 801d528:	4905      	ldr	r1, [pc, #20]	@ (801d540 <__assert_func+0x34>)
 801d52a:	f000 f86f 	bl	801d60c <fiprintf>
 801d52e:	f000 f87f 	bl	801d630 <abort>
 801d532:	4b04      	ldr	r3, [pc, #16]	@ (801d544 <__assert_func+0x38>)
 801d534:	e7f4      	b.n	801d520 <__assert_func+0x14>
 801d536:	bf00      	nop
 801d538:	2000003c 	.word	0x2000003c
 801d53c:	0801e39e 	.word	0x0801e39e
 801d540:	0801e370 	.word	0x0801e370
 801d544:	0801e363 	.word	0x0801e363

0801d548 <_calloc_r>:
 801d548:	b570      	push	{r4, r5, r6, lr}
 801d54a:	fba1 5402 	umull	r5, r4, r1, r2
 801d54e:	b93c      	cbnz	r4, 801d560 <_calloc_r+0x18>
 801d550:	4629      	mov	r1, r5
 801d552:	f7fd fce7 	bl	801af24 <_malloc_r>
 801d556:	4606      	mov	r6, r0
 801d558:	b928      	cbnz	r0, 801d566 <_calloc_r+0x1e>
 801d55a:	2600      	movs	r6, #0
 801d55c:	4630      	mov	r0, r6
 801d55e:	bd70      	pop	{r4, r5, r6, pc}
 801d560:	220c      	movs	r2, #12
 801d562:	6002      	str	r2, [r0, #0]
 801d564:	e7f9      	b.n	801d55a <_calloc_r+0x12>
 801d566:	462a      	mov	r2, r5
 801d568:	4621      	mov	r1, r4
 801d56a:	f7fe faf8 	bl	801bb5e <memset>
 801d56e:	e7f5      	b.n	801d55c <_calloc_r+0x14>

0801d570 <__ascii_mbtowc>:
 801d570:	b082      	sub	sp, #8
 801d572:	b901      	cbnz	r1, 801d576 <__ascii_mbtowc+0x6>
 801d574:	a901      	add	r1, sp, #4
 801d576:	b142      	cbz	r2, 801d58a <__ascii_mbtowc+0x1a>
 801d578:	b14b      	cbz	r3, 801d58e <__ascii_mbtowc+0x1e>
 801d57a:	7813      	ldrb	r3, [r2, #0]
 801d57c:	600b      	str	r3, [r1, #0]
 801d57e:	7812      	ldrb	r2, [r2, #0]
 801d580:	1e10      	subs	r0, r2, #0
 801d582:	bf18      	it	ne
 801d584:	2001      	movne	r0, #1
 801d586:	b002      	add	sp, #8
 801d588:	4770      	bx	lr
 801d58a:	4610      	mov	r0, r2
 801d58c:	e7fb      	b.n	801d586 <__ascii_mbtowc+0x16>
 801d58e:	f06f 0001 	mvn.w	r0, #1
 801d592:	e7f8      	b.n	801d586 <__ascii_mbtowc+0x16>

0801d594 <_realloc_r>:
 801d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d598:	4680      	mov	r8, r0
 801d59a:	4615      	mov	r5, r2
 801d59c:	460c      	mov	r4, r1
 801d59e:	b921      	cbnz	r1, 801d5aa <_realloc_r+0x16>
 801d5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a4:	4611      	mov	r1, r2
 801d5a6:	f7fd bcbd 	b.w	801af24 <_malloc_r>
 801d5aa:	b92a      	cbnz	r2, 801d5b8 <_realloc_r+0x24>
 801d5ac:	f7ff f9c4 	bl	801c938 <_free_r>
 801d5b0:	2400      	movs	r4, #0
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5b8:	f000 f841 	bl	801d63e <_malloc_usable_size_r>
 801d5bc:	4285      	cmp	r5, r0
 801d5be:	4606      	mov	r6, r0
 801d5c0:	d802      	bhi.n	801d5c8 <_realloc_r+0x34>
 801d5c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d5c6:	d8f4      	bhi.n	801d5b2 <_realloc_r+0x1e>
 801d5c8:	4629      	mov	r1, r5
 801d5ca:	4640      	mov	r0, r8
 801d5cc:	f7fd fcaa 	bl	801af24 <_malloc_r>
 801d5d0:	4607      	mov	r7, r0
 801d5d2:	2800      	cmp	r0, #0
 801d5d4:	d0ec      	beq.n	801d5b0 <_realloc_r+0x1c>
 801d5d6:	42b5      	cmp	r5, r6
 801d5d8:	462a      	mov	r2, r5
 801d5da:	4621      	mov	r1, r4
 801d5dc:	bf28      	it	cs
 801d5de:	4632      	movcs	r2, r6
 801d5e0:	f7fe fb4d 	bl	801bc7e <memcpy>
 801d5e4:	4621      	mov	r1, r4
 801d5e6:	4640      	mov	r0, r8
 801d5e8:	f7ff f9a6 	bl	801c938 <_free_r>
 801d5ec:	463c      	mov	r4, r7
 801d5ee:	e7e0      	b.n	801d5b2 <_realloc_r+0x1e>

0801d5f0 <__ascii_wctomb>:
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	4608      	mov	r0, r1
 801d5f4:	b141      	cbz	r1, 801d608 <__ascii_wctomb+0x18>
 801d5f6:	2aff      	cmp	r2, #255	@ 0xff
 801d5f8:	d904      	bls.n	801d604 <__ascii_wctomb+0x14>
 801d5fa:	228a      	movs	r2, #138	@ 0x8a
 801d5fc:	601a      	str	r2, [r3, #0]
 801d5fe:	f04f 30ff 	mov.w	r0, #4294967295
 801d602:	4770      	bx	lr
 801d604:	700a      	strb	r2, [r1, #0]
 801d606:	2001      	movs	r0, #1
 801d608:	4770      	bx	lr
	...

0801d60c <fiprintf>:
 801d60c:	b40e      	push	{r1, r2, r3}
 801d60e:	b503      	push	{r0, r1, lr}
 801d610:	4601      	mov	r1, r0
 801d612:	ab03      	add	r3, sp, #12
 801d614:	4805      	ldr	r0, [pc, #20]	@ (801d62c <fiprintf+0x20>)
 801d616:	f853 2b04 	ldr.w	r2, [r3], #4
 801d61a:	6800      	ldr	r0, [r0, #0]
 801d61c:	9301      	str	r3, [sp, #4]
 801d61e:	f000 f83f 	bl	801d6a0 <_vfiprintf_r>
 801d622:	b002      	add	sp, #8
 801d624:	f85d eb04 	ldr.w	lr, [sp], #4
 801d628:	b003      	add	sp, #12
 801d62a:	4770      	bx	lr
 801d62c:	2000003c 	.word	0x2000003c

0801d630 <abort>:
 801d630:	b508      	push	{r3, lr}
 801d632:	2006      	movs	r0, #6
 801d634:	f000 fa08 	bl	801da48 <raise>
 801d638:	2001      	movs	r0, #1
 801d63a:	f7e6 fdc7 	bl	80041cc <_exit>

0801d63e <_malloc_usable_size_r>:
 801d63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d642:	1f18      	subs	r0, r3, #4
 801d644:	2b00      	cmp	r3, #0
 801d646:	bfbc      	itt	lt
 801d648:	580b      	ldrlt	r3, [r1, r0]
 801d64a:	18c0      	addlt	r0, r0, r3
 801d64c:	4770      	bx	lr

0801d64e <__sfputc_r>:
 801d64e:	6893      	ldr	r3, [r2, #8]
 801d650:	3b01      	subs	r3, #1
 801d652:	2b00      	cmp	r3, #0
 801d654:	b410      	push	{r4}
 801d656:	6093      	str	r3, [r2, #8]
 801d658:	da08      	bge.n	801d66c <__sfputc_r+0x1e>
 801d65a:	6994      	ldr	r4, [r2, #24]
 801d65c:	42a3      	cmp	r3, r4
 801d65e:	db01      	blt.n	801d664 <__sfputc_r+0x16>
 801d660:	290a      	cmp	r1, #10
 801d662:	d103      	bne.n	801d66c <__sfputc_r+0x1e>
 801d664:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d668:	f000 b932 	b.w	801d8d0 <__swbuf_r>
 801d66c:	6813      	ldr	r3, [r2, #0]
 801d66e:	1c58      	adds	r0, r3, #1
 801d670:	6010      	str	r0, [r2, #0]
 801d672:	7019      	strb	r1, [r3, #0]
 801d674:	4608      	mov	r0, r1
 801d676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d67a:	4770      	bx	lr

0801d67c <__sfputs_r>:
 801d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d67e:	4606      	mov	r6, r0
 801d680:	460f      	mov	r7, r1
 801d682:	4614      	mov	r4, r2
 801d684:	18d5      	adds	r5, r2, r3
 801d686:	42ac      	cmp	r4, r5
 801d688:	d101      	bne.n	801d68e <__sfputs_r+0x12>
 801d68a:	2000      	movs	r0, #0
 801d68c:	e007      	b.n	801d69e <__sfputs_r+0x22>
 801d68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d692:	463a      	mov	r2, r7
 801d694:	4630      	mov	r0, r6
 801d696:	f7ff ffda 	bl	801d64e <__sfputc_r>
 801d69a:	1c43      	adds	r3, r0, #1
 801d69c:	d1f3      	bne.n	801d686 <__sfputs_r+0xa>
 801d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d6a0 <_vfiprintf_r>:
 801d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6a4:	460d      	mov	r5, r1
 801d6a6:	b09d      	sub	sp, #116	@ 0x74
 801d6a8:	4614      	mov	r4, r2
 801d6aa:	4698      	mov	r8, r3
 801d6ac:	4606      	mov	r6, r0
 801d6ae:	b118      	cbz	r0, 801d6b8 <_vfiprintf_r+0x18>
 801d6b0:	6a03      	ldr	r3, [r0, #32]
 801d6b2:	b90b      	cbnz	r3, 801d6b8 <_vfiprintf_r+0x18>
 801d6b4:	f7fe f9a6 	bl	801ba04 <__sinit>
 801d6b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d6ba:	07d9      	lsls	r1, r3, #31
 801d6bc:	d405      	bmi.n	801d6ca <_vfiprintf_r+0x2a>
 801d6be:	89ab      	ldrh	r3, [r5, #12]
 801d6c0:	059a      	lsls	r2, r3, #22
 801d6c2:	d402      	bmi.n	801d6ca <_vfiprintf_r+0x2a>
 801d6c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d6c6:	f7fe fad8 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801d6ca:	89ab      	ldrh	r3, [r5, #12]
 801d6cc:	071b      	lsls	r3, r3, #28
 801d6ce:	d501      	bpl.n	801d6d4 <_vfiprintf_r+0x34>
 801d6d0:	692b      	ldr	r3, [r5, #16]
 801d6d2:	b99b      	cbnz	r3, 801d6fc <_vfiprintf_r+0x5c>
 801d6d4:	4629      	mov	r1, r5
 801d6d6:	4630      	mov	r0, r6
 801d6d8:	f000 f938 	bl	801d94c <__swsetup_r>
 801d6dc:	b170      	cbz	r0, 801d6fc <_vfiprintf_r+0x5c>
 801d6de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d6e0:	07dc      	lsls	r4, r3, #31
 801d6e2:	d504      	bpl.n	801d6ee <_vfiprintf_r+0x4e>
 801d6e4:	f04f 30ff 	mov.w	r0, #4294967295
 801d6e8:	b01d      	add	sp, #116	@ 0x74
 801d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ee:	89ab      	ldrh	r3, [r5, #12]
 801d6f0:	0598      	lsls	r0, r3, #22
 801d6f2:	d4f7      	bmi.n	801d6e4 <_vfiprintf_r+0x44>
 801d6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d6f6:	f7fe fac1 	bl	801bc7c <__retarget_lock_release_recursive>
 801d6fa:	e7f3      	b.n	801d6e4 <_vfiprintf_r+0x44>
 801d6fc:	2300      	movs	r3, #0
 801d6fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801d700:	2320      	movs	r3, #32
 801d702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d706:	f8cd 800c 	str.w	r8, [sp, #12]
 801d70a:	2330      	movs	r3, #48	@ 0x30
 801d70c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d8bc <_vfiprintf_r+0x21c>
 801d710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d714:	f04f 0901 	mov.w	r9, #1
 801d718:	4623      	mov	r3, r4
 801d71a:	469a      	mov	sl, r3
 801d71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d720:	b10a      	cbz	r2, 801d726 <_vfiprintf_r+0x86>
 801d722:	2a25      	cmp	r2, #37	@ 0x25
 801d724:	d1f9      	bne.n	801d71a <_vfiprintf_r+0x7a>
 801d726:	ebba 0b04 	subs.w	fp, sl, r4
 801d72a:	d00b      	beq.n	801d744 <_vfiprintf_r+0xa4>
 801d72c:	465b      	mov	r3, fp
 801d72e:	4622      	mov	r2, r4
 801d730:	4629      	mov	r1, r5
 801d732:	4630      	mov	r0, r6
 801d734:	f7ff ffa2 	bl	801d67c <__sfputs_r>
 801d738:	3001      	adds	r0, #1
 801d73a:	f000 80a7 	beq.w	801d88c <_vfiprintf_r+0x1ec>
 801d73e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d740:	445a      	add	r2, fp
 801d742:	9209      	str	r2, [sp, #36]	@ 0x24
 801d744:	f89a 3000 	ldrb.w	r3, [sl]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	f000 809f 	beq.w	801d88c <_vfiprintf_r+0x1ec>
 801d74e:	2300      	movs	r3, #0
 801d750:	f04f 32ff 	mov.w	r2, #4294967295
 801d754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d758:	f10a 0a01 	add.w	sl, sl, #1
 801d75c:	9304      	str	r3, [sp, #16]
 801d75e:	9307      	str	r3, [sp, #28]
 801d760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d764:	931a      	str	r3, [sp, #104]	@ 0x68
 801d766:	4654      	mov	r4, sl
 801d768:	2205      	movs	r2, #5
 801d76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d76e:	4853      	ldr	r0, [pc, #332]	@ (801d8bc <_vfiprintf_r+0x21c>)
 801d770:	f7e2 fd4e 	bl	8000210 <memchr>
 801d774:	9a04      	ldr	r2, [sp, #16]
 801d776:	b9d8      	cbnz	r0, 801d7b0 <_vfiprintf_r+0x110>
 801d778:	06d1      	lsls	r1, r2, #27
 801d77a:	bf44      	itt	mi
 801d77c:	2320      	movmi	r3, #32
 801d77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d782:	0713      	lsls	r3, r2, #28
 801d784:	bf44      	itt	mi
 801d786:	232b      	movmi	r3, #43	@ 0x2b
 801d788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d78c:	f89a 3000 	ldrb.w	r3, [sl]
 801d790:	2b2a      	cmp	r3, #42	@ 0x2a
 801d792:	d015      	beq.n	801d7c0 <_vfiprintf_r+0x120>
 801d794:	9a07      	ldr	r2, [sp, #28]
 801d796:	4654      	mov	r4, sl
 801d798:	2000      	movs	r0, #0
 801d79a:	f04f 0c0a 	mov.w	ip, #10
 801d79e:	4621      	mov	r1, r4
 801d7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d7a4:	3b30      	subs	r3, #48	@ 0x30
 801d7a6:	2b09      	cmp	r3, #9
 801d7a8:	d94b      	bls.n	801d842 <_vfiprintf_r+0x1a2>
 801d7aa:	b1b0      	cbz	r0, 801d7da <_vfiprintf_r+0x13a>
 801d7ac:	9207      	str	r2, [sp, #28]
 801d7ae:	e014      	b.n	801d7da <_vfiprintf_r+0x13a>
 801d7b0:	eba0 0308 	sub.w	r3, r0, r8
 801d7b4:	fa09 f303 	lsl.w	r3, r9, r3
 801d7b8:	4313      	orrs	r3, r2
 801d7ba:	9304      	str	r3, [sp, #16]
 801d7bc:	46a2      	mov	sl, r4
 801d7be:	e7d2      	b.n	801d766 <_vfiprintf_r+0xc6>
 801d7c0:	9b03      	ldr	r3, [sp, #12]
 801d7c2:	1d19      	adds	r1, r3, #4
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	9103      	str	r1, [sp, #12]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	bfbb      	ittet	lt
 801d7cc:	425b      	neglt	r3, r3
 801d7ce:	f042 0202 	orrlt.w	r2, r2, #2
 801d7d2:	9307      	strge	r3, [sp, #28]
 801d7d4:	9307      	strlt	r3, [sp, #28]
 801d7d6:	bfb8      	it	lt
 801d7d8:	9204      	strlt	r2, [sp, #16]
 801d7da:	7823      	ldrb	r3, [r4, #0]
 801d7dc:	2b2e      	cmp	r3, #46	@ 0x2e
 801d7de:	d10a      	bne.n	801d7f6 <_vfiprintf_r+0x156>
 801d7e0:	7863      	ldrb	r3, [r4, #1]
 801d7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7e4:	d132      	bne.n	801d84c <_vfiprintf_r+0x1ac>
 801d7e6:	9b03      	ldr	r3, [sp, #12]
 801d7e8:	1d1a      	adds	r2, r3, #4
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	9203      	str	r2, [sp, #12]
 801d7ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d7f2:	3402      	adds	r4, #2
 801d7f4:	9305      	str	r3, [sp, #20]
 801d7f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d8cc <_vfiprintf_r+0x22c>
 801d7fa:	7821      	ldrb	r1, [r4, #0]
 801d7fc:	2203      	movs	r2, #3
 801d7fe:	4650      	mov	r0, sl
 801d800:	f7e2 fd06 	bl	8000210 <memchr>
 801d804:	b138      	cbz	r0, 801d816 <_vfiprintf_r+0x176>
 801d806:	9b04      	ldr	r3, [sp, #16]
 801d808:	eba0 000a 	sub.w	r0, r0, sl
 801d80c:	2240      	movs	r2, #64	@ 0x40
 801d80e:	4082      	lsls	r2, r0
 801d810:	4313      	orrs	r3, r2
 801d812:	3401      	adds	r4, #1
 801d814:	9304      	str	r3, [sp, #16]
 801d816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d81a:	4829      	ldr	r0, [pc, #164]	@ (801d8c0 <_vfiprintf_r+0x220>)
 801d81c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d820:	2206      	movs	r2, #6
 801d822:	f7e2 fcf5 	bl	8000210 <memchr>
 801d826:	2800      	cmp	r0, #0
 801d828:	d03f      	beq.n	801d8aa <_vfiprintf_r+0x20a>
 801d82a:	4b26      	ldr	r3, [pc, #152]	@ (801d8c4 <_vfiprintf_r+0x224>)
 801d82c:	bb1b      	cbnz	r3, 801d876 <_vfiprintf_r+0x1d6>
 801d82e:	9b03      	ldr	r3, [sp, #12]
 801d830:	3307      	adds	r3, #7
 801d832:	f023 0307 	bic.w	r3, r3, #7
 801d836:	3308      	adds	r3, #8
 801d838:	9303      	str	r3, [sp, #12]
 801d83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d83c:	443b      	add	r3, r7
 801d83e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d840:	e76a      	b.n	801d718 <_vfiprintf_r+0x78>
 801d842:	fb0c 3202 	mla	r2, ip, r2, r3
 801d846:	460c      	mov	r4, r1
 801d848:	2001      	movs	r0, #1
 801d84a:	e7a8      	b.n	801d79e <_vfiprintf_r+0xfe>
 801d84c:	2300      	movs	r3, #0
 801d84e:	3401      	adds	r4, #1
 801d850:	9305      	str	r3, [sp, #20]
 801d852:	4619      	mov	r1, r3
 801d854:	f04f 0c0a 	mov.w	ip, #10
 801d858:	4620      	mov	r0, r4
 801d85a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d85e:	3a30      	subs	r2, #48	@ 0x30
 801d860:	2a09      	cmp	r2, #9
 801d862:	d903      	bls.n	801d86c <_vfiprintf_r+0x1cc>
 801d864:	2b00      	cmp	r3, #0
 801d866:	d0c6      	beq.n	801d7f6 <_vfiprintf_r+0x156>
 801d868:	9105      	str	r1, [sp, #20]
 801d86a:	e7c4      	b.n	801d7f6 <_vfiprintf_r+0x156>
 801d86c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d870:	4604      	mov	r4, r0
 801d872:	2301      	movs	r3, #1
 801d874:	e7f0      	b.n	801d858 <_vfiprintf_r+0x1b8>
 801d876:	ab03      	add	r3, sp, #12
 801d878:	9300      	str	r3, [sp, #0]
 801d87a:	462a      	mov	r2, r5
 801d87c:	4b12      	ldr	r3, [pc, #72]	@ (801d8c8 <_vfiprintf_r+0x228>)
 801d87e:	a904      	add	r1, sp, #16
 801d880:	4630      	mov	r0, r6
 801d882:	f7fd fc7b 	bl	801b17c <_printf_float>
 801d886:	4607      	mov	r7, r0
 801d888:	1c78      	adds	r0, r7, #1
 801d88a:	d1d6      	bne.n	801d83a <_vfiprintf_r+0x19a>
 801d88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d88e:	07d9      	lsls	r1, r3, #31
 801d890:	d405      	bmi.n	801d89e <_vfiprintf_r+0x1fe>
 801d892:	89ab      	ldrh	r3, [r5, #12]
 801d894:	059a      	lsls	r2, r3, #22
 801d896:	d402      	bmi.n	801d89e <_vfiprintf_r+0x1fe>
 801d898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d89a:	f7fe f9ef 	bl	801bc7c <__retarget_lock_release_recursive>
 801d89e:	89ab      	ldrh	r3, [r5, #12]
 801d8a0:	065b      	lsls	r3, r3, #25
 801d8a2:	f53f af1f 	bmi.w	801d6e4 <_vfiprintf_r+0x44>
 801d8a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8a8:	e71e      	b.n	801d6e8 <_vfiprintf_r+0x48>
 801d8aa:	ab03      	add	r3, sp, #12
 801d8ac:	9300      	str	r3, [sp, #0]
 801d8ae:	462a      	mov	r2, r5
 801d8b0:	4b05      	ldr	r3, [pc, #20]	@ (801d8c8 <_vfiprintf_r+0x228>)
 801d8b2:	a904      	add	r1, sp, #16
 801d8b4:	4630      	mov	r0, r6
 801d8b6:	f7fd fef9 	bl	801b6ac <_printf_i>
 801d8ba:	e7e4      	b.n	801d886 <_vfiprintf_r+0x1e6>
 801d8bc:	0801e348 	.word	0x0801e348
 801d8c0:	0801e352 	.word	0x0801e352
 801d8c4:	0801b17d 	.word	0x0801b17d
 801d8c8:	0801d67d 	.word	0x0801d67d
 801d8cc:	0801e34e 	.word	0x0801e34e

0801d8d0 <__swbuf_r>:
 801d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8d2:	460e      	mov	r6, r1
 801d8d4:	4614      	mov	r4, r2
 801d8d6:	4605      	mov	r5, r0
 801d8d8:	b118      	cbz	r0, 801d8e2 <__swbuf_r+0x12>
 801d8da:	6a03      	ldr	r3, [r0, #32]
 801d8dc:	b90b      	cbnz	r3, 801d8e2 <__swbuf_r+0x12>
 801d8de:	f7fe f891 	bl	801ba04 <__sinit>
 801d8e2:	69a3      	ldr	r3, [r4, #24]
 801d8e4:	60a3      	str	r3, [r4, #8]
 801d8e6:	89a3      	ldrh	r3, [r4, #12]
 801d8e8:	071a      	lsls	r2, r3, #28
 801d8ea:	d501      	bpl.n	801d8f0 <__swbuf_r+0x20>
 801d8ec:	6923      	ldr	r3, [r4, #16]
 801d8ee:	b943      	cbnz	r3, 801d902 <__swbuf_r+0x32>
 801d8f0:	4621      	mov	r1, r4
 801d8f2:	4628      	mov	r0, r5
 801d8f4:	f000 f82a 	bl	801d94c <__swsetup_r>
 801d8f8:	b118      	cbz	r0, 801d902 <__swbuf_r+0x32>
 801d8fa:	f04f 37ff 	mov.w	r7, #4294967295
 801d8fe:	4638      	mov	r0, r7
 801d900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d902:	6823      	ldr	r3, [r4, #0]
 801d904:	6922      	ldr	r2, [r4, #16]
 801d906:	1a98      	subs	r0, r3, r2
 801d908:	6963      	ldr	r3, [r4, #20]
 801d90a:	b2f6      	uxtb	r6, r6
 801d90c:	4283      	cmp	r3, r0
 801d90e:	4637      	mov	r7, r6
 801d910:	dc05      	bgt.n	801d91e <__swbuf_r+0x4e>
 801d912:	4621      	mov	r1, r4
 801d914:	4628      	mov	r0, r5
 801d916:	f7ff fdb7 	bl	801d488 <_fflush_r>
 801d91a:	2800      	cmp	r0, #0
 801d91c:	d1ed      	bne.n	801d8fa <__swbuf_r+0x2a>
 801d91e:	68a3      	ldr	r3, [r4, #8]
 801d920:	3b01      	subs	r3, #1
 801d922:	60a3      	str	r3, [r4, #8]
 801d924:	6823      	ldr	r3, [r4, #0]
 801d926:	1c5a      	adds	r2, r3, #1
 801d928:	6022      	str	r2, [r4, #0]
 801d92a:	701e      	strb	r6, [r3, #0]
 801d92c:	6962      	ldr	r2, [r4, #20]
 801d92e:	1c43      	adds	r3, r0, #1
 801d930:	429a      	cmp	r2, r3
 801d932:	d004      	beq.n	801d93e <__swbuf_r+0x6e>
 801d934:	89a3      	ldrh	r3, [r4, #12]
 801d936:	07db      	lsls	r3, r3, #31
 801d938:	d5e1      	bpl.n	801d8fe <__swbuf_r+0x2e>
 801d93a:	2e0a      	cmp	r6, #10
 801d93c:	d1df      	bne.n	801d8fe <__swbuf_r+0x2e>
 801d93e:	4621      	mov	r1, r4
 801d940:	4628      	mov	r0, r5
 801d942:	f7ff fda1 	bl	801d488 <_fflush_r>
 801d946:	2800      	cmp	r0, #0
 801d948:	d0d9      	beq.n	801d8fe <__swbuf_r+0x2e>
 801d94a:	e7d6      	b.n	801d8fa <__swbuf_r+0x2a>

0801d94c <__swsetup_r>:
 801d94c:	b538      	push	{r3, r4, r5, lr}
 801d94e:	4b29      	ldr	r3, [pc, #164]	@ (801d9f4 <__swsetup_r+0xa8>)
 801d950:	4605      	mov	r5, r0
 801d952:	6818      	ldr	r0, [r3, #0]
 801d954:	460c      	mov	r4, r1
 801d956:	b118      	cbz	r0, 801d960 <__swsetup_r+0x14>
 801d958:	6a03      	ldr	r3, [r0, #32]
 801d95a:	b90b      	cbnz	r3, 801d960 <__swsetup_r+0x14>
 801d95c:	f7fe f852 	bl	801ba04 <__sinit>
 801d960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d964:	0719      	lsls	r1, r3, #28
 801d966:	d422      	bmi.n	801d9ae <__swsetup_r+0x62>
 801d968:	06da      	lsls	r2, r3, #27
 801d96a:	d407      	bmi.n	801d97c <__swsetup_r+0x30>
 801d96c:	2209      	movs	r2, #9
 801d96e:	602a      	str	r2, [r5, #0]
 801d970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d974:	81a3      	strh	r3, [r4, #12]
 801d976:	f04f 30ff 	mov.w	r0, #4294967295
 801d97a:	e033      	b.n	801d9e4 <__swsetup_r+0x98>
 801d97c:	0758      	lsls	r0, r3, #29
 801d97e:	d512      	bpl.n	801d9a6 <__swsetup_r+0x5a>
 801d980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d982:	b141      	cbz	r1, 801d996 <__swsetup_r+0x4a>
 801d984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d988:	4299      	cmp	r1, r3
 801d98a:	d002      	beq.n	801d992 <__swsetup_r+0x46>
 801d98c:	4628      	mov	r0, r5
 801d98e:	f7fe ffd3 	bl	801c938 <_free_r>
 801d992:	2300      	movs	r3, #0
 801d994:	6363      	str	r3, [r4, #52]	@ 0x34
 801d996:	89a3      	ldrh	r3, [r4, #12]
 801d998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d99c:	81a3      	strh	r3, [r4, #12]
 801d99e:	2300      	movs	r3, #0
 801d9a0:	6063      	str	r3, [r4, #4]
 801d9a2:	6923      	ldr	r3, [r4, #16]
 801d9a4:	6023      	str	r3, [r4, #0]
 801d9a6:	89a3      	ldrh	r3, [r4, #12]
 801d9a8:	f043 0308 	orr.w	r3, r3, #8
 801d9ac:	81a3      	strh	r3, [r4, #12]
 801d9ae:	6923      	ldr	r3, [r4, #16]
 801d9b0:	b94b      	cbnz	r3, 801d9c6 <__swsetup_r+0x7a>
 801d9b2:	89a3      	ldrh	r3, [r4, #12]
 801d9b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d9b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d9bc:	d003      	beq.n	801d9c6 <__swsetup_r+0x7a>
 801d9be:	4621      	mov	r1, r4
 801d9c0:	4628      	mov	r0, r5
 801d9c2:	f000 f883 	bl	801dacc <__smakebuf_r>
 801d9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9ca:	f013 0201 	ands.w	r2, r3, #1
 801d9ce:	d00a      	beq.n	801d9e6 <__swsetup_r+0x9a>
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	60a2      	str	r2, [r4, #8]
 801d9d4:	6962      	ldr	r2, [r4, #20]
 801d9d6:	4252      	negs	r2, r2
 801d9d8:	61a2      	str	r2, [r4, #24]
 801d9da:	6922      	ldr	r2, [r4, #16]
 801d9dc:	b942      	cbnz	r2, 801d9f0 <__swsetup_r+0xa4>
 801d9de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d9e2:	d1c5      	bne.n	801d970 <__swsetup_r+0x24>
 801d9e4:	bd38      	pop	{r3, r4, r5, pc}
 801d9e6:	0799      	lsls	r1, r3, #30
 801d9e8:	bf58      	it	pl
 801d9ea:	6962      	ldrpl	r2, [r4, #20]
 801d9ec:	60a2      	str	r2, [r4, #8]
 801d9ee:	e7f4      	b.n	801d9da <__swsetup_r+0x8e>
 801d9f0:	2000      	movs	r0, #0
 801d9f2:	e7f7      	b.n	801d9e4 <__swsetup_r+0x98>
 801d9f4:	2000003c 	.word	0x2000003c

0801d9f8 <_raise_r>:
 801d9f8:	291f      	cmp	r1, #31
 801d9fa:	b538      	push	{r3, r4, r5, lr}
 801d9fc:	4605      	mov	r5, r0
 801d9fe:	460c      	mov	r4, r1
 801da00:	d904      	bls.n	801da0c <_raise_r+0x14>
 801da02:	2316      	movs	r3, #22
 801da04:	6003      	str	r3, [r0, #0]
 801da06:	f04f 30ff 	mov.w	r0, #4294967295
 801da0a:	bd38      	pop	{r3, r4, r5, pc}
 801da0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801da0e:	b112      	cbz	r2, 801da16 <_raise_r+0x1e>
 801da10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801da14:	b94b      	cbnz	r3, 801da2a <_raise_r+0x32>
 801da16:	4628      	mov	r0, r5
 801da18:	f000 f830 	bl	801da7c <_getpid_r>
 801da1c:	4622      	mov	r2, r4
 801da1e:	4601      	mov	r1, r0
 801da20:	4628      	mov	r0, r5
 801da22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da26:	f000 b817 	b.w	801da58 <_kill_r>
 801da2a:	2b01      	cmp	r3, #1
 801da2c:	d00a      	beq.n	801da44 <_raise_r+0x4c>
 801da2e:	1c59      	adds	r1, r3, #1
 801da30:	d103      	bne.n	801da3a <_raise_r+0x42>
 801da32:	2316      	movs	r3, #22
 801da34:	6003      	str	r3, [r0, #0]
 801da36:	2001      	movs	r0, #1
 801da38:	e7e7      	b.n	801da0a <_raise_r+0x12>
 801da3a:	2100      	movs	r1, #0
 801da3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801da40:	4620      	mov	r0, r4
 801da42:	4798      	blx	r3
 801da44:	2000      	movs	r0, #0
 801da46:	e7e0      	b.n	801da0a <_raise_r+0x12>

0801da48 <raise>:
 801da48:	4b02      	ldr	r3, [pc, #8]	@ (801da54 <raise+0xc>)
 801da4a:	4601      	mov	r1, r0
 801da4c:	6818      	ldr	r0, [r3, #0]
 801da4e:	f7ff bfd3 	b.w	801d9f8 <_raise_r>
 801da52:	bf00      	nop
 801da54:	2000003c 	.word	0x2000003c

0801da58 <_kill_r>:
 801da58:	b538      	push	{r3, r4, r5, lr}
 801da5a:	4d07      	ldr	r5, [pc, #28]	@ (801da78 <_kill_r+0x20>)
 801da5c:	2300      	movs	r3, #0
 801da5e:	4604      	mov	r4, r0
 801da60:	4608      	mov	r0, r1
 801da62:	4611      	mov	r1, r2
 801da64:	602b      	str	r3, [r5, #0]
 801da66:	f7e6 fba1 	bl	80041ac <_kill>
 801da6a:	1c43      	adds	r3, r0, #1
 801da6c:	d102      	bne.n	801da74 <_kill_r+0x1c>
 801da6e:	682b      	ldr	r3, [r5, #0]
 801da70:	b103      	cbz	r3, 801da74 <_kill_r+0x1c>
 801da72:	6023      	str	r3, [r4, #0]
 801da74:	bd38      	pop	{r3, r4, r5, pc}
 801da76:	bf00      	nop
 801da78:	2000179c 	.word	0x2000179c

0801da7c <_getpid_r>:
 801da7c:	f7e6 bb8e 	b.w	800419c <_getpid>

0801da80 <__swhatbuf_r>:
 801da80:	b570      	push	{r4, r5, r6, lr}
 801da82:	460c      	mov	r4, r1
 801da84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da88:	2900      	cmp	r1, #0
 801da8a:	b096      	sub	sp, #88	@ 0x58
 801da8c:	4615      	mov	r5, r2
 801da8e:	461e      	mov	r6, r3
 801da90:	da0d      	bge.n	801daae <__swhatbuf_r+0x2e>
 801da92:	89a3      	ldrh	r3, [r4, #12]
 801da94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801da98:	f04f 0100 	mov.w	r1, #0
 801da9c:	bf14      	ite	ne
 801da9e:	2340      	movne	r3, #64	@ 0x40
 801daa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801daa4:	2000      	movs	r0, #0
 801daa6:	6031      	str	r1, [r6, #0]
 801daa8:	602b      	str	r3, [r5, #0]
 801daaa:	b016      	add	sp, #88	@ 0x58
 801daac:	bd70      	pop	{r4, r5, r6, pc}
 801daae:	466a      	mov	r2, sp
 801dab0:	f000 f848 	bl	801db44 <_fstat_r>
 801dab4:	2800      	cmp	r0, #0
 801dab6:	dbec      	blt.n	801da92 <__swhatbuf_r+0x12>
 801dab8:	9901      	ldr	r1, [sp, #4]
 801daba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dabe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dac2:	4259      	negs	r1, r3
 801dac4:	4159      	adcs	r1, r3
 801dac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801daca:	e7eb      	b.n	801daa4 <__swhatbuf_r+0x24>

0801dacc <__smakebuf_r>:
 801dacc:	898b      	ldrh	r3, [r1, #12]
 801dace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dad0:	079d      	lsls	r5, r3, #30
 801dad2:	4606      	mov	r6, r0
 801dad4:	460c      	mov	r4, r1
 801dad6:	d507      	bpl.n	801dae8 <__smakebuf_r+0x1c>
 801dad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dadc:	6023      	str	r3, [r4, #0]
 801dade:	6123      	str	r3, [r4, #16]
 801dae0:	2301      	movs	r3, #1
 801dae2:	6163      	str	r3, [r4, #20]
 801dae4:	b003      	add	sp, #12
 801dae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dae8:	ab01      	add	r3, sp, #4
 801daea:	466a      	mov	r2, sp
 801daec:	f7ff ffc8 	bl	801da80 <__swhatbuf_r>
 801daf0:	9f00      	ldr	r7, [sp, #0]
 801daf2:	4605      	mov	r5, r0
 801daf4:	4639      	mov	r1, r7
 801daf6:	4630      	mov	r0, r6
 801daf8:	f7fd fa14 	bl	801af24 <_malloc_r>
 801dafc:	b948      	cbnz	r0, 801db12 <__smakebuf_r+0x46>
 801dafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db02:	059a      	lsls	r2, r3, #22
 801db04:	d4ee      	bmi.n	801dae4 <__smakebuf_r+0x18>
 801db06:	f023 0303 	bic.w	r3, r3, #3
 801db0a:	f043 0302 	orr.w	r3, r3, #2
 801db0e:	81a3      	strh	r3, [r4, #12]
 801db10:	e7e2      	b.n	801dad8 <__smakebuf_r+0xc>
 801db12:	89a3      	ldrh	r3, [r4, #12]
 801db14:	6020      	str	r0, [r4, #0]
 801db16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801db1a:	81a3      	strh	r3, [r4, #12]
 801db1c:	9b01      	ldr	r3, [sp, #4]
 801db1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801db22:	b15b      	cbz	r3, 801db3c <__smakebuf_r+0x70>
 801db24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db28:	4630      	mov	r0, r6
 801db2a:	f000 f81d 	bl	801db68 <_isatty_r>
 801db2e:	b128      	cbz	r0, 801db3c <__smakebuf_r+0x70>
 801db30:	89a3      	ldrh	r3, [r4, #12]
 801db32:	f023 0303 	bic.w	r3, r3, #3
 801db36:	f043 0301 	orr.w	r3, r3, #1
 801db3a:	81a3      	strh	r3, [r4, #12]
 801db3c:	89a3      	ldrh	r3, [r4, #12]
 801db3e:	431d      	orrs	r5, r3
 801db40:	81a5      	strh	r5, [r4, #12]
 801db42:	e7cf      	b.n	801dae4 <__smakebuf_r+0x18>

0801db44 <_fstat_r>:
 801db44:	b538      	push	{r3, r4, r5, lr}
 801db46:	4d07      	ldr	r5, [pc, #28]	@ (801db64 <_fstat_r+0x20>)
 801db48:	2300      	movs	r3, #0
 801db4a:	4604      	mov	r4, r0
 801db4c:	4608      	mov	r0, r1
 801db4e:	4611      	mov	r1, r2
 801db50:	602b      	str	r3, [r5, #0]
 801db52:	f7e6 fb8b 	bl	800426c <_fstat>
 801db56:	1c43      	adds	r3, r0, #1
 801db58:	d102      	bne.n	801db60 <_fstat_r+0x1c>
 801db5a:	682b      	ldr	r3, [r5, #0]
 801db5c:	b103      	cbz	r3, 801db60 <_fstat_r+0x1c>
 801db5e:	6023      	str	r3, [r4, #0]
 801db60:	bd38      	pop	{r3, r4, r5, pc}
 801db62:	bf00      	nop
 801db64:	2000179c 	.word	0x2000179c

0801db68 <_isatty_r>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	4d06      	ldr	r5, [pc, #24]	@ (801db84 <_isatty_r+0x1c>)
 801db6c:	2300      	movs	r3, #0
 801db6e:	4604      	mov	r4, r0
 801db70:	4608      	mov	r0, r1
 801db72:	602b      	str	r3, [r5, #0]
 801db74:	f7e6 fb8a 	bl	800428c <_isatty>
 801db78:	1c43      	adds	r3, r0, #1
 801db7a:	d102      	bne.n	801db82 <_isatty_r+0x1a>
 801db7c:	682b      	ldr	r3, [r5, #0]
 801db7e:	b103      	cbz	r3, 801db82 <_isatty_r+0x1a>
 801db80:	6023      	str	r3, [r4, #0]
 801db82:	bd38      	pop	{r3, r4, r5, pc}
 801db84:	2000179c 	.word	0x2000179c

0801db88 <_init>:
 801db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db8a:	bf00      	nop
 801db8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db8e:	bc08      	pop	{r3}
 801db90:	469e      	mov	lr, r3
 801db92:	4770      	bx	lr

0801db94 <_fini>:
 801db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db96:	bf00      	nop
 801db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db9a:	bc08      	pop	{r3}
 801db9c:	469e      	mov	lr, r3
 801db9e:	4770      	bx	lr
